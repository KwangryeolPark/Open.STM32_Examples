
printf_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000613c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080063dc  080063dc  000163dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064c8  080064c8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080064c8  080064c8  000164c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064d0  080064d0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064d0  080064d0  000164d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064d4  080064d4  000164d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  080064d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  24000074  0800654c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400013c  0800654c  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113c8  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d1  00000000  00000000  0003146a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  00033640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  00034230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f725  00000000  00000000  00034d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107bd  00000000  00000000  0007445d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00195e13  00000000  00000000  00084c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021aa2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037b8  00000000  00000000  0021aa80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080063c4 	.word	0x080063c4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	080063c4 	.word	0x080063c4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_GPIO_Init+0x30>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007bc:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <MX_GPIO_Init+0x30>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_GPIO_Init+0x30>)
 80007c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]

}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	58024400 	.word	0x58024400

080007e4 <_write>:

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int fd, char * ptr, int len) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	f04f 33ff 	mov.w	r3, #4294967295
 80007f8:	68b9      	ldr	r1, [r7, #8]
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <_write+0x28>)
 80007fc:	f003 fd0e 	bl	800421c <HAL_UART_Transmit>
	return len;
 8000800:	687b      	ldr	r3, [r7, #4]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	24000094 	.word	0x24000094

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800081a:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800081c:	bf00      	nop
 800081e:	4b30      	ldr	r3, [pc, #192]	; (80008e0 <main+0xd0>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000826:	2b00      	cmp	r3, #0
 8000828:	d004      	beq.n	8000834 <main+0x24>
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	1e5a      	subs	r2, r3, #1
 800082e:	60fa      	str	r2, [r7, #12]
 8000830:	2b00      	cmp	r3, #0
 8000832:	dcf4      	bgt.n	800081e <main+0xe>
  if ( timeout < 0 )
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	2b00      	cmp	r3, #0
 8000838:	da01      	bge.n	800083e <main+0x2e>
  {
  Error_Handler();
 800083a:	f000 f8bd 	bl	80009b8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083e:	f000 fa6d 	bl	8000d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000842:	f000 f851 	bl	80008e8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000846:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <main+0xd0>)
 8000848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084c:	4a24      	ldr	r2, [pc, #144]	; (80008e0 <main+0xd0>)
 800084e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000852:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000856:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <main+0xd0>)
 8000858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000864:	2000      	movs	r0, #0
 8000866:	f000 fdaf 	bl	80013c8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800086a:	2100      	movs	r1, #0
 800086c:	2000      	movs	r0, #0
 800086e:	f000 fdc5 	bl	80013fc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000872:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000876:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000878:	bf00      	nop
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <main+0xd0>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000882:	2b00      	cmp	r3, #0
 8000884:	d104      	bne.n	8000890 <main+0x80>
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	1e5a      	subs	r2, r3, #1
 800088a:	60fa      	str	r2, [r7, #12]
 800088c:	2b00      	cmp	r3, #0
 800088e:	dcf4      	bgt.n	800087a <main+0x6a>
if ( timeout < 0 )
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2b00      	cmp	r3, #0
 8000894:	da01      	bge.n	800089a <main+0x8a>
{
Error_Handler();
 8000896:	f000 f88f 	bl	80009b8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089a:	f7ff ff89 	bl	80007b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800089e:	f000 f95d 	bl	8000b5c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int count = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
  float fcount = 0.0;
 80008a6:	f04f 0300 	mov.w	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
  {
	  // To printf the floating number, you set option in
	  // Project -> Properties -> C/C++ Build -> Settings -> Tool Settings -> MCU GCC Linker -> Miscellaneous
	  // -u_printf_float
	  // Refer to https://swiftcam.tistory.com/144
	  printf("Count: %d\tFloat Count: %f\r\n", count, fcount);
 80008ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80008b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008b4:	ec53 2b17 	vmov	r2, r3, d7
 80008b8:	68b9      	ldr	r1, [r7, #8]
 80008ba:	480a      	ldr	r0, [pc, #40]	; (80008e4 <main+0xd4>)
 80008bc:	f004 fdf4 	bl	80054a8 <iprintf>
	  count++;
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	3301      	adds	r3, #1
 80008c4:	60bb      	str	r3, [r7, #8]
	  fcount += 0.5;
 80008c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80008ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80008ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008d2:	edc7 7a01 	vstr	s15, [r7, #4]
	  HAL_Delay(1000);
 80008d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008da:	f000 fab1 	bl	8000e40 <HAL_Delay>
	  printf("Count: %d\tFloat Count: %f\r\n", count, fcount);
 80008de:	e7e5      	b.n	80008ac <main+0x9c>
 80008e0:	58024400 	.word	0x58024400
 80008e4:	080063dc 	.word	0x080063dc

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b09c      	sub	sp, #112	; 0x70
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	224c      	movs	r2, #76	; 0x4c
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f004 fdce 	bl	8005498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2220      	movs	r2, #32
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f004 fdc8 	bl	8005498 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000908:	2004      	movs	r0, #4
 800090a:	f000 fd8b 	bl	8001424 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <SystemClock_Config+0xc8>)
 8000914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000916:	4a26      	ldr	r2, [pc, #152]	; (80009b0 <SystemClock_Config+0xc8>)
 8000918:	f023 0301 	bic.w	r3, r3, #1
 800091c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800091e:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <SystemClock_Config+0xc8>)
 8000920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <SystemClock_Config+0xcc>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a21      	ldr	r2, [pc, #132]	; (80009b4 <SystemClock_Config+0xcc>)
 800092e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <SystemClock_Config+0xcc>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000940:	bf00      	nop
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <SystemClock_Config+0xcc>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800094a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800094e:	d1f8      	bne.n	8000942 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000950:	2302      	movs	r3, #2
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000954:	2301      	movs	r3, #1
 8000956:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000958:	2340      	movs	r3, #64	; 0x40
 800095a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800095c:	2300      	movs	r3, #0
 800095e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000964:	4618      	mov	r0, r3
 8000966:	f000 fdb7 	bl	80014d8 <HAL_RCC_OscConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000970:	f000 f822 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000974:	233f      	movs	r3, #63	; 0x3f
 8000976:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f001 f9f7 	bl	8001d8c <HAL_RCC_ClockConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009a4:	f000 f808 	bl	80009b8 <Error_Handler>
  }
}
 80009a8:	bf00      	nop
 80009aa:	3770      	adds	r7, #112	; 0x70
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	58000400 	.word	0x58000400
 80009b4:	58024800 	.word	0x58024800

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <Error_Handler+0x8>
	...

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <HAL_MspInit+0x30>)
 80009cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009d0:	4a08      	ldr	r2, [pc, #32]	; (80009f4 <HAL_MspInit+0x30>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_MspInit+0x30>)
 80009dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	58024400 	.word	0x58024400

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <NMI_Handler+0x4>

080009fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a44:	f000 f9dc 	bl	8000e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	e00a      	b.n	8000a74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a5e:	f3af 8000 	nop.w
 8000a62:	4601      	mov	r1, r0
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	1c5a      	adds	r2, r3, #1
 8000a68:	60ba      	str	r2, [r7, #8]
 8000a6a:	b2ca      	uxtb	r2, r1
 8000a6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	3301      	adds	r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	dbf0      	blt.n	8000a5e <_read+0x12>
  }

  return len;
 8000a7c:	687b      	ldr	r3, [r7, #4]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aae:	605a      	str	r2, [r3, #4]
  return 0;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <_isatty>:

int _isatty(int file)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af8:	4a14      	ldr	r2, [pc, #80]	; (8000b4c <_sbrk+0x5c>)
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <_sbrk+0x60>)
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <_sbrk+0x64>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d102      	bne.n	8000b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <_sbrk+0x64>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <_sbrk+0x68>)
 8000b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <_sbrk+0x64>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d207      	bcs.n	8000b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b20:	f004 fc90 	bl	8005444 <__errno>
 8000b24:	4603      	mov	r3, r0
 8000b26:	220c      	movs	r2, #12
 8000b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2e:	e009      	b.n	8000b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <_sbrk+0x64>)
 8000b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b42:	68fb      	ldr	r3, [r7, #12]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	24080000 	.word	0x24080000
 8000b50:	00000400 	.word	0x00000400
 8000b54:	24000090 	.word	0x24000090
 8000b58:	24000140 	.word	0x24000140

08000b5c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b62:	4a23      	ldr	r2, [pc, #140]	; (8000bf0 <MX_USART1_UART_Init+0x94>)
 8000b64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ba4:	4811      	ldr	r0, [pc, #68]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000ba6:	f003 fae9 	bl	800417c <HAL_UART_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bb0:	f7ff ff02 	bl	80009b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	480d      	ldr	r0, [pc, #52]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000bb8:	f004 fb79 	bl	80052ae <HAL_UARTEx_SetTxFifoThreshold>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bc2:	f7ff fef9 	bl	80009b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4808      	ldr	r0, [pc, #32]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000bca:	f004 fbae 	bl	800532a <HAL_UARTEx_SetRxFifoThreshold>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bd4:	f7ff fef0 	bl	80009b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000bda:	f004 fb2f 	bl	800523c <HAL_UARTEx_DisableFifoMode>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000be4:	f7ff fee8 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	24000094 	.word	0x24000094
 8000bf0:	40011000 	.word	0x40011000

08000bf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b0bc      	sub	sp, #240	; 0xf0
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	22c8      	movs	r2, #200	; 0xc8
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f004 fc3f 	bl	8005498 <memset>
  if(uartHandle->Instance==USART1)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a27      	ldr	r2, [pc, #156]	; (8000cbc <HAL_UART_MspInit+0xc8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d146      	bne.n	8000cb2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c24:	f04f 0201 	mov.w	r2, #1
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 fc32 	bl	80024a4 <HAL_RCCEx_PeriphCLKConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c46:	f7ff feb7 	bl	80009b8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <HAL_UART_MspInit+0xcc>)
 8000c4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c50:	4a1b      	ldr	r2, [pc, #108]	; (8000cc0 <HAL_UART_MspInit+0xcc>)
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <HAL_UART_MspInit+0xcc>)
 8000c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c60:	f003 0310 	and.w	r3, r3, #16
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <HAL_UART_MspInit+0xcc>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6e:	4a14      	ldr	r2, [pc, #80]	; (8000cc0 <HAL_UART_MspInit+0xcc>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_UART_MspInit+0xcc>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000c86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <HAL_UART_MspInit+0xd0>)
 8000cae:	f000 f9db 	bl	8001068 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	37f0      	adds	r7, #240	; 0xf0
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40011000 	.word	0x40011000
 8000cc0:	58024400 	.word	0x58024400
 8000cc4:	58020000 	.word	0x58020000

08000cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ccc:	f7ff fcda 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd0:	480c      	ldr	r0, [pc, #48]	; (8000d04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cd2:	490d      	ldr	r1, [pc, #52]	; (8000d08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce8:	4c0a      	ldr	r4, [pc, #40]	; (8000d14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f004 fbab 	bl	8005450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfa:	f7ff fd89 	bl	8000810 <main>
  bx  lr
 8000cfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d00:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d08:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000d0c:	080064d8 	.word	0x080064d8
  ldr r2, =_sbss
 8000d10:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000d14:	2400013c 	.word	0x2400013c

08000d18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC3_IRQHandler>
	...

08000d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d22:	2003      	movs	r0, #3
 8000d24:	f000 f96e 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d28:	f001 f9e6 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_Init+0x68>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	0a1b      	lsrs	r3, r3, #8
 8000d34:	f003 030f 	and.w	r3, r3, #15
 8000d38:	4913      	ldr	r1, [pc, #76]	; (8000d88 <HAL_Init+0x6c>)
 8000d3a:	5ccb      	ldrb	r3, [r1, r3]
 8000d3c:	f003 031f 	and.w	r3, r3, #31
 8000d40:	fa22 f303 	lsr.w	r3, r2, r3
 8000d44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <HAL_Init+0x68>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <HAL_Init+0x6c>)
 8000d50:	5cd3      	ldrb	r3, [r2, r3]
 8000d52:	f003 031f 	and.w	r3, r3, #31
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5c:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <HAL_Init+0x70>)
 8000d5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d60:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <HAL_Init+0x74>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d66:	2000      	movs	r0, #0
 8000d68:	f000 f814 	bl	8000d94 <HAL_InitTick>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e002      	b.n	8000d7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d76:	f7ff fe25 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	58024400 	.word	0x58024400
 8000d88:	080063f8 	.word	0x080063f8
 8000d8c:	24000004 	.word	0x24000004
 8000d90:	24000000 	.word	0x24000000

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_InitTick+0x60>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d101      	bne.n	8000da8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e021      	b.n	8000dec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <HAL_InitTick+0x64>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_InitTick+0x60>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 f945 	bl	800104e <HAL_SYSTICK_Config>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00e      	b.n	8000dec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d80a      	bhi.n	8000dea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f000 f91d 	bl	800101a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de0:	4a06      	ldr	r2, [pc, #24]	; (8000dfc <HAL_InitTick+0x68>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e000      	b.n	8000dec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	2400000c 	.word	0x2400000c
 8000df8:	24000000 	.word	0x24000000
 8000dfc:	24000008 	.word	0x24000008

08000e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x20>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x24>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <HAL_IncTick+0x24>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	2400000c 	.word	0x2400000c
 8000e24:	24000128 	.word	0x24000128

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <HAL_GetTick+0x14>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	24000128 	.word	0x24000128

08000e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e48:	f7ff ffee 	bl	8000e28 <HAL_GetTick>
 8000e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e58:	d005      	beq.n	8000e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_Delay+0x44>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4413      	add	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e66:	bf00      	nop
 8000e68:	f7ff ffde 	bl	8000e28 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d8f7      	bhi.n	8000e68 <HAL_Delay+0x28>
  {
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2400000c 	.word	0x2400000c

08000e88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <HAL_GetREVID+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	0c1b      	lsrs	r3, r3, #16
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	5c001000 	.word	0x5c001000

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00
 8000ee4:	05fa0000 	.word	0x05fa0000

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	; (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	; (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	; 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd0:	d301      	bcc.n	8000fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00f      	b.n	8000ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <SysTick_Config+0x40>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fde:	210f      	movs	r1, #15
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f7ff ff8e 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <SysTick_Config+0x40>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	; (8001000 <SysTick_Config+0x40>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff47 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001028:	f7ff ff5e 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 800102c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	6978      	ldr	r0, [r7, #20]
 8001034:	f7ff ff90 	bl	8000f58 <NVIC_EncodePriority>
 8001038:	4602      	mov	r2, r0
 800103a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff5f 	bl	8000f04 <__NVIC_SetPriority>
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffb2 	bl	8000fc0 <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001076:	4b89      	ldr	r3, [pc, #548]	; (800129c <HAL_GPIO_Init+0x234>)
 8001078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800107a:	e194      	b.n	80013a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	2101      	movs	r1, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa01 f303 	lsl.w	r3, r1, r3
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 8186 	beq.w	80013a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b01      	cmp	r3, #1
 800109e:	d005      	beq.n	80010ac <HAL_GPIO_Init+0x44>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d130      	bne.n	800110e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010e2:	2201      	movs	r2, #1
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	091b      	lsrs	r3, r3, #4
 80010f8:	f003 0201 	and.w	r2, r3, #1
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	2b03      	cmp	r3, #3
 8001118:	d017      	beq.n	800114a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	2203      	movs	r2, #3
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d123      	bne.n	800119e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	08da      	lsrs	r2, r3, #3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3208      	adds	r2, #8
 800115e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	220f      	movs	r2, #15
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	691a      	ldr	r2, [r3, #16]
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	08da      	lsrs	r2, r3, #3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3208      	adds	r2, #8
 8001198:	69b9      	ldr	r1, [r7, #24]
 800119a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	2203      	movs	r2, #3
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0203 	and.w	r2, r3, #3
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 80e0 	beq.w	80013a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e0:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <HAL_GPIO_Init+0x238>)
 80011e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011e6:	4a2e      	ldr	r2, [pc, #184]	; (80012a0 <HAL_GPIO_Init+0x238>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011f0:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <HAL_GPIO_Init+0x238>)
 80011f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011fe:	4a29      	ldr	r2, [pc, #164]	; (80012a4 <HAL_GPIO_Init+0x23c>)
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3302      	adds	r3, #2
 8001206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	220f      	movs	r2, #15
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a20      	ldr	r2, [pc, #128]	; (80012a8 <HAL_GPIO_Init+0x240>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d052      	beq.n	80012d0 <HAL_GPIO_Init+0x268>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a1f      	ldr	r2, [pc, #124]	; (80012ac <HAL_GPIO_Init+0x244>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d031      	beq.n	8001296 <HAL_GPIO_Init+0x22e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a1e      	ldr	r2, [pc, #120]	; (80012b0 <HAL_GPIO_Init+0x248>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d02b      	beq.n	8001292 <HAL_GPIO_Init+0x22a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a1d      	ldr	r2, [pc, #116]	; (80012b4 <HAL_GPIO_Init+0x24c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d025      	beq.n	800128e <HAL_GPIO_Init+0x226>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a1c      	ldr	r2, [pc, #112]	; (80012b8 <HAL_GPIO_Init+0x250>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d01f      	beq.n	800128a <HAL_GPIO_Init+0x222>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a1b      	ldr	r2, [pc, #108]	; (80012bc <HAL_GPIO_Init+0x254>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d019      	beq.n	8001286 <HAL_GPIO_Init+0x21e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a1a      	ldr	r2, [pc, #104]	; (80012c0 <HAL_GPIO_Init+0x258>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0x21a>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <HAL_GPIO_Init+0x25c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d00d      	beq.n	800127e <HAL_GPIO_Init+0x216>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a18      	ldr	r2, [pc, #96]	; (80012c8 <HAL_GPIO_Init+0x260>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d007      	beq.n	800127a <HAL_GPIO_Init+0x212>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a17      	ldr	r2, [pc, #92]	; (80012cc <HAL_GPIO_Init+0x264>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d101      	bne.n	8001276 <HAL_GPIO_Init+0x20e>
 8001272:	2309      	movs	r3, #9
 8001274:	e02d      	b.n	80012d2 <HAL_GPIO_Init+0x26a>
 8001276:	230a      	movs	r3, #10
 8001278:	e02b      	b.n	80012d2 <HAL_GPIO_Init+0x26a>
 800127a:	2308      	movs	r3, #8
 800127c:	e029      	b.n	80012d2 <HAL_GPIO_Init+0x26a>
 800127e:	2307      	movs	r3, #7
 8001280:	e027      	b.n	80012d2 <HAL_GPIO_Init+0x26a>
 8001282:	2306      	movs	r3, #6
 8001284:	e025      	b.n	80012d2 <HAL_GPIO_Init+0x26a>
 8001286:	2305      	movs	r3, #5
 8001288:	e023      	b.n	80012d2 <HAL_GPIO_Init+0x26a>
 800128a:	2304      	movs	r3, #4
 800128c:	e021      	b.n	80012d2 <HAL_GPIO_Init+0x26a>
 800128e:	2303      	movs	r3, #3
 8001290:	e01f      	b.n	80012d2 <HAL_GPIO_Init+0x26a>
 8001292:	2302      	movs	r3, #2
 8001294:	e01d      	b.n	80012d2 <HAL_GPIO_Init+0x26a>
 8001296:	2301      	movs	r3, #1
 8001298:	e01b      	b.n	80012d2 <HAL_GPIO_Init+0x26a>
 800129a:	bf00      	nop
 800129c:	58000080 	.word	0x58000080
 80012a0:	58024400 	.word	0x58024400
 80012a4:	58000400 	.word	0x58000400
 80012a8:	58020000 	.word	0x58020000
 80012ac:	58020400 	.word	0x58020400
 80012b0:	58020800 	.word	0x58020800
 80012b4:	58020c00 	.word	0x58020c00
 80012b8:	58021000 	.word	0x58021000
 80012bc:	58021400 	.word	0x58021400
 80012c0:	58021800 	.word	0x58021800
 80012c4:	58021c00 	.word	0x58021c00
 80012c8:	58022000 	.word	0x58022000
 80012cc:	58022400 	.word	0x58022400
 80012d0:	2300      	movs	r3, #0
 80012d2:	69fa      	ldr	r2, [r7, #28]
 80012d4:	f002 0203 	and.w	r2, r2, #3
 80012d8:	0092      	lsls	r2, r2, #2
 80012da:	4093      	lsls	r3, r2
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e2:	4938      	ldr	r1, [pc, #224]	; (80013c4 <HAL_GPIO_Init+0x35c>)
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	3302      	adds	r3, #2
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001316:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800131e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001344:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	3301      	adds	r3, #1
 80013a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	fa22 f303 	lsr.w	r3, r2, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f47f ae63 	bne.w	800107c <HAL_GPIO_Init+0x14>
  }
}
 80013b6:	bf00      	nop
 80013b8:	bf00      	nop
 80013ba:	3724      	adds	r7, #36	; 0x24
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	58000400 	.word	0x58000400

080013c8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80013d0:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <HAL_HSEM_FastTake+0x2c>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3320      	adds	r3, #32
 80013d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013da:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_HSEM_FastTake+0x30>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d101      	bne.n	80013e4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	e000      	b.n	80013e6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	58026400 	.word	0x58026400
 80013f8:	80000300 	.word	0x80000300

080013fc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001406:	4906      	ldr	r1, [pc, #24]	; (8001420 <HAL_HSEM_Release+0x24>)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	58026400 	.word	0x58026400

08001424 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800142c:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	2b06      	cmp	r3, #6
 8001436:	d00a      	beq.n	800144e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001438:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	429a      	cmp	r2, r3
 8001444:	d001      	beq.n	800144a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e040      	b.n	80014cc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	e03e      	b.n	80014cc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001456:	491f      	ldr	r1, [pc, #124]	; (80014d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4313      	orrs	r3, r2
 800145c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800145e:	f7ff fce3 	bl	8000e28 <HAL_GetTick>
 8001462:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001464:	e009      	b.n	800147a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001466:	f7ff fcdf 	bl	8000e28 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001474:	d901      	bls.n	800147a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e028      	b.n	80014cc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001486:	d1ee      	bne.n	8001466 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b1e      	cmp	r3, #30
 800148c:	d008      	beq.n	80014a0 <HAL_PWREx_ConfigSupply+0x7c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b2e      	cmp	r3, #46	; 0x2e
 8001492:	d005      	beq.n	80014a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b1d      	cmp	r3, #29
 8001498:	d002      	beq.n	80014a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b2d      	cmp	r3, #45	; 0x2d
 800149e:	d114      	bne.n	80014ca <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80014a0:	f7ff fcc2 	bl	8000e28 <HAL_GetTick>
 80014a4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80014a6:	e009      	b.n	80014bc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014a8:	f7ff fcbe 	bl	8000e28 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014b6:	d901      	bls.n	80014bc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e007      	b.n	80014cc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_PWREx_ConfigSupply+0xb0>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c8:	d1ee      	bne.n	80014a8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	58024800 	.word	0x58024800

080014d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08c      	sub	sp, #48	; 0x30
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d102      	bne.n	80014ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	f000 bc48 	b.w	8001d7c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 8088 	beq.w	800160a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014fa:	4b99      	ldr	r3, [pc, #612]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001504:	4b96      	ldr	r3, [pc, #600]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 8001506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150c:	2b10      	cmp	r3, #16
 800150e:	d007      	beq.n	8001520 <HAL_RCC_OscConfig+0x48>
 8001510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001512:	2b18      	cmp	r3, #24
 8001514:	d111      	bne.n	800153a <HAL_RCC_OscConfig+0x62>
 8001516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d10c      	bne.n	800153a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001520:	4b8f      	ldr	r3, [pc, #572]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d06d      	beq.n	8001608 <HAL_RCC_OscConfig+0x130>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d169      	bne.n	8001608 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	f000 bc21 	b.w	8001d7c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001542:	d106      	bne.n	8001552 <HAL_RCC_OscConfig+0x7a>
 8001544:	4b86      	ldr	r3, [pc, #536]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a85      	ldr	r2, [pc, #532]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 800154a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	e02e      	b.n	80015b0 <HAL_RCC_OscConfig+0xd8>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10c      	bne.n	8001574 <HAL_RCC_OscConfig+0x9c>
 800155a:	4b81      	ldr	r3, [pc, #516]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a80      	ldr	r2, [pc, #512]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 8001560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	4b7e      	ldr	r3, [pc, #504]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a7d      	ldr	r2, [pc, #500]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 800156c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e01d      	b.n	80015b0 <HAL_RCC_OscConfig+0xd8>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800157c:	d10c      	bne.n	8001598 <HAL_RCC_OscConfig+0xc0>
 800157e:	4b78      	ldr	r3, [pc, #480]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a77      	ldr	r2, [pc, #476]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 8001584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	4b75      	ldr	r3, [pc, #468]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a74      	ldr	r2, [pc, #464]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 8001590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e00b      	b.n	80015b0 <HAL_RCC_OscConfig+0xd8>
 8001598:	4b71      	ldr	r3, [pc, #452]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a70      	ldr	r2, [pc, #448]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 800159e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b6e      	ldr	r3, [pc, #440]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a6d      	ldr	r2, [pc, #436]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 80015aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d013      	beq.n	80015e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b8:	f7ff fc36 	bl	8000e28 <HAL_GetTick>
 80015bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c0:	f7ff fc32 	bl	8000e28 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	; 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e3d4      	b.n	8001d7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015d2:	4b63      	ldr	r3, [pc, #396]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0xe8>
 80015de:	e014      	b.n	800160a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7ff fc22 	bl	8000e28 <HAL_GetTick>
 80015e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e8:	f7ff fc1e 	bl	8000e28 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	; 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e3c0      	b.n	8001d7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015fa:	4b59      	ldr	r3, [pc, #356]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x110>
 8001606:	e000      	b.n	800160a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 80ca 	beq.w	80017ac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001618:	4b51      	ldr	r3, [pc, #324]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001620:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001622:	4b4f      	ldr	r3, [pc, #316]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d007      	beq.n	800163e <HAL_RCC_OscConfig+0x166>
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	2b18      	cmp	r3, #24
 8001632:	d156      	bne.n	80016e2 <HAL_RCC_OscConfig+0x20a>
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d151      	bne.n	80016e2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800163e:	4b48      	ldr	r3, [pc, #288]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	2b00      	cmp	r3, #0
 8001648:	d005      	beq.n	8001656 <HAL_RCC_OscConfig+0x17e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e392      	b.n	8001d7c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001656:	4b42      	ldr	r3, [pc, #264]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 0219 	bic.w	r2, r3, #25
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	493f      	ldr	r1, [pc, #252]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 8001664:	4313      	orrs	r3, r2
 8001666:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fbde 	bl	8000e28 <HAL_GetTick>
 800166c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001670:	f7ff fbda 	bl	8000e28 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e37c      	b.n	8001d7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001682:	4b37      	ldr	r3, [pc, #220]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168e:	f7ff fbfb 	bl	8000e88 <HAL_GetREVID>
 8001692:	4603      	mov	r3, r0
 8001694:	f241 0203 	movw	r2, #4099	; 0x1003
 8001698:	4293      	cmp	r3, r2
 800169a:	d817      	bhi.n	80016cc <HAL_RCC_OscConfig+0x1f4>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	2b40      	cmp	r3, #64	; 0x40
 80016a2:	d108      	bne.n	80016b6 <HAL_RCC_OscConfig+0x1de>
 80016a4:	4b2e      	ldr	r3, [pc, #184]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80016ac:	4a2c      	ldr	r2, [pc, #176]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 80016ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b4:	e07a      	b.n	80017ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b6:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	031b      	lsls	r3, r3, #12
 80016c4:	4926      	ldr	r1, [pc, #152]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ca:	e06f      	b.n	80017ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016cc:	4b24      	ldr	r3, [pc, #144]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	061b      	lsls	r3, r3, #24
 80016da:	4921      	ldr	r1, [pc, #132]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e0:	e064      	b.n	80017ac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d047      	beq.n	800177a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016ea:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f023 0219 	bic.w	r2, r3, #25
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	491a      	ldr	r1, [pc, #104]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fc:	f7ff fb94 	bl	8000e28 <HAL_GetTick>
 8001700:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001704:	f7ff fb90 	bl	8000e28 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e332      	b.n	8001d7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001722:	f7ff fbb1 	bl	8000e88 <HAL_GetREVID>
 8001726:	4603      	mov	r3, r0
 8001728:	f241 0203 	movw	r2, #4099	; 0x1003
 800172c:	4293      	cmp	r3, r2
 800172e:	d819      	bhi.n	8001764 <HAL_RCC_OscConfig+0x28c>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	2b40      	cmp	r3, #64	; 0x40
 8001736:	d108      	bne.n	800174a <HAL_RCC_OscConfig+0x272>
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001740:	4a07      	ldr	r2, [pc, #28]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 8001742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001746:	6053      	str	r3, [r2, #4]
 8001748:	e030      	b.n	80017ac <HAL_RCC_OscConfig+0x2d4>
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	031b      	lsls	r3, r3, #12
 8001758:	4901      	ldr	r1, [pc, #4]	; (8001760 <HAL_RCC_OscConfig+0x288>)
 800175a:	4313      	orrs	r3, r2
 800175c:	604b      	str	r3, [r1, #4]
 800175e:	e025      	b.n	80017ac <HAL_RCC_OscConfig+0x2d4>
 8001760:	58024400 	.word	0x58024400
 8001764:	4b9a      	ldr	r3, [pc, #616]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	061b      	lsls	r3, r3, #24
 8001772:	4997      	ldr	r1, [pc, #604]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
 8001778:	e018      	b.n	80017ac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177a:	4b95      	ldr	r3, [pc, #596]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a94      	ldr	r2, [pc, #592]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 8001780:	f023 0301 	bic.w	r3, r3, #1
 8001784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff fb4f 	bl	8000e28 <HAL_GetTick>
 800178a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff fb4b 	bl	8000e28 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e2ed      	b.n	8001d7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017a0:	4b8b      	ldr	r3, [pc, #556]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1f0      	bne.n	800178e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80a9 	beq.w	800190c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ba:	4b85      	ldr	r3, [pc, #532]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017c4:	4b82      	ldr	r3, [pc, #520]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 80017c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d007      	beq.n	80017e0 <HAL_RCC_OscConfig+0x308>
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2b18      	cmp	r3, #24
 80017d4:	d13a      	bne.n	800184c <HAL_RCC_OscConfig+0x374>
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d135      	bne.n	800184c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017e0:	4b7b      	ldr	r3, [pc, #492]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_OscConfig+0x320>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	2b80      	cmp	r3, #128	; 0x80
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e2c1      	b.n	8001d7c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017f8:	f7ff fb46 	bl	8000e88 <HAL_GetREVID>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8001802:	4293      	cmp	r3, r2
 8001804:	d817      	bhi.n	8001836 <HAL_RCC_OscConfig+0x35e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	2b20      	cmp	r3, #32
 800180c:	d108      	bne.n	8001820 <HAL_RCC_OscConfig+0x348>
 800180e:	4b70      	ldr	r3, [pc, #448]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001816:	4a6e      	ldr	r2, [pc, #440]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 8001818:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800181c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800181e:	e075      	b.n	800190c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001820:	4b6b      	ldr	r3, [pc, #428]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	069b      	lsls	r3, r3, #26
 800182e:	4968      	ldr	r1, [pc, #416]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001834:	e06a      	b.n	800190c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001836:	4b66      	ldr	r3, [pc, #408]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	061b      	lsls	r3, r3, #24
 8001844:	4962      	ldr	r1, [pc, #392]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 8001846:	4313      	orrs	r3, r2
 8001848:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800184a:	e05f      	b.n	800190c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d042      	beq.n	80018da <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001854:	4b5e      	ldr	r3, [pc, #376]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a5d      	ldr	r2, [pc, #372]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 800185a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800185e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff fae2 	bl	8000e28 <HAL_GetTick>
 8001864:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001868:	f7ff fade 	bl	8000e28 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e280      	b.n	8001d7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800187a:	4b55      	ldr	r3, [pc, #340]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001886:	f7ff faff 	bl	8000e88 <HAL_GetREVID>
 800188a:	4603      	mov	r3, r0
 800188c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001890:	4293      	cmp	r3, r2
 8001892:	d817      	bhi.n	80018c4 <HAL_RCC_OscConfig+0x3ec>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	2b20      	cmp	r3, #32
 800189a:	d108      	bne.n	80018ae <HAL_RCC_OscConfig+0x3d6>
 800189c:	4b4c      	ldr	r3, [pc, #304]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80018a4:	4a4a      	ldr	r2, [pc, #296]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 80018a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018aa:	6053      	str	r3, [r2, #4]
 80018ac:	e02e      	b.n	800190c <HAL_RCC_OscConfig+0x434>
 80018ae:	4b48      	ldr	r3, [pc, #288]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	069b      	lsls	r3, r3, #26
 80018bc:	4944      	ldr	r1, [pc, #272]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	604b      	str	r3, [r1, #4]
 80018c2:	e023      	b.n	800190c <HAL_RCC_OscConfig+0x434>
 80018c4:	4b42      	ldr	r3, [pc, #264]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	061b      	lsls	r3, r3, #24
 80018d2:	493f      	ldr	r1, [pc, #252]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	60cb      	str	r3, [r1, #12]
 80018d8:	e018      	b.n	800190c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80018da:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a3c      	ldr	r2, [pc, #240]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 80018e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e6:	f7ff fa9f 	bl	8000e28 <HAL_GetTick>
 80018ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80018ee:	f7ff fa9b 	bl	8000e28 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e23d      	b.n	8001d7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001900:	4b33      	ldr	r3, [pc, #204]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f0      	bne.n	80018ee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	d036      	beq.n	8001986 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d019      	beq.n	8001954 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001920:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 8001922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001924:	4a2a      	ldr	r2, [pc, #168]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192c:	f7ff fa7c 	bl	8000e28 <HAL_GetTick>
 8001930:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001934:	f7ff fa78 	bl	8000e28 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e21a      	b.n	8001d7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001946:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 8001948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x45c>
 8001952:	e018      	b.n	8001986 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001954:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 8001956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001958:	4a1d      	ldr	r2, [pc, #116]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 800195a:	f023 0301 	bic.w	r3, r3, #1
 800195e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001960:	f7ff fa62 	bl	8000e28 <HAL_GetTick>
 8001964:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001968:	f7ff fa5e 	bl	8000e28 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e200      	b.n	8001d7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 800197c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0320 	and.w	r3, r3, #32
 800198e:	2b00      	cmp	r3, #0
 8001990:	d039      	beq.n	8001a06 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d01c      	beq.n	80019d4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a0c      	ldr	r2, [pc, #48]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 80019a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019a6:	f7ff fa3f 	bl	8000e28 <HAL_GetTick>
 80019aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019ae:	f7ff fa3b 	bl	8000e28 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e1dd      	b.n	8001d7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x4d6>
 80019cc:	e01b      	b.n	8001a06 <HAL_RCC_OscConfig+0x52e>
 80019ce:	bf00      	nop
 80019d0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019d4:	4b9b      	ldr	r3, [pc, #620]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a9a      	ldr	r2, [pc, #616]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 80019da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019e0:	f7ff fa22 	bl	8000e28 <HAL_GetTick>
 80019e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019e8:	f7ff fa1e 	bl	8000e28 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e1c0      	b.n	8001d7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019fa:	4b92      	ldr	r3, [pc, #584]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 8081 	beq.w	8001b16 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a14:	4b8c      	ldr	r3, [pc, #560]	; (8001c48 <HAL_RCC_OscConfig+0x770>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a8b      	ldr	r2, [pc, #556]	; (8001c48 <HAL_RCC_OscConfig+0x770>)
 8001a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a20:	f7ff fa02 	bl	8000e28 <HAL_GetTick>
 8001a24:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a28:	f7ff f9fe 	bl	8000e28 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	; 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e1a0      	b.n	8001d7c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a3a:	4b83      	ldr	r3, [pc, #524]	; (8001c48 <HAL_RCC_OscConfig+0x770>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d106      	bne.n	8001a5c <HAL_RCC_OscConfig+0x584>
 8001a4e:	4b7d      	ldr	r3, [pc, #500]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a52:	4a7c      	ldr	r2, [pc, #496]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5a:	e02d      	b.n	8001ab8 <HAL_RCC_OscConfig+0x5e0>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10c      	bne.n	8001a7e <HAL_RCC_OscConfig+0x5a6>
 8001a64:	4b77      	ldr	r3, [pc, #476]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a68:	4a76      	ldr	r2, [pc, #472]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001a6a:	f023 0301 	bic.w	r3, r3, #1
 8001a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a70:	4b74      	ldr	r3, [pc, #464]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a74:	4a73      	ldr	r2, [pc, #460]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001a76:	f023 0304 	bic.w	r3, r3, #4
 8001a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7c:	e01c      	b.n	8001ab8 <HAL_RCC_OscConfig+0x5e0>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b05      	cmp	r3, #5
 8001a84:	d10c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x5c8>
 8001a86:	4b6f      	ldr	r3, [pc, #444]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8a:	4a6e      	ldr	r2, [pc, #440]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	6713      	str	r3, [r2, #112]	; 0x70
 8001a92:	4b6c      	ldr	r3, [pc, #432]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a96:	4a6b      	ldr	r2, [pc, #428]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a9e:	e00b      	b.n	8001ab8 <HAL_RCC_OscConfig+0x5e0>
 8001aa0:	4b68      	ldr	r3, [pc, #416]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa4:	4a67      	ldr	r2, [pc, #412]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001aa6:	f023 0301 	bic.w	r3, r3, #1
 8001aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8001aac:	4b65      	ldr	r3, [pc, #404]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab0:	4a64      	ldr	r2, [pc, #400]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001ab2:	f023 0304 	bic.w	r3, r3, #4
 8001ab6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d015      	beq.n	8001aec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac0:	f7ff f9b2 	bl	8000e28 <HAL_GetTick>
 8001ac4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac8:	f7ff f9ae 	bl	8000e28 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e14e      	b.n	8001d7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ade:	4b59      	ldr	r3, [pc, #356]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0ee      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x5f0>
 8001aea:	e014      	b.n	8001b16 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aec:	f7ff f99c 	bl	8000e28 <HAL_GetTick>
 8001af0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af4:	f7ff f998 	bl	8000e28 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e138      	b.n	8001d7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b0a:	4b4e      	ldr	r3, [pc, #312]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1ee      	bne.n	8001af4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 812d 	beq.w	8001d7a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001b20:	4b48      	ldr	r3, [pc, #288]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b28:	2b18      	cmp	r3, #24
 8001b2a:	f000 80bd 	beq.w	8001ca8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	f040 809e 	bne.w	8001c74 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b38:	4b42      	ldr	r3, [pc, #264]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a41      	ldr	r2, [pc, #260]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7ff f970 	bl	8000e28 <HAL_GetTick>
 8001b48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7ff f96c 	bl	8000e28 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e10e      	b.n	8001d7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b5e:	4b39      	ldr	r3, [pc, #228]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b6a:	4b36      	ldr	r3, [pc, #216]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b6e:	4b37      	ldr	r3, [pc, #220]	; (8001c4c <HAL_RCC_OscConfig+0x774>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b7a:	0112      	lsls	r2, r2, #4
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	4931      	ldr	r1, [pc, #196]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	628b      	str	r3, [r1, #40]	; 0x28
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b92:	3b01      	subs	r3, #1
 8001b94:	025b      	lsls	r3, r3, #9
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	041b      	lsls	r3, r3, #16
 8001ba2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bac:	3b01      	subs	r3, #1
 8001bae:	061b      	lsls	r3, r3, #24
 8001bb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001bb4:	4923      	ldr	r1, [pc, #140]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbe:	4a21      	ldr	r2, [pc, #132]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bca:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <HAL_RCC_OscConfig+0x778>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bd2:	00d2      	lsls	r2, r2, #3
 8001bd4:	491b      	ldr	r1, [pc, #108]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001bda:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bde:	f023 020c 	bic.w	r2, r3, #12
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4917      	ldr	r1, [pc, #92]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001bec:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf0:	f023 0202 	bic.w	r2, r3, #2
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf8:	4912      	ldr	r1, [pc, #72]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c02:	4a10      	ldr	r2, [pc, #64]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	4a0d      	ldr	r2, [pc, #52]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c26:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <HAL_RCC_OscConfig+0x76c>)
 8001c34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3a:	f7ff f8f5 	bl	8000e28 <HAL_GetTick>
 8001c3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c40:	e011      	b.n	8001c66 <HAL_RCC_OscConfig+0x78e>
 8001c42:	bf00      	nop
 8001c44:	58024400 	.word	0x58024400
 8001c48:	58024800 	.word	0x58024800
 8001c4c:	fffffc0c 	.word	0xfffffc0c
 8001c50:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c54:	f7ff f8e8 	bl	8000e28 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e08a      	b.n	8001d7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c66:	4b47      	ldr	r3, [pc, #284]	; (8001d84 <HAL_RCC_OscConfig+0x8ac>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0x77c>
 8001c72:	e082      	b.n	8001d7a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c74:	4b43      	ldr	r3, [pc, #268]	; (8001d84 <HAL_RCC_OscConfig+0x8ac>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a42      	ldr	r2, [pc, #264]	; (8001d84 <HAL_RCC_OscConfig+0x8ac>)
 8001c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff f8d2 	bl	8000e28 <HAL_GetTick>
 8001c84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c88:	f7ff f8ce 	bl	8000e28 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e070      	b.n	8001d7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c9a:	4b3a      	ldr	r3, [pc, #232]	; (8001d84 <HAL_RCC_OscConfig+0x8ac>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x7b0>
 8001ca6:	e068      	b.n	8001d7a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001ca8:	4b36      	ldr	r3, [pc, #216]	; (8001d84 <HAL_RCC_OscConfig+0x8ac>)
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001cae:	4b35      	ldr	r3, [pc, #212]	; (8001d84 <HAL_RCC_OscConfig+0x8ac>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d031      	beq.n	8001d20 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	f003 0203 	and.w	r2, r3, #3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d12a      	bne.n	8001d20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d122      	bne.n	8001d20 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d11a      	bne.n	8001d20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	0a5b      	lsrs	r3, r3, #9
 8001cee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d111      	bne.n	8001d20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	0c1b      	lsrs	r3, r3, #16
 8001d00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d08:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d108      	bne.n	8001d20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	0e1b      	lsrs	r3, r3, #24
 8001d12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e02b      	b.n	8001d7c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001d24:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <HAL_RCC_OscConfig+0x8ac>)
 8001d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d28:	08db      	lsrs	r3, r3, #3
 8001d2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d2e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d01f      	beq.n	8001d7a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_RCC_OscConfig+0x8ac>)
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	4a11      	ldr	r2, [pc, #68]	; (8001d84 <HAL_RCC_OscConfig+0x8ac>)
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d46:	f7ff f86f 	bl	8000e28 <HAL_GetTick>
 8001d4a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001d4c:	bf00      	nop
 8001d4e:	f7ff f86b 	bl	8000e28 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d0f9      	beq.n	8001d4e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_RCC_OscConfig+0x8ac>)
 8001d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_RCC_OscConfig+0x8b0>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d66:	00d2      	lsls	r2, r2, #3
 8001d68:	4906      	ldr	r1, [pc, #24]	; (8001d84 <HAL_RCC_OscConfig+0x8ac>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001d6e:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_RCC_OscConfig+0x8ac>)
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	4a04      	ldr	r2, [pc, #16]	; (8001d84 <HAL_RCC_OscConfig+0x8ac>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3730      	adds	r7, #48	; 0x30
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	58024400 	.word	0x58024400
 8001d88:	ffff0007 	.word	0xffff0007

08001d8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e19c      	b.n	80020da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da0:	4b8a      	ldr	r3, [pc, #552]	; (8001fcc <HAL_RCC_ClockConfig+0x240>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 030f 	and.w	r3, r3, #15
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d910      	bls.n	8001dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b87      	ldr	r3, [pc, #540]	; (8001fcc <HAL_RCC_ClockConfig+0x240>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 020f 	bic.w	r2, r3, #15
 8001db6:	4985      	ldr	r1, [pc, #532]	; (8001fcc <HAL_RCC_ClockConfig+0x240>)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbe:	4b83      	ldr	r3, [pc, #524]	; (8001fcc <HAL_RCC_ClockConfig+0x240>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e184      	b.n	80020da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d010      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691a      	ldr	r2, [r3, #16]
 8001de0:	4b7b      	ldr	r3, [pc, #492]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d908      	bls.n	8001dfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001dec:	4b78      	ldr	r3, [pc, #480]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	4975      	ldr	r1, [pc, #468]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d010      	beq.n	8001e2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	4b70      	ldr	r3, [pc, #448]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d908      	bls.n	8001e2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e1a:	4b6d      	ldr	r3, [pc, #436]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	496a      	ldr	r1, [pc, #424]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0310 	and.w	r3, r3, #16
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d010      	beq.n	8001e5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699a      	ldr	r2, [r3, #24]
 8001e3c:	4b64      	ldr	r3, [pc, #400]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d908      	bls.n	8001e5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e48:	4b61      	ldr	r3, [pc, #388]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	495e      	ldr	r1, [pc, #376]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0320 	and.w	r3, r3, #32
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d010      	beq.n	8001e88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69da      	ldr	r2, [r3, #28]
 8001e6a:	4b59      	ldr	r3, [pc, #356]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d908      	bls.n	8001e88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001e76:	4b56      	ldr	r3, [pc, #344]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	4953      	ldr	r1, [pc, #332]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d010      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	4b4d      	ldr	r3, [pc, #308]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d908      	bls.n	8001eb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea4:	4b4a      	ldr	r3, [pc, #296]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f023 020f 	bic.w	r2, r3, #15
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4947      	ldr	r1, [pc, #284]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d055      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ec2:	4b43      	ldr	r3, [pc, #268]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	4940      	ldr	r1, [pc, #256]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d107      	bne.n	8001eec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001edc:	4b3c      	ldr	r3, [pc, #240]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d121      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0f6      	b.n	80020da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d107      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ef4:	4b36      	ldr	r3, [pc, #216]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d115      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0ea      	b.n	80020da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d107      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f0c:	4b30      	ldr	r3, [pc, #192]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d109      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0de      	b.n	80020da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f1c:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0d6      	b.n	80020da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f2c:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	f023 0207 	bic.w	r2, r3, #7
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4925      	ldr	r1, [pc, #148]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f3e:	f7fe ff73 	bl	8000e28 <HAL_GetTick>
 8001f42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f44:	e00a      	b.n	8001f5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f46:	f7fe ff6f 	bl	8000e28 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e0be      	b.n	80020da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d1eb      	bne.n	8001f46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d010      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d208      	bcs.n	8001f9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	f023 020f 	bic.w	r2, r3, #15
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	490e      	ldr	r1, [pc, #56]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_RCC_ClockConfig+0x240>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d214      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <HAL_RCC_ClockConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 020f 	bic.w	r2, r3, #15
 8001fb2:	4906      	ldr	r1, [pc, #24]	; (8001fcc <HAL_RCC_ClockConfig+0x240>)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <HAL_RCC_ClockConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e086      	b.n	80020da <HAL_RCC_ClockConfig+0x34e>
 8001fcc:	52002000 	.word	0x52002000
 8001fd0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d010      	beq.n	8002002 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	4b3f      	ldr	r3, [pc, #252]	; (80020e4 <HAL_RCC_ClockConfig+0x358>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d208      	bcs.n	8002002 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ff0:	4b3c      	ldr	r3, [pc, #240]	; (80020e4 <HAL_RCC_ClockConfig+0x358>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	4939      	ldr	r1, [pc, #228]	; (80020e4 <HAL_RCC_ClockConfig+0x358>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d010      	beq.n	8002030 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695a      	ldr	r2, [r3, #20]
 8002012:	4b34      	ldr	r3, [pc, #208]	; (80020e4 <HAL_RCC_ClockConfig+0x358>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800201a:	429a      	cmp	r2, r3
 800201c:	d208      	bcs.n	8002030 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800201e:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <HAL_RCC_ClockConfig+0x358>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	492e      	ldr	r1, [pc, #184]	; (80020e4 <HAL_RCC_ClockConfig+0x358>)
 800202c:	4313      	orrs	r3, r2
 800202e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	2b00      	cmp	r3, #0
 800203a:	d010      	beq.n	800205e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	699a      	ldr	r2, [r3, #24]
 8002040:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <HAL_RCC_ClockConfig+0x358>)
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002048:	429a      	cmp	r2, r3
 800204a:	d208      	bcs.n	800205e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800204c:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <HAL_RCC_ClockConfig+0x358>)
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	4922      	ldr	r1, [pc, #136]	; (80020e4 <HAL_RCC_ClockConfig+0x358>)
 800205a:	4313      	orrs	r3, r2
 800205c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0320 	and.w	r3, r3, #32
 8002066:	2b00      	cmp	r3, #0
 8002068:	d010      	beq.n	800208c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69da      	ldr	r2, [r3, #28]
 800206e:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <HAL_RCC_ClockConfig+0x358>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002076:	429a      	cmp	r2, r3
 8002078:	d208      	bcs.n	800208c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800207a:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <HAL_RCC_ClockConfig+0x358>)
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4917      	ldr	r1, [pc, #92]	; (80020e4 <HAL_RCC_ClockConfig+0x358>)
 8002088:	4313      	orrs	r3, r2
 800208a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800208c:	f000 f834 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 8002090:	4602      	mov	r2, r0
 8002092:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_RCC_ClockConfig+0x358>)
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	0a1b      	lsrs	r3, r3, #8
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	4912      	ldr	r1, [pc, #72]	; (80020e8 <HAL_RCC_ClockConfig+0x35c>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
 80020a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020aa:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_RCC_ClockConfig+0x358>)
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	4a0d      	ldr	r2, [pc, #52]	; (80020e8 <HAL_RCC_ClockConfig+0x35c>)
 80020b4:	5cd3      	ldrb	r3, [r2, r3]
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	fa22 f303 	lsr.w	r3, r2, r3
 80020c0:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <HAL_RCC_ClockConfig+0x360>)
 80020c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020c4:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <HAL_RCC_ClockConfig+0x364>)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_RCC_ClockConfig+0x368>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fe60 	bl	8000d94 <HAL_InitTick>
 80020d4:	4603      	mov	r3, r0
 80020d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	58024400 	.word	0x58024400
 80020e8:	080063f8 	.word	0x080063f8
 80020ec:	24000004 	.word	0x24000004
 80020f0:	24000000 	.word	0x24000000
 80020f4:	24000008 	.word	0x24000008

080020f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b089      	sub	sp, #36	; 0x24
 80020fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020fe:	4bb3      	ldr	r3, [pc, #716]	; (80023cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002106:	2b18      	cmp	r3, #24
 8002108:	f200 8155 	bhi.w	80023b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800210c:	a201      	add	r2, pc, #4	; (adr r2, 8002114 <HAL_RCC_GetSysClockFreq+0x1c>)
 800210e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002112:	bf00      	nop
 8002114:	08002179 	.word	0x08002179
 8002118:	080023b7 	.word	0x080023b7
 800211c:	080023b7 	.word	0x080023b7
 8002120:	080023b7 	.word	0x080023b7
 8002124:	080023b7 	.word	0x080023b7
 8002128:	080023b7 	.word	0x080023b7
 800212c:	080023b7 	.word	0x080023b7
 8002130:	080023b7 	.word	0x080023b7
 8002134:	0800219f 	.word	0x0800219f
 8002138:	080023b7 	.word	0x080023b7
 800213c:	080023b7 	.word	0x080023b7
 8002140:	080023b7 	.word	0x080023b7
 8002144:	080023b7 	.word	0x080023b7
 8002148:	080023b7 	.word	0x080023b7
 800214c:	080023b7 	.word	0x080023b7
 8002150:	080023b7 	.word	0x080023b7
 8002154:	080021a5 	.word	0x080021a5
 8002158:	080023b7 	.word	0x080023b7
 800215c:	080023b7 	.word	0x080023b7
 8002160:	080023b7 	.word	0x080023b7
 8002164:	080023b7 	.word	0x080023b7
 8002168:	080023b7 	.word	0x080023b7
 800216c:	080023b7 	.word	0x080023b7
 8002170:	080023b7 	.word	0x080023b7
 8002174:	080021ab 	.word	0x080021ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002178:	4b94      	ldr	r3, [pc, #592]	; (80023cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0320 	and.w	r3, r3, #32
 8002180:	2b00      	cmp	r3, #0
 8002182:	d009      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002184:	4b91      	ldr	r3, [pc, #580]	; (80023cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	08db      	lsrs	r3, r3, #3
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	4a90      	ldr	r2, [pc, #576]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
 8002194:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002196:	e111      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002198:	4b8d      	ldr	r3, [pc, #564]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800219a:	61bb      	str	r3, [r7, #24]
      break;
 800219c:	e10e      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800219e:	4b8d      	ldr	r3, [pc, #564]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80021a0:	61bb      	str	r3, [r7, #24]
      break;
 80021a2:	e10b      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80021a4:	4b8c      	ldr	r3, [pc, #560]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80021a6:	61bb      	str	r3, [r7, #24]
      break;
 80021a8:	e108      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021aa:	4b88      	ldr	r3, [pc, #544]	; (80023cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80021b4:	4b85      	ldr	r3, [pc, #532]	; (80023cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80021c0:	4b82      	ldr	r3, [pc, #520]	; (80023cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80021ca:	4b80      	ldr	r3, [pc, #512]	; (80023cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ce:	08db      	lsrs	r3, r3, #3
 80021d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	ee07 3a90 	vmov	s15, r3
 80021de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80e1 	beq.w	80023b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	f000 8083 	beq.w	80022fc <HAL_RCC_GetSysClockFreq+0x204>
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	f200 80a1 	bhi.w	8002340 <HAL_RCC_GetSysClockFreq+0x248>
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0x114>
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d056      	beq.n	80022b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800220a:	e099      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800220c:	4b6f      	ldr	r3, [pc, #444]	; (80023cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0320 	and.w	r3, r3, #32
 8002214:	2b00      	cmp	r3, #0
 8002216:	d02d      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002218:	4b6c      	ldr	r3, [pc, #432]	; (80023cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	08db      	lsrs	r3, r3, #3
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	4a6b      	ldr	r2, [pc, #428]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002224:	fa22 f303 	lsr.w	r3, r2, r3
 8002228:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	ee07 3a90 	vmov	s15, r3
 8002230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	ee07 3a90 	vmov	s15, r3
 800223a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800223e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002242:	4b62      	ldr	r3, [pc, #392]	; (80023cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800224a:	ee07 3a90 	vmov	s15, r3
 800224e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002252:	ed97 6a02 	vldr	s12, [r7, #8]
 8002256:	eddf 5a61 	vldr	s11, [pc, #388]	; 80023dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800225a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800225e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800226a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800226e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002272:	e087      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	ee07 3a90 	vmov	s15, r3
 800227a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800227e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80023e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002286:	4b51      	ldr	r3, [pc, #324]	; (80023cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800228e:	ee07 3a90 	vmov	s15, r3
 8002292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002296:	ed97 6a02 	vldr	s12, [r7, #8]
 800229a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80023dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800229e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022b6:	e065      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	ee07 3a90 	vmov	s15, r3
 80022be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80023e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80022c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022ca:	4b40      	ldr	r3, [pc, #256]	; (80023cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022d2:	ee07 3a90 	vmov	s15, r3
 80022d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022da:	ed97 6a02 	vldr	s12, [r7, #8]
 80022de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80023dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80022e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022fa:	e043      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	ee07 3a90 	vmov	s15, r3
 8002302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002306:	eddf 6a38 	vldr	s13, [pc, #224]	; 80023e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800230a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800230e:	4b2f      	ldr	r3, [pc, #188]	; (80023cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002316:	ee07 3a90 	vmov	s15, r3
 800231a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800231e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002322:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80023dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800232a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800232e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800233e:	e021      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	ee07 3a90 	vmov	s15, r3
 8002346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800234a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80023e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800234e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002352:	4b1e      	ldr	r3, [pc, #120]	; (80023cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800235a:	ee07 3a90 	vmov	s15, r3
 800235e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002362:	ed97 6a02 	vldr	s12, [r7, #8]
 8002366:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80023dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800236a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800236e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800237a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800237e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002382:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	0a5b      	lsrs	r3, r3, #9
 800238a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800238e:	3301      	adds	r3, #1
 8002390:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	ee07 3a90 	vmov	s15, r3
 8002398:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800239c:	edd7 6a07 	vldr	s13, [r7, #28]
 80023a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023a8:	ee17 3a90 	vmov	r3, s15
 80023ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80023ae:	e005      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61bb      	str	r3, [r7, #24]
      break;
 80023b4:	e002      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80023b6:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023b8:	61bb      	str	r3, [r7, #24]
      break;
 80023ba:	bf00      	nop
  }

  return sysclockfreq;
 80023bc:	69bb      	ldr	r3, [r7, #24]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3724      	adds	r7, #36	; 0x24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	58024400 	.word	0x58024400
 80023d0:	03d09000 	.word	0x03d09000
 80023d4:	003d0900 	.word	0x003d0900
 80023d8:	017d7840 	.word	0x017d7840
 80023dc:	46000000 	.word	0x46000000
 80023e0:	4c742400 	.word	0x4c742400
 80023e4:	4a742400 	.word	0x4a742400
 80023e8:	4bbebc20 	.word	0x4bbebc20

080023ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80023f2:	f7ff fe81 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 80023f6:	4602      	mov	r2, r0
 80023f8:	4b10      	ldr	r3, [pc, #64]	; (800243c <HAL_RCC_GetHCLKFreq+0x50>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	490f      	ldr	r1, [pc, #60]	; (8002440 <HAL_RCC_GetHCLKFreq+0x54>)
 8002404:	5ccb      	ldrb	r3, [r1, r3]
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	fa22 f303 	lsr.w	r3, r2, r3
 800240e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002410:	4b0a      	ldr	r3, [pc, #40]	; (800243c <HAL_RCC_GetHCLKFreq+0x50>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	4a09      	ldr	r2, [pc, #36]	; (8002440 <HAL_RCC_GetHCLKFreq+0x54>)
 800241a:	5cd3      	ldrb	r3, [r2, r3]
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	fa22 f303 	lsr.w	r3, r2, r3
 8002426:	4a07      	ldr	r2, [pc, #28]	; (8002444 <HAL_RCC_GetHCLKFreq+0x58>)
 8002428:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800242a:	4a07      	ldr	r2, [pc, #28]	; (8002448 <HAL_RCC_GetHCLKFreq+0x5c>)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <HAL_RCC_GetHCLKFreq+0x58>)
 8002432:	681b      	ldr	r3, [r3, #0]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	58024400 	.word	0x58024400
 8002440:	080063f8 	.word	0x080063f8
 8002444:	24000004 	.word	0x24000004
 8002448:	24000000 	.word	0x24000000

0800244c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002450:	f7ff ffcc 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 8002454:	4602      	mov	r2, r0
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	091b      	lsrs	r3, r3, #4
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	4904      	ldr	r1, [pc, #16]	; (8002474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002462:	5ccb      	ldrb	r3, [r1, r3]
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800246c:	4618      	mov	r0, r3
 800246e:	bd80      	pop	{r7, pc}
 8002470:	58024400 	.word	0x58024400
 8002474:	080063f8 	.word	0x080063f8

08002478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800247c:	f7ff ffb6 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	4904      	ldr	r1, [pc, #16]	; (80024a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002498:	4618      	mov	r0, r3
 800249a:	bd80      	pop	{r7, pc}
 800249c:	58024400 	.word	0x58024400
 80024a0:	080063f8 	.word	0x080063f8

080024a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024a8:	b0cc      	sub	sp, #304	; 0x130
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024b0:	2300      	movs	r3, #0
 80024b2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024b6:	2300      	movs	r3, #0
 80024b8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80024c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80024c8:	2500      	movs	r5, #0
 80024ca:	ea54 0305 	orrs.w	r3, r4, r5
 80024ce:	d049      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80024d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80024d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80024da:	d02f      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80024dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80024e0:	d828      	bhi.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80024e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024e6:	d01a      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80024e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024ec:	d822      	bhi.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80024f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024f6:	d007      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024f8:	e01c      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024fa:	4bb8      	ldr	r3, [pc, #736]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	4ab7      	ldr	r2, [pc, #732]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002504:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002506:	e01a      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002508:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800250c:	3308      	adds	r3, #8
 800250e:	2102      	movs	r1, #2
 8002510:	4618      	mov	r0, r3
 8002512:	f001 fccf 	bl	8003eb4 <RCCEx_PLL2_Config>
 8002516:	4603      	mov	r3, r0
 8002518:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800251c:	e00f      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800251e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002522:	3328      	adds	r3, #40	; 0x28
 8002524:	2102      	movs	r1, #2
 8002526:	4618      	mov	r0, r3
 8002528:	f001 fd76 	bl	8004018 <RCCEx_PLL3_Config>
 800252c:	4603      	mov	r3, r0
 800252e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002532:	e004      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800253a:	e000      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800253c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800253e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10a      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002546:	4ba5      	ldr	r3, [pc, #660]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800254e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002554:	4aa1      	ldr	r2, [pc, #644]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002556:	430b      	orrs	r3, r1
 8002558:	6513      	str	r3, [r2, #80]	; 0x50
 800255a:	e003      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800255c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002560:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002564:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002570:	f04f 0900 	mov.w	r9, #0
 8002574:	ea58 0309 	orrs.w	r3, r8, r9
 8002578:	d047      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800257a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800257e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002580:	2b04      	cmp	r3, #4
 8002582:	d82a      	bhi.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002584:	a201      	add	r2, pc, #4	; (adr r2, 800258c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258a:	bf00      	nop
 800258c:	080025a1 	.word	0x080025a1
 8002590:	080025af 	.word	0x080025af
 8002594:	080025c5 	.word	0x080025c5
 8002598:	080025e3 	.word	0x080025e3
 800259c:	080025e3 	.word	0x080025e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025a0:	4b8e      	ldr	r3, [pc, #568]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	4a8d      	ldr	r2, [pc, #564]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025ac:	e01a      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80025b2:	3308      	adds	r3, #8
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f001 fc7c 	bl	8003eb4 <RCCEx_PLL2_Config>
 80025bc:	4603      	mov	r3, r0
 80025be:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025c2:	e00f      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80025c8:	3328      	adds	r3, #40	; 0x28
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f001 fd23 	bl	8004018 <RCCEx_PLL3_Config>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025d8:	e004      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80025e0:	e000      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80025e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025e4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10a      	bne.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025ec:	4b7b      	ldr	r3, [pc, #492]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f0:	f023 0107 	bic.w	r1, r3, #7
 80025f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80025f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fa:	4a78      	ldr	r2, [pc, #480]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025fc:	430b      	orrs	r3, r1
 80025fe:	6513      	str	r3, [r2, #80]	; 0x50
 8002600:	e003      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002602:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002606:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800260a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002612:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002616:	f04f 0b00 	mov.w	fp, #0
 800261a:	ea5a 030b 	orrs.w	r3, sl, fp
 800261e:	d04c      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002620:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800262a:	d030      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800262c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002630:	d829      	bhi.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002632:	2bc0      	cmp	r3, #192	; 0xc0
 8002634:	d02d      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002636:	2bc0      	cmp	r3, #192	; 0xc0
 8002638:	d825      	bhi.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800263a:	2b80      	cmp	r3, #128	; 0x80
 800263c:	d018      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800263e:	2b80      	cmp	r3, #128	; 0x80
 8002640:	d821      	bhi.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002646:	2b40      	cmp	r3, #64	; 0x40
 8002648:	d007      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800264a:	e01c      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800264c:	4b63      	ldr	r3, [pc, #396]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002650:	4a62      	ldr	r2, [pc, #392]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002656:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002658:	e01c      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800265a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800265e:	3308      	adds	r3, #8
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f001 fc26 	bl	8003eb4 <RCCEx_PLL2_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800266e:	e011      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002670:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002674:	3328      	adds	r3, #40	; 0x28
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f001 fccd 	bl	8004018 <RCCEx_PLL3_Config>
 800267e:	4603      	mov	r3, r0
 8002680:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002684:	e006      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800268c:	e002      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800268e:	bf00      	nop
 8002690:	e000      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002694:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10a      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800269c:	4b4f      	ldr	r3, [pc, #316]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800269e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80026a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026aa:	4a4c      	ldr	r2, [pc, #304]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026ac:	430b      	orrs	r3, r1
 80026ae:	6513      	str	r3, [r2, #80]	; 0x50
 80026b0:	e003      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026b2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80026b6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80026ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80026c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80026d0:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80026d4:	460b      	mov	r3, r1
 80026d6:	4313      	orrs	r3, r2
 80026d8:	d053      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80026da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80026e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026e6:	d035      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80026e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026ec:	d82e      	bhi.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80026ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80026f2:	d031      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80026f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80026f8:	d828      	bhi.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80026fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026fe:	d01a      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002700:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002704:	d822      	bhi.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800270a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800270e:	d007      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002710:	e01c      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002712:	4b32      	ldr	r3, [pc, #200]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	4a31      	ldr	r2, [pc, #196]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800271e:	e01c      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002720:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002724:	3308      	adds	r3, #8
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f001 fbc3 	bl	8003eb4 <RCCEx_PLL2_Config>
 800272e:	4603      	mov	r3, r0
 8002730:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002734:	e011      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002736:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800273a:	3328      	adds	r3, #40	; 0x28
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f001 fc6a 	bl	8004018 <RCCEx_PLL3_Config>
 8002744:	4603      	mov	r3, r0
 8002746:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800274a:	e006      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002752:	e002      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002754:	bf00      	nop
 8002756:	e000      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800275a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10b      	bne.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002762:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002766:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800276a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800276e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002772:	4a1a      	ldr	r2, [pc, #104]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002774:	430b      	orrs	r3, r1
 8002776:	6593      	str	r3, [r2, #88]	; 0x58
 8002778:	e003      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800277a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800277e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002782:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800278e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002792:	2300      	movs	r3, #0
 8002794:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002798:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800279c:	460b      	mov	r3, r1
 800279e:	4313      	orrs	r3, r2
 80027a0:	d056      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80027a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027ae:	d038      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80027b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027b4:	d831      	bhi.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80027b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027ba:	d034      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80027bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027c0:	d82b      	bhi.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80027c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027c6:	d01d      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80027c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027cc:	d825      	bhi.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d006      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80027d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d6:	d00a      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80027d8:	e01f      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80027da:	bf00      	nop
 80027dc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027e0:	4ba2      	ldr	r3, [pc, #648]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	4aa1      	ldr	r2, [pc, #644]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027ec:	e01c      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027f2:	3308      	adds	r3, #8
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f001 fb5c 	bl	8003eb4 <RCCEx_PLL2_Config>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002802:	e011      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002804:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002808:	3328      	adds	r3, #40	; 0x28
 800280a:	2100      	movs	r1, #0
 800280c:	4618      	mov	r0, r3
 800280e:	f001 fc03 	bl	8004018 <RCCEx_PLL3_Config>
 8002812:	4603      	mov	r3, r0
 8002814:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002818:	e006      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002820:	e002      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002822:	bf00      	nop
 8002824:	e000      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002828:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10b      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002830:	4b8e      	ldr	r3, [pc, #568]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002834:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002838:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800283c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002840:	4a8a      	ldr	r2, [pc, #552]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002842:	430b      	orrs	r3, r1
 8002844:	6593      	str	r3, [r2, #88]	; 0x58
 8002846:	e003      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002848:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800284c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002850:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002858:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800285c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002860:	2300      	movs	r3, #0
 8002862:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002866:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800286a:	460b      	mov	r3, r1
 800286c:	4313      	orrs	r3, r2
 800286e:	d03a      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002870:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002876:	2b30      	cmp	r3, #48	; 0x30
 8002878:	d01f      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x416>
 800287a:	2b30      	cmp	r3, #48	; 0x30
 800287c:	d819      	bhi.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800287e:	2b20      	cmp	r3, #32
 8002880:	d00c      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002882:	2b20      	cmp	r3, #32
 8002884:	d815      	bhi.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002886:	2b00      	cmp	r3, #0
 8002888:	d019      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800288a:	2b10      	cmp	r3, #16
 800288c:	d111      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800288e:	4b77      	ldr	r3, [pc, #476]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	4a76      	ldr	r2, [pc, #472]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002898:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800289a:	e011      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800289c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028a0:	3308      	adds	r3, #8
 80028a2:	2102      	movs	r1, #2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f001 fb05 	bl	8003eb4 <RCCEx_PLL2_Config>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80028b0:	e006      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80028b8:	e002      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80028ba:	bf00      	nop
 80028bc:	e000      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80028be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028c0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80028c8:	4b68      	ldr	r3, [pc, #416]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028cc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80028d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d6:	4a65      	ldr	r2, [pc, #404]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028d8:	430b      	orrs	r3, r1
 80028da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028dc:	e003      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028de:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80028e2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80028e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ee:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80028f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80028f6:	2300      	movs	r3, #0
 80028f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80028fc:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002900:	460b      	mov	r3, r1
 8002902:	4313      	orrs	r3, r2
 8002904:	d051      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002906:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800290a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800290c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002910:	d035      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002916:	d82e      	bhi.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002918:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800291c:	d031      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800291e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002922:	d828      	bhi.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002928:	d01a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800292a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800292e:	d822      	bhi.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002938:	d007      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800293a:	e01c      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800293c:	4b4b      	ldr	r3, [pc, #300]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	4a4a      	ldr	r2, [pc, #296]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002946:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002948:	e01c      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800294a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800294e:	3308      	adds	r3, #8
 8002950:	2100      	movs	r1, #0
 8002952:	4618      	mov	r0, r3
 8002954:	f001 faae 	bl	8003eb4 <RCCEx_PLL2_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800295e:	e011      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002960:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002964:	3328      	adds	r3, #40	; 0x28
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f001 fb55 	bl	8004018 <RCCEx_PLL3_Config>
 800296e:	4603      	mov	r3, r0
 8002970:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002974:	e006      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800297c:	e002      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800297e:	bf00      	nop
 8002980:	e000      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002982:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002984:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10a      	bne.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800298c:	4b37      	ldr	r3, [pc, #220]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800298e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002990:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002994:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800299a:	4a34      	ldr	r2, [pc, #208]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800299c:	430b      	orrs	r3, r1
 800299e:	6513      	str	r3, [r2, #80]	; 0x50
 80029a0:	e003      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80029a6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80029aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80029b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80029ba:	2300      	movs	r3, #0
 80029bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80029c0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4313      	orrs	r3, r2
 80029c8:	d056      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80029ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d4:	d033      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80029d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029da:	d82c      	bhi.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80029dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029e0:	d02f      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80029e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029e6:	d826      	bhi.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80029e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029ec:	d02b      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80029ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029f2:	d820      	bhi.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80029f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029f8:	d012      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80029fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029fe:	d81a      	bhi.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d022      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a08:	d115      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a0e:	3308      	adds	r3, #8
 8002a10:	2101      	movs	r1, #1
 8002a12:	4618      	mov	r0, r3
 8002a14:	f001 fa4e 	bl	8003eb4 <RCCEx_PLL2_Config>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002a1e:	e015      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a24:	3328      	adds	r3, #40	; 0x28
 8002a26:	2101      	movs	r1, #1
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f001 faf5 	bl	8004018 <RCCEx_PLL3_Config>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002a34:	e00a      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002a3c:	e006      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a3e:	bf00      	nop
 8002a40:	e004      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a42:	bf00      	nop
 8002a44:	e002      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a46:	bf00      	nop
 8002a48:	e000      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a4c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10d      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002a54:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a58:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002a5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a62:	4a02      	ldr	r2, [pc, #8]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a64:	430b      	orrs	r3, r1
 8002a66:	6513      	str	r3, [r2, #80]	; 0x50
 8002a68:	e006      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002a6a:	bf00      	nop
 8002a6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a70:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002a74:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002a78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a80:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002a84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002a8e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002a92:	460b      	mov	r3, r1
 8002a94:	4313      	orrs	r3, r2
 8002a96:	d055      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002a98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa4:	d033      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aaa:	d82c      	bhi.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab0:	d02f      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab6:	d826      	bhi.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ab8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002abc:	d02b      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002abe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ac2:	d820      	bhi.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ac8:	d012      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002aca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ace:	d81a      	bhi.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d022      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002ad4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ad8:	d115      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ada:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ade:	3308      	adds	r3, #8
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f001 f9e6 	bl	8003eb4 <RCCEx_PLL2_Config>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002aee:	e015      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002af0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002af4:	3328      	adds	r3, #40	; 0x28
 8002af6:	2101      	movs	r1, #1
 8002af8:	4618      	mov	r0, r3
 8002afa:	f001 fa8d 	bl	8004018 <RCCEx_PLL3_Config>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b04:	e00a      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002b0c:	e006      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b0e:	bf00      	nop
 8002b10:	e004      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b12:	bf00      	nop
 8002b14:	e002      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b16:	bf00      	nop
 8002b18:	e000      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b1c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10b      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b24:	4bb6      	ldr	r3, [pc, #728]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b28:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002b2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b34:	4ab2      	ldr	r2, [pc, #712]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b36:	430b      	orrs	r3, r1
 8002b38:	6593      	str	r3, [r2, #88]	; 0x58
 8002b3a:	e003      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b3c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002b40:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002b44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8002b50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b54:	2300      	movs	r3, #0
 8002b56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b5a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4313      	orrs	r3, r2
 8002b62:	d02a      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8002b64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d011      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b72:	d10a      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b78:	3308      	adds	r3, #8
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f001 f999 	bl	8003eb4 <RCCEx_PLL2_Config>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8002b88:	e004      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002b90:	e000      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8002b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b94:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002b9c:	4b98      	ldr	r3, [pc, #608]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8002ba4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002baa:	4a95      	ldr	r2, [pc, #596]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bac:	430b      	orrs	r3, r1
 8002bae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bb0:	e003      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002bb6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002bc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002bd0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	d037      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002bda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002be4:	d00e      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8002be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bea:	d816      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x776>
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d018      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002bf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bf4:	d111      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bf6:	4b82      	ldr	r3, [pc, #520]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfa:	4a81      	ldr	r2, [pc, #516]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c02:	e00f      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c08:	3308      	adds	r3, #8
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f001 f951 	bl	8003eb4 <RCCEx_PLL2_Config>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c18:	e004      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002c20:	e000      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8002c22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c24:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10a      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c2c:	4b74      	ldr	r3, [pc, #464]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c30:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002c34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3a:	4a71      	ldr	r2, [pc, #452]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	6513      	str	r3, [r2, #80]	; 0x50
 8002c40:	e003      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c42:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c46:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002c4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002c56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002c60:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4313      	orrs	r3, r2
 8002c68:	d03a      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002c6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d81d      	bhi.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8002c74:	a201      	add	r2, pc, #4	; (adr r2, 8002c7c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7a:	bf00      	nop
 8002c7c:	08002cb9 	.word	0x08002cb9
 8002c80:	08002c8d 	.word	0x08002c8d
 8002c84:	08002c9b 	.word	0x08002c9b
 8002c88:	08002cb9 	.word	0x08002cb9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c8c:	4b5c      	ldr	r3, [pc, #368]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	4a5b      	ldr	r2, [pc, #364]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002c98:	e00f      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c9e:	3308      	adds	r3, #8
 8002ca0:	2102      	movs	r1, #2
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f001 f906 	bl	8003eb4 <RCCEx_PLL2_Config>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002cae:	e004      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002cb6:	e000      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8002cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10a      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002cc2:	4b4f      	ldr	r3, [pc, #316]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc6:	f023 0103 	bic.w	r1, r3, #3
 8002cca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd0:	4a4b      	ldr	r2, [pc, #300]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cd2:	430b      	orrs	r3, r1
 8002cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cd6:	e003      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002cdc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ce0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002cec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002cf6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f000 80a0 	beq.w	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d02:	4b40      	ldr	r3, [pc, #256]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a3f      	ldr	r2, [pc, #252]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d0e:	f7fe f88b 	bl	8000e28 <HAL_GetTick>
 8002d12:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d16:	e00b      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d18:	f7fe f886 	bl	8000e28 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b64      	cmp	r3, #100	; 0x64
 8002d26:	d903      	bls.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002d2e:	e005      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d30:	4b34      	ldr	r3, [pc, #208]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0ed      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8002d3c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d17a      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002d44:	4b2e      	ldr	r3, [pc, #184]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002d50:	4053      	eors	r3, r2
 8002d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d015      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d5a:	4b29      	ldr	r3, [pc, #164]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d62:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d66:	4b26      	ldr	r3, [pc, #152]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6a:	4a25      	ldr	r2, [pc, #148]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d70:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d72:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d76:	4a22      	ldr	r2, [pc, #136]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002d7e:	4a20      	ldr	r2, [pc, #128]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d80:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002d84:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002d86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d8a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d92:	d118      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fe f848 	bl	8000e28 <HAL_GetTick>
 8002d98:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d9c:	e00d      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9e:	f7fe f843 	bl	8000e28 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002da8:	1ad2      	subs	r2, r2, r3
 8002daa:	f241 3388 	movw	r3, #5000	; 0x1388
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d903      	bls.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8002db8:	e005      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dba:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0eb      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8002dc6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d130      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dd2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dde:	d115      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8002de0:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002de8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002df0:	091a      	lsrs	r2, r3, #4
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	4a02      	ldr	r2, [pc, #8]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	6113      	str	r3, [r2, #16]
 8002dfc:	e00c      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8002dfe:	bf00      	nop
 8002e00:	58024400 	.word	0x58024400
 8002e04:	58024800 	.word	0x58024800
 8002e08:	00ffffcf 	.word	0x00ffffcf
 8002e0c:	4bd4      	ldr	r3, [pc, #848]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	4ad3      	ldr	r2, [pc, #844]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e16:	6113      	str	r3, [r2, #16]
 8002e18:	4bd1      	ldr	r3, [pc, #836]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e1a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002e1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e28:	4acd      	ldr	r2, [pc, #820]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e2a:	430b      	orrs	r3, r1
 8002e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2e:	e008      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e30:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002e34:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8002e38:	e003      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e3a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002e3e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4a:	f002 0301 	and.w	r3, r2, #1
 8002e4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e52:	2300      	movs	r3, #0
 8002e54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f000 808b 	beq.w	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002e64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e6c:	2b28      	cmp	r3, #40	; 0x28
 8002e6e:	d86b      	bhi.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002e70:	a201      	add	r2, pc, #4	; (adr r2, 8002e78 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8002e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e76:	bf00      	nop
 8002e78:	08002f51 	.word	0x08002f51
 8002e7c:	08002f49 	.word	0x08002f49
 8002e80:	08002f49 	.word	0x08002f49
 8002e84:	08002f49 	.word	0x08002f49
 8002e88:	08002f49 	.word	0x08002f49
 8002e8c:	08002f49 	.word	0x08002f49
 8002e90:	08002f49 	.word	0x08002f49
 8002e94:	08002f49 	.word	0x08002f49
 8002e98:	08002f1d 	.word	0x08002f1d
 8002e9c:	08002f49 	.word	0x08002f49
 8002ea0:	08002f49 	.word	0x08002f49
 8002ea4:	08002f49 	.word	0x08002f49
 8002ea8:	08002f49 	.word	0x08002f49
 8002eac:	08002f49 	.word	0x08002f49
 8002eb0:	08002f49 	.word	0x08002f49
 8002eb4:	08002f49 	.word	0x08002f49
 8002eb8:	08002f33 	.word	0x08002f33
 8002ebc:	08002f49 	.word	0x08002f49
 8002ec0:	08002f49 	.word	0x08002f49
 8002ec4:	08002f49 	.word	0x08002f49
 8002ec8:	08002f49 	.word	0x08002f49
 8002ecc:	08002f49 	.word	0x08002f49
 8002ed0:	08002f49 	.word	0x08002f49
 8002ed4:	08002f49 	.word	0x08002f49
 8002ed8:	08002f51 	.word	0x08002f51
 8002edc:	08002f49 	.word	0x08002f49
 8002ee0:	08002f49 	.word	0x08002f49
 8002ee4:	08002f49 	.word	0x08002f49
 8002ee8:	08002f49 	.word	0x08002f49
 8002eec:	08002f49 	.word	0x08002f49
 8002ef0:	08002f49 	.word	0x08002f49
 8002ef4:	08002f49 	.word	0x08002f49
 8002ef8:	08002f51 	.word	0x08002f51
 8002efc:	08002f49 	.word	0x08002f49
 8002f00:	08002f49 	.word	0x08002f49
 8002f04:	08002f49 	.word	0x08002f49
 8002f08:	08002f49 	.word	0x08002f49
 8002f0c:	08002f49 	.word	0x08002f49
 8002f10:	08002f49 	.word	0x08002f49
 8002f14:	08002f49 	.word	0x08002f49
 8002f18:	08002f51 	.word	0x08002f51
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f20:	3308      	adds	r3, #8
 8002f22:	2101      	movs	r1, #1
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 ffc5 	bl	8003eb4 <RCCEx_PLL2_Config>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f30:	e00f      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f36:	3328      	adds	r3, #40	; 0x28
 8002f38:	2101      	movs	r1, #1
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f001 f86c 	bl	8004018 <RCCEx_PLL3_Config>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f46:	e004      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002f4e:	e000      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8002f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f52:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10b      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002f5a:	4b81      	ldr	r3, [pc, #516]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002f62:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f6a:	4a7d      	ldr	r2, [pc, #500]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f6c:	430b      	orrs	r3, r1
 8002f6e:	6553      	str	r3, [r2, #84]	; 0x54
 8002f70:	e003      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f72:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f76:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002f7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f82:	f002 0302 	and.w	r3, r2, #2
 8002f86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002f90:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002f94:	460b      	mov	r3, r1
 8002f96:	4313      	orrs	r3, r2
 8002f98:	d042      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002f9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fa0:	2b05      	cmp	r3, #5
 8002fa2:	d825      	bhi.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8002fa4:	a201      	add	r2, pc, #4	; (adr r2, 8002fac <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8002fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002faa:	bf00      	nop
 8002fac:	08002ff9 	.word	0x08002ff9
 8002fb0:	08002fc5 	.word	0x08002fc5
 8002fb4:	08002fdb 	.word	0x08002fdb
 8002fb8:	08002ff9 	.word	0x08002ff9
 8002fbc:	08002ff9 	.word	0x08002ff9
 8002fc0:	08002ff9 	.word	0x08002ff9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fc8:	3308      	adds	r3, #8
 8002fca:	2101      	movs	r1, #1
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 ff71 	bl	8003eb4 <RCCEx_PLL2_Config>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002fd8:	e00f      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fde:	3328      	adds	r3, #40	; 0x28
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f001 f818 	bl	8004018 <RCCEx_PLL3_Config>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002fee:	e004      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002ff6:	e000      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8002ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ffa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10a      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003002:	4b57      	ldr	r3, [pc, #348]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003006:	f023 0107 	bic.w	r1, r3, #7
 800300a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800300e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003010:	4a53      	ldr	r2, [pc, #332]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003012:	430b      	orrs	r3, r1
 8003014:	6553      	str	r3, [r2, #84]	; 0x54
 8003016:	e003      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003018:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800301c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003020:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	f002 0304 	and.w	r3, r2, #4
 800302c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003030:	2300      	movs	r3, #0
 8003032:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003036:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800303a:	460b      	mov	r3, r1
 800303c:	4313      	orrs	r3, r2
 800303e:	d044      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003040:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003044:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003048:	2b05      	cmp	r3, #5
 800304a:	d825      	bhi.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 800304c:	a201      	add	r2, pc, #4	; (adr r2, 8003054 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 800304e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003052:	bf00      	nop
 8003054:	080030a1 	.word	0x080030a1
 8003058:	0800306d 	.word	0x0800306d
 800305c:	08003083 	.word	0x08003083
 8003060:	080030a1 	.word	0x080030a1
 8003064:	080030a1 	.word	0x080030a1
 8003068:	080030a1 	.word	0x080030a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800306c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003070:	3308      	adds	r3, #8
 8003072:	2101      	movs	r1, #1
 8003074:	4618      	mov	r0, r3
 8003076:	f000 ff1d 	bl	8003eb4 <RCCEx_PLL2_Config>
 800307a:	4603      	mov	r3, r0
 800307c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003080:	e00f      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003082:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003086:	3328      	adds	r3, #40	; 0x28
 8003088:	2101      	movs	r1, #1
 800308a:	4618      	mov	r0, r3
 800308c:	f000 ffc4 	bl	8004018 <RCCEx_PLL3_Config>
 8003090:	4603      	mov	r3, r0
 8003092:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003096:	e004      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800309e:	e000      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 80030a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10b      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030aa:	4b2d      	ldr	r3, [pc, #180]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80030ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ae:	f023 0107 	bic.w	r1, r3, #7
 80030b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030ba:	4a29      	ldr	r2, [pc, #164]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80030bc:	430b      	orrs	r3, r1
 80030be:	6593      	str	r3, [r2, #88]	; 0x58
 80030c0:	e003      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80030c6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d2:	f002 0320 	and.w	r3, r2, #32
 80030d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030da:	2300      	movs	r3, #0
 80030dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030e4:	460b      	mov	r3, r1
 80030e6:	4313      	orrs	r3, r2
 80030e8:	d057      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80030ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030f6:	d035      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 80030f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030fc:	d82c      	bhi.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80030fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003102:	d031      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8003104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003108:	d826      	bhi.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800310a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800310e:	d02d      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8003110:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003114:	d820      	bhi.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800311a:	d012      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 800311c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003120:	d81a      	bhi.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d024      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8003126:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800312a:	d115      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800312c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003130:	3308      	adds	r3, #8
 8003132:	2100      	movs	r1, #0
 8003134:	4618      	mov	r0, r3
 8003136:	f000 febd 	bl	8003eb4 <RCCEx_PLL2_Config>
 800313a:	4603      	mov	r3, r0
 800313c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003140:	e017      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003142:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003146:	3328      	adds	r3, #40	; 0x28
 8003148:	2102      	movs	r1, #2
 800314a:	4618      	mov	r0, r3
 800314c:	f000 ff64 	bl	8004018 <RCCEx_PLL3_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003156:	e00c      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800315e:	e008      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8003160:	58024400 	.word	0x58024400
        break;
 8003164:	bf00      	nop
 8003166:	e004      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003168:	bf00      	nop
 800316a:	e002      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800316c:	bf00      	nop
 800316e:	e000      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003172:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10b      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800317a:	4bc2      	ldr	r3, [pc, #776]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800317c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003182:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800318a:	4abe      	ldr	r2, [pc, #760]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800318c:	430b      	orrs	r3, r1
 800318e:	6553      	str	r3, [r2, #84]	; 0x54
 8003190:	e003      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003192:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003196:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800319a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800319e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80031a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031aa:	2300      	movs	r3, #0
 80031ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80031b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4313      	orrs	r3, r2
 80031b8:	d055      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80031ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80031c6:	d033      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80031c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80031cc:	d82c      	bhi.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80031ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d2:	d02f      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 80031d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d8:	d826      	bhi.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80031da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031de:	d02b      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80031e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031e4:	d820      	bhi.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80031e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ea:	d012      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80031ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f0:	d81a      	bhi.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d022      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xd98>
 80031f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fa:	d115      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003200:	3308      	adds	r3, #8
 8003202:	2100      	movs	r1, #0
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fe55 	bl	8003eb4 <RCCEx_PLL2_Config>
 800320a:	4603      	mov	r3, r0
 800320c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003210:	e015      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003212:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003216:	3328      	adds	r3, #40	; 0x28
 8003218:	2102      	movs	r1, #2
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fefc 	bl	8004018 <RCCEx_PLL3_Config>
 8003220:	4603      	mov	r3, r0
 8003222:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003226:	e00a      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800322e:	e006      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003230:	bf00      	nop
 8003232:	e004      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003234:	bf00      	nop
 8003236:	e002      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003238:	bf00      	nop
 800323a:	e000      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800323c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800323e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10b      	bne.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003246:	4b8f      	ldr	r3, [pc, #572]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800324e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003252:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003256:	4a8b      	ldr	r2, [pc, #556]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003258:	430b      	orrs	r3, r1
 800325a:	6593      	str	r3, [r2, #88]	; 0x58
 800325c:	e003      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003262:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003266:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800326a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326e:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003272:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003276:	2300      	movs	r3, #0
 8003278:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800327c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003280:	460b      	mov	r3, r1
 8003282:	4313      	orrs	r3, r2
 8003284:	d055      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003286:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800328a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800328e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003292:	d033      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003294:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003298:	d82c      	bhi.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800329a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800329e:	d02f      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80032a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032a4:	d826      	bhi.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80032a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80032aa:	d02b      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80032ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80032b0:	d820      	bhi.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80032b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032b6:	d012      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80032b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032bc:	d81a      	bhi.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d022      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80032c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c6:	d115      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032cc:	3308      	adds	r3, #8
 80032ce:	2100      	movs	r1, #0
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fdef 	bl	8003eb4 <RCCEx_PLL2_Config>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80032dc:	e015      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032e2:	3328      	adds	r3, #40	; 0x28
 80032e4:	2102      	movs	r1, #2
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fe96 	bl	8004018 <RCCEx_PLL3_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80032f2:	e00a      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80032fa:	e006      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80032fc:	bf00      	nop
 80032fe:	e004      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003300:	bf00      	nop
 8003302:	e002      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003304:	bf00      	nop
 8003306:	e000      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800330a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10b      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003312:	4b5c      	ldr	r3, [pc, #368]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003316:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800331a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800331e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003322:	4a58      	ldr	r2, [pc, #352]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003324:	430b      	orrs	r3, r1
 8003326:	6593      	str	r3, [r2, #88]	; 0x58
 8003328:	e003      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800332a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800332e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003332:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333a:	f002 0308 	and.w	r3, r2, #8
 800333e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003342:	2300      	movs	r3, #0
 8003344:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003348:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800334c:	460b      	mov	r3, r1
 800334e:	4313      	orrs	r3, r2
 8003350:	d01e      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003352:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335e:	d10c      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003360:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003364:	3328      	adds	r3, #40	; 0x28
 8003366:	2102      	movs	r1, #2
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fe55 	bl	8004018 <RCCEx_PLL3_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800337a:	4b42      	ldr	r3, [pc, #264]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800337c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003382:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	4a3e      	ldr	r2, [pc, #248]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800338c:	430b      	orrs	r3, r1
 800338e:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003390:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003398:	f002 0310 	and.w	r3, r2, #16
 800339c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033a0:	2300      	movs	r3, #0
 80033a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80033a6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80033aa:	460b      	mov	r3, r1
 80033ac:	4313      	orrs	r3, r2
 80033ae:	d01e      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80033b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033c2:	3328      	adds	r3, #40	; 0x28
 80033c4:	2102      	movs	r1, #2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fe26 	bl	8004018 <RCCEx_PLL3_Config>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033d8:	4b2a      	ldr	r3, [pc, #168]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033dc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033e8:	4a26      	ldr	r2, [pc, #152]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033ea:	430b      	orrs	r3, r1
 80033ec:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f6:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80033fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033fe:	2300      	movs	r3, #0
 8003400:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003404:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003408:	460b      	mov	r3, r1
 800340a:	4313      	orrs	r3, r2
 800340c:	d040      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800340e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003412:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003416:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800341a:	d022      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 800341c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003420:	d81b      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8003426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342a:	d00b      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 800342c:	e015      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800342e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003432:	3308      	adds	r3, #8
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fd3c 	bl	8003eb4 <RCCEx_PLL2_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003442:	e00f      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003444:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003448:	3328      	adds	r3, #40	; 0x28
 800344a:	2102      	movs	r1, #2
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fde3 	bl	8004018 <RCCEx_PLL3_Config>
 8003452:	4603      	mov	r3, r0
 8003454:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003458:	e004      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003460:	e000      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8003462:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003464:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10d      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800346e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003470:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003474:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003478:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800347c:	4a01      	ldr	r2, [pc, #4]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800347e:	430b      	orrs	r3, r1
 8003480:	6593      	str	r3, [r2, #88]	; 0x58
 8003482:	e005      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003484:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003488:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800348c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003490:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003498:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800349c:	67bb      	str	r3, [r7, #120]	; 0x78
 800349e:	2300      	movs	r3, #0
 80034a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80034a2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80034a6:	460b      	mov	r3, r1
 80034a8:	4313      	orrs	r3, r2
 80034aa:	d03b      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80034ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034b8:	d01f      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80034ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034be:	d818      	bhi.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80034c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034c4:	d003      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80034c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ca:	d007      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80034cc:	e011      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ce:	4b64      	ldr	r3, [pc, #400]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	4a63      	ldr	r2, [pc, #396]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80034d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80034da:	e00f      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034e0:	3328      	adds	r3, #40	; 0x28
 80034e2:	2101      	movs	r1, #1
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fd97 	bl	8004018 <RCCEx_PLL3_Config>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 80034f0:	e004      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80034f8:	e000      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80034fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034fc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10b      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003504:	4b56      	ldr	r3, [pc, #344]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003508:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800350c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003514:	4a52      	ldr	r2, [pc, #328]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003516:	430b      	orrs	r3, r1
 8003518:	6553      	str	r3, [r2, #84]	; 0x54
 800351a:	e003      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003520:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003524:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003530:	673b      	str	r3, [r7, #112]	; 0x70
 8003532:	2300      	movs	r3, #0
 8003534:	677b      	str	r3, [r7, #116]	; 0x74
 8003536:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800353a:	460b      	mov	r3, r1
 800353c:	4313      	orrs	r3, r2
 800353e:	d031      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003540:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800354a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354e:	d007      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003550:	e011      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003552:	4b43      	ldr	r3, [pc, #268]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	4a42      	ldr	r2, [pc, #264]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800355e:	e00e      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003560:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003564:	3308      	adds	r3, #8
 8003566:	2102      	movs	r1, #2
 8003568:	4618      	mov	r0, r3
 800356a:	f000 fca3 	bl	8003eb4 <RCCEx_PLL2_Config>
 800356e:	4603      	mov	r3, r0
 8003570:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003574:	e003      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800357c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800357e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10a      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003586:	4b36      	ldr	r3, [pc, #216]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800358e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003594:	4a32      	ldr	r2, [pc, #200]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003596:	430b      	orrs	r3, r1
 8003598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800359a:	e003      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80035a0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ac:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80035b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80035b2:	2300      	movs	r3, #0
 80035b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035b6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80035ba:	460b      	mov	r3, r1
 80035bc:	4313      	orrs	r3, r2
 80035be:	d00c      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80035c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035c4:	3328      	adds	r3, #40	; 0x28
 80035c6:	2102      	movs	r1, #2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fd25 	bl	8004018 <RCCEx_PLL3_Config>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80035da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80035e6:	663b      	str	r3, [r7, #96]	; 0x60
 80035e8:	2300      	movs	r3, #0
 80035ea:	667b      	str	r3, [r7, #100]	; 0x64
 80035ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80035f0:	460b      	mov	r3, r1
 80035f2:	4313      	orrs	r3, r2
 80035f4:	d03a      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80035f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003602:	d018      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003608:	d811      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800360a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800360e:	d014      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003614:	d80b      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d011      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800361a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800361e:	d106      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003620:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	4a0e      	ldr	r2, [pc, #56]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800362a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800362c:	e008      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003634:	e004      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003636:	bf00      	nop
 8003638:	e002      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800363a:	bf00      	nop
 800363c:	e000      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800363e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003640:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10d      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800364a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003650:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003658:	4a01      	ldr	r2, [pc, #4]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800365a:	430b      	orrs	r3, r1
 800365c:	6553      	str	r3, [r2, #84]	; 0x54
 800365e:	e005      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8003660:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003664:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003668:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800366c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003678:	65bb      	str	r3, [r7, #88]	; 0x58
 800367a:	2300      	movs	r3, #0
 800367c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800367e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003682:	460b      	mov	r3, r1
 8003684:	4313      	orrs	r3, r2
 8003686:	d009      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003688:	4baa      	ldr	r3, [pc, #680]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800368a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800368c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003690:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003696:	4aa7      	ldr	r2, [pc, #668]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003698:	430b      	orrs	r3, r1
 800369a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800369c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80036a8:	653b      	str	r3, [r7, #80]	; 0x50
 80036aa:	2300      	movs	r3, #0
 80036ac:	657b      	str	r3, [r7, #84]	; 0x54
 80036ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80036b2:	460b      	mov	r3, r1
 80036b4:	4313      	orrs	r3, r2
 80036b6:	d00a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80036b8:	4b9e      	ldr	r3, [pc, #632]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80036c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80036c8:	4a9a      	ldr	r2, [pc, #616]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036ca:	430b      	orrs	r3, r1
 80036cc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80036da:	64bb      	str	r3, [r7, #72]	; 0x48
 80036dc:	2300      	movs	r3, #0
 80036de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036e0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80036e4:	460b      	mov	r3, r1
 80036e6:	4313      	orrs	r3, r2
 80036e8:	d009      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036ea:	4b92      	ldr	r3, [pc, #584]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ee:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80036f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f8:	4a8e      	ldr	r2, [pc, #568]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036fa:	430b      	orrs	r3, r1
 80036fc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80036fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003706:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800370a:	643b      	str	r3, [r7, #64]	; 0x40
 800370c:	2300      	movs	r3, #0
 800370e:	647b      	str	r3, [r7, #68]	; 0x44
 8003710:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003714:	460b      	mov	r3, r1
 8003716:	4313      	orrs	r3, r2
 8003718:	d00e      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800371a:	4b86      	ldr	r3, [pc, #536]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	4a85      	ldr	r2, [pc, #532]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003720:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003724:	6113      	str	r3, [r2, #16]
 8003726:	4b83      	ldr	r3, [pc, #524]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003728:	6919      	ldr	r1, [r3, #16]
 800372a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800372e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003732:	4a80      	ldr	r2, [pc, #512]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003734:	430b      	orrs	r3, r1
 8003736:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003738:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003744:	63bb      	str	r3, [r7, #56]	; 0x38
 8003746:	2300      	movs	r3, #0
 8003748:	63fb      	str	r3, [r7, #60]	; 0x3c
 800374a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800374e:	460b      	mov	r3, r1
 8003750:	4313      	orrs	r3, r2
 8003752:	d009      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003754:	4b77      	ldr	r3, [pc, #476]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003758:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800375c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003762:	4a74      	ldr	r2, [pc, #464]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003764:	430b      	orrs	r3, r1
 8003766:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003768:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003770:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003774:	633b      	str	r3, [r7, #48]	; 0x30
 8003776:	2300      	movs	r3, #0
 8003778:	637b      	str	r3, [r7, #52]	; 0x34
 800377a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800377e:	460b      	mov	r3, r1
 8003780:	4313      	orrs	r3, r2
 8003782:	d00a      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003784:	4b6b      	ldr	r3, [pc, #428]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003788:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800378c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003794:	4a67      	ldr	r2, [pc, #412]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003796:	430b      	orrs	r3, r1
 8003798:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800379a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800379e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a2:	2100      	movs	r1, #0
 80037a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80037b0:	460b      	mov	r3, r1
 80037b2:	4313      	orrs	r3, r2
 80037b4:	d011      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037ba:	3308      	adds	r3, #8
 80037bc:	2100      	movs	r1, #0
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fb78 	bl	8003eb4 <RCCEx_PLL2_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80037ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037d6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80037da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e2:	2100      	movs	r1, #0
 80037e4:	6239      	str	r1, [r7, #32]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
 80037ec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80037f0:	460b      	mov	r3, r1
 80037f2:	4313      	orrs	r3, r2
 80037f4:	d011      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037fa:	3308      	adds	r3, #8
 80037fc:	2101      	movs	r1, #1
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fb58 	bl	8003eb4 <RCCEx_PLL2_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800380a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003812:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003816:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800381a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800381e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003822:	2100      	movs	r1, #0
 8003824:	61b9      	str	r1, [r7, #24]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	61fb      	str	r3, [r7, #28]
 800382c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003830:	460b      	mov	r3, r1
 8003832:	4313      	orrs	r3, r2
 8003834:	d011      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003836:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800383a:	3308      	adds	r3, #8
 800383c:	2102      	movs	r1, #2
 800383e:	4618      	mov	r0, r3
 8003840:	f000 fb38 	bl	8003eb4 <RCCEx_PLL2_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800384a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003852:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003856:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800385a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800385e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003862:	2100      	movs	r1, #0
 8003864:	6139      	str	r1, [r7, #16]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003870:	460b      	mov	r3, r1
 8003872:	4313      	orrs	r3, r2
 8003874:	d011      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003876:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800387a:	3328      	adds	r3, #40	; 0x28
 800387c:	2100      	movs	r1, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fbca 	bl	8004018 <RCCEx_PLL3_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 800388a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003892:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003896:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800389a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a2:	2100      	movs	r1, #0
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80038b0:	460b      	mov	r3, r1
 80038b2:	4313      	orrs	r3, r2
 80038b4:	d011      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038ba:	3328      	adds	r3, #40	; 0x28
 80038bc:	2101      	movs	r1, #1
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fbaa 	bl	8004018 <RCCEx_PLL3_Config>
 80038c4:	4603      	mov	r3, r0
 80038c6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80038ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80038d6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80038da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e2:	2100      	movs	r1, #0
 80038e4:	6039      	str	r1, [r7, #0]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	607b      	str	r3, [r7, #4]
 80038ec:	e9d7 1200 	ldrd	r1, r2, [r7]
 80038f0:	460b      	mov	r3, r1
 80038f2:	4313      	orrs	r3, r2
 80038f4:	d011      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038fa:	3328      	adds	r3, #40	; 0x28
 80038fc:	2102      	movs	r1, #2
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 fb8a 	bl	8004018 <RCCEx_PLL3_Config>
 8003904:	4603      	mov	r3, r0
 8003906:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800390a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003912:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003916:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 800391a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	e000      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
}
 8003928:	4618      	mov	r0, r3
 800392a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800392e:	46bd      	mov	sp, r7
 8003930:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003934:	58024400 	.word	0x58024400

08003938 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800393c:	f7fe fd56 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 8003940:	4602      	mov	r2, r0
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	091b      	lsrs	r3, r3, #4
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4904      	ldr	r1, [pc, #16]	; (8003960 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800394e:	5ccb      	ldrb	r3, [r1, r3]
 8003950:	f003 031f 	and.w	r3, r3, #31
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003958:	4618      	mov	r0, r3
 800395a:	bd80      	pop	{r7, pc}
 800395c:	58024400 	.word	0x58024400
 8003960:	080063f8 	.word	0x080063f8

08003964 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003964:	b480      	push	{r7}
 8003966:	b089      	sub	sp, #36	; 0x24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800396c:	4ba1      	ldr	r3, [pc, #644]	; (8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003976:	4b9f      	ldr	r3, [pc, #636]	; (8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397a:	0b1b      	lsrs	r3, r3, #12
 800397c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003980:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003982:	4b9c      	ldr	r3, [pc, #624]	; (8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003986:	091b      	lsrs	r3, r3, #4
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800398e:	4b99      	ldr	r3, [pc, #612]	; (8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003992:	08db      	lsrs	r3, r3, #3
 8003994:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	fb02 f303 	mul.w	r3, r2, r3
 800399e:	ee07 3a90 	vmov	s15, r3
 80039a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 8111 	beq.w	8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	f000 8083 	beq.w	8003ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	2b02      	cmp	r3, #2
 80039be:	f200 80a1 	bhi.w	8003b04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d056      	beq.n	8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80039ce:	e099      	b.n	8003b04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039d0:	4b88      	ldr	r3, [pc, #544]	; (8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d02d      	beq.n	8003a38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039dc:	4b85      	ldr	r3, [pc, #532]	; (8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	08db      	lsrs	r3, r3, #3
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	4a84      	ldr	r2, [pc, #528]	; (8003bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
 80039ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	ee07 3a90 	vmov	s15, r3
 80039f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	ee07 3a90 	vmov	s15, r3
 80039fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a06:	4b7b      	ldr	r3, [pc, #492]	; (8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a0e:	ee07 3a90 	vmov	s15, r3
 8003a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003bfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003a36:	e087      	b.n	8003b48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003c00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a4a:	4b6a      	ldr	r3, [pc, #424]	; (8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003bfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a7a:	e065      	b.n	8003b48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a8e:	4b59      	ldr	r3, [pc, #356]	; (8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a96:	ee07 3a90 	vmov	s15, r3
 8003a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003aa2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003bfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003abe:	e043      	b.n	8003b48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ad2:	4b48      	ldr	r3, [pc, #288]	; (8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ae6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003bfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b02:	e021      	b.n	8003b48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b16:	4b37      	ldr	r3, [pc, #220]	; (8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b1e:	ee07 3a90 	vmov	s15, r3
 8003b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003bfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003b48:	4b2a      	ldr	r3, [pc, #168]	; (8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	0a5b      	lsrs	r3, r3, #9
 8003b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b62:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b6e:	ee17 2a90 	vmov	r2, s15
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003b76:	4b1f      	ldr	r3, [pc, #124]	; (8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	0c1b      	lsrs	r3, r3, #16
 8003b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b80:	ee07 3a90 	vmov	s15, r3
 8003b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b90:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b9c:	ee17 2a90 	vmov	r2, s15
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003ba4:	4b13      	ldr	r3, [pc, #76]	; (8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	0e1b      	lsrs	r3, r3, #24
 8003baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bca:	ee17 2a90 	vmov	r2, s15
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003bd2:	e008      	b.n	8003be6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	609a      	str	r2, [r3, #8]
}
 8003be6:	bf00      	nop
 8003be8:	3724      	adds	r7, #36	; 0x24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	58024400 	.word	0x58024400
 8003bf8:	03d09000 	.word	0x03d09000
 8003bfc:	46000000 	.word	0x46000000
 8003c00:	4c742400 	.word	0x4c742400
 8003c04:	4a742400 	.word	0x4a742400
 8003c08:	4bbebc20 	.word	0x4bbebc20

08003c0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b089      	sub	sp, #36	; 0x24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c14:	4ba1      	ldr	r3, [pc, #644]	; (8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003c1e:	4b9f      	ldr	r3, [pc, #636]	; (8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c22:	0d1b      	lsrs	r3, r3, #20
 8003c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003c2a:	4b9c      	ldr	r3, [pc, #624]	; (8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003c36:	4b99      	ldr	r3, [pc, #612]	; (8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3a:	08db      	lsrs	r3, r3, #3
 8003c3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	fb02 f303 	mul.w	r3, r2, r3
 8003c46:	ee07 3a90 	vmov	s15, r3
 8003c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 8111 	beq.w	8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	f000 8083 	beq.w	8003d68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	f200 80a1 	bhi.w	8003dac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d056      	beq.n	8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003c76:	e099      	b.n	8003dac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c78:	4b88      	ldr	r3, [pc, #544]	; (8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d02d      	beq.n	8003ce0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c84:	4b85      	ldr	r3, [pc, #532]	; (8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	08db      	lsrs	r3, r3, #3
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	4a84      	ldr	r2, [pc, #528]	; (8003ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
 8003c94:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	ee07 3a90 	vmov	s15, r3
 8003c9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	ee07 3a90 	vmov	s15, r3
 8003ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cae:	4b7b      	ldr	r3, [pc, #492]	; (8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb6:	ee07 3a90 	vmov	s15, r3
 8003cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cc2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003cde:	e087      	b.n	8003df0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cf2:	4b6a      	ldr	r3, [pc, #424]	; (8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cfa:	ee07 3a90 	vmov	s15, r3
 8003cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d06:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d22:	e065      	b.n	8003df0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	ee07 3a90 	vmov	s15, r3
 8003d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003eac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d36:	4b59      	ldr	r3, [pc, #356]	; (8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3e:	ee07 3a90 	vmov	s15, r3
 8003d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d66:	e043      	b.n	8003df0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d7a:	4b48      	ldr	r3, [pc, #288]	; (8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003daa:	e021      	b.n	8003df0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003eac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dbe:	4b37      	ldr	r3, [pc, #220]	; (8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc6:	ee07 3a90 	vmov	s15, r3
 8003dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dd2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003df0:	4b2a      	ldr	r3, [pc, #168]	; (8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	0a5b      	lsrs	r3, r3, #9
 8003df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e16:	ee17 2a90 	vmov	r2, s15
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003e1e:	4b1f      	ldr	r3, [pc, #124]	; (8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	0c1b      	lsrs	r3, r3, #16
 8003e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e28:	ee07 3a90 	vmov	s15, r3
 8003e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e38:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e44:	ee17 2a90 	vmov	r2, s15
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003e4c:	4b13      	ldr	r3, [pc, #76]	; (8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	0e1b      	lsrs	r3, r3, #24
 8003e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e66:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e72:	ee17 2a90 	vmov	r2, s15
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003e7a:	e008      	b.n	8003e8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	609a      	str	r2, [r3, #8]
}
 8003e8e:	bf00      	nop
 8003e90:	3724      	adds	r7, #36	; 0x24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	58024400 	.word	0x58024400
 8003ea0:	03d09000 	.word	0x03d09000
 8003ea4:	46000000 	.word	0x46000000
 8003ea8:	4c742400 	.word	0x4c742400
 8003eac:	4a742400 	.word	0x4a742400
 8003eb0:	4bbebc20 	.word	0x4bbebc20

08003eb4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ec2:	4b53      	ldr	r3, [pc, #332]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d101      	bne.n	8003ed2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e099      	b.n	8004006 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003ed2:	4b4f      	ldr	r3, [pc, #316]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a4e      	ldr	r2, [pc, #312]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003ed8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003edc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ede:	f7fc ffa3 	bl	8000e28 <HAL_GetTick>
 8003ee2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ee4:	e008      	b.n	8003ef8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003ee6:	f7fc ff9f 	bl	8000e28 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e086      	b.n	8004006 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ef8:	4b45      	ldr	r3, [pc, #276]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1f0      	bne.n	8003ee6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003f04:	4b42      	ldr	r3, [pc, #264]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	031b      	lsls	r3, r3, #12
 8003f12:	493f      	ldr	r1, [pc, #252]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	628b      	str	r3, [r1, #40]	; 0x28
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	025b      	lsls	r3, r3, #9
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	041b      	lsls	r3, r3, #16
 8003f36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	061b      	lsls	r3, r3, #24
 8003f44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f48:	4931      	ldr	r1, [pc, #196]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003f4e:	4b30      	ldr	r3, [pc, #192]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	492d      	ldr	r1, [pc, #180]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003f60:	4b2b      	ldr	r3, [pc, #172]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	f023 0220 	bic.w	r2, r3, #32
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	4928      	ldr	r1, [pc, #160]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003f72:	4b27      	ldr	r3, [pc, #156]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	4a26      	ldr	r2, [pc, #152]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003f78:	f023 0310 	bic.w	r3, r3, #16
 8003f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003f7e:	4b24      	ldr	r3, [pc, #144]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003f80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f82:	4b24      	ldr	r3, [pc, #144]	; (8004014 <RCCEx_PLL2_Config+0x160>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	69d2      	ldr	r2, [r2, #28]
 8003f8a:	00d2      	lsls	r2, r2, #3
 8003f8c:	4920      	ldr	r1, [pc, #128]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003f92:	4b1f      	ldr	r3, [pc, #124]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	4a1e      	ldr	r2, [pc, #120]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003f98:	f043 0310 	orr.w	r3, r3, #16
 8003f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d106      	bne.n	8003fb2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003fa4:	4b1a      	ldr	r3, [pc, #104]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa8:	4a19      	ldr	r2, [pc, #100]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003faa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fb0:	e00f      	b.n	8003fd2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d106      	bne.n	8003fc6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003fb8:	4b15      	ldr	r3, [pc, #84]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	4a14      	ldr	r2, [pc, #80]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003fbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fc4:	e005      	b.n	8003fd2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003fc6:	4b12      	ldr	r3, [pc, #72]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	4a11      	ldr	r2, [pc, #68]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003fcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003fd2:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a0e      	ldr	r2, [pc, #56]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003fd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fde:	f7fc ff23 	bl	8000e28 <HAL_GetTick>
 8003fe2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003fe4:	e008      	b.n	8003ff8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003fe6:	f7fc ff1f 	bl	8000e28 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e006      	b.n	8004006 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ff8:	4b05      	ldr	r3, [pc, #20]	; (8004010 <RCCEx_PLL2_Config+0x15c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f0      	beq.n	8003fe6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004004:	7bfb      	ldrb	r3, [r7, #15]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	58024400 	.word	0x58024400
 8004014:	ffff0007 	.word	0xffff0007

08004018 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004026:	4b53      	ldr	r3, [pc, #332]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b03      	cmp	r3, #3
 8004030:	d101      	bne.n	8004036 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e099      	b.n	800416a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004036:	4b4f      	ldr	r3, [pc, #316]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a4e      	ldr	r2, [pc, #312]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 800403c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004042:	f7fc fef1 	bl	8000e28 <HAL_GetTick>
 8004046:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004048:	e008      	b.n	800405c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800404a:	f7fc feed 	bl	8000e28 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e086      	b.n	800416a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800405c:	4b45      	ldr	r3, [pc, #276]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f0      	bne.n	800404a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004068:	4b42      	ldr	r3, [pc, #264]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 800406a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	051b      	lsls	r3, r3, #20
 8004076:	493f      	ldr	r1, [pc, #252]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 8004078:	4313      	orrs	r3, r2
 800407a:	628b      	str	r3, [r1, #40]	; 0x28
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	3b01      	subs	r3, #1
 8004082:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	3b01      	subs	r3, #1
 800408c:	025b      	lsls	r3, r3, #9
 800408e:	b29b      	uxth	r3, r3
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	3b01      	subs	r3, #1
 8004098:	041b      	lsls	r3, r3, #16
 800409a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	061b      	lsls	r3, r3, #24
 80040a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80040ac:	4931      	ldr	r1, [pc, #196]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80040b2:	4b30      	ldr	r3, [pc, #192]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	492d      	ldr	r1, [pc, #180]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80040c4:	4b2b      	ldr	r3, [pc, #172]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	4928      	ldr	r1, [pc, #160]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80040d6:	4b27      	ldr	r3, [pc, #156]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	4a26      	ldr	r2, [pc, #152]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 80040dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80040e2:	4b24      	ldr	r3, [pc, #144]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 80040e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040e6:	4b24      	ldr	r3, [pc, #144]	; (8004178 <RCCEx_PLL3_Config+0x160>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	69d2      	ldr	r2, [r2, #28]
 80040ee:	00d2      	lsls	r2, r2, #3
 80040f0:	4920      	ldr	r1, [pc, #128]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80040f6:	4b1f      	ldr	r3, [pc, #124]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	4a1e      	ldr	r2, [pc, #120]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 80040fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004100:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d106      	bne.n	8004116 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004108:	4b1a      	ldr	r3, [pc, #104]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	4a19      	ldr	r2, [pc, #100]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 800410e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004112:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004114:	e00f      	b.n	8004136 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d106      	bne.n	800412a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800411c:	4b15      	ldr	r3, [pc, #84]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	4a14      	ldr	r2, [pc, #80]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 8004122:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004126:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004128:	e005      	b.n	8004136 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800412a:	4b12      	ldr	r3, [pc, #72]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	4a11      	ldr	r2, [pc, #68]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 8004130:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004134:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004136:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a0e      	ldr	r2, [pc, #56]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 800413c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004140:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004142:	f7fc fe71 	bl	8000e28 <HAL_GetTick>
 8004146:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004148:	e008      	b.n	800415c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800414a:	f7fc fe6d 	bl	8000e28 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e006      	b.n	800416a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800415c:	4b05      	ldr	r3, [pc, #20]	; (8004174 <RCCEx_PLL3_Config+0x15c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0f0      	beq.n	800414a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004168:	7bfb      	ldrb	r3, [r7, #15]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	58024400 	.word	0x58024400
 8004178:	ffff0007 	.word	0xffff0007

0800417c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e042      	b.n	8004214 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004194:	2b00      	cmp	r3, #0
 8004196:	d106      	bne.n	80041a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7fc fd27 	bl	8000bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2224      	movs	r2, #36	; 0x24
 80041aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f8ba 	bl	8004338 <UART_SetConfig>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d101      	bne.n	80041ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e022      	b.n	8004214 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fe16 	bl	8004e08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fe9d 	bl	8004f4c <UART_CheckIdleState>
 8004212:	4603      	mov	r3, r0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	; 0x28
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	4613      	mov	r3, r2
 800422a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004232:	2b20      	cmp	r3, #32
 8004234:	d17b      	bne.n	800432e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <HAL_UART_Transmit+0x26>
 800423c:	88fb      	ldrh	r3, [r7, #6]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e074      	b.n	8004330 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2221      	movs	r2, #33	; 0x21
 8004252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004256:	f7fc fde7 	bl	8000e28 <HAL_GetTick>
 800425a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	88fa      	ldrh	r2, [r7, #6]
 8004260:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	88fa      	ldrh	r2, [r7, #6]
 8004268:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004274:	d108      	bne.n	8004288 <HAL_UART_Transmit+0x6c>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d104      	bne.n	8004288 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	61bb      	str	r3, [r7, #24]
 8004286:	e003      	b.n	8004290 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800428c:	2300      	movs	r3, #0
 800428e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004290:	e030      	b.n	80042f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2200      	movs	r2, #0
 800429a:	2180      	movs	r1, #128	; 0x80
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 feff 	bl	80050a0 <UART_WaitOnFlagUntilTimeout>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e03d      	b.n	8004330 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10b      	bne.n	80042d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	3302      	adds	r3, #2
 80042ce:	61bb      	str	r3, [r7, #24]
 80042d0:	e007      	b.n	80042e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	781a      	ldrb	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	3301      	adds	r3, #1
 80042e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1c8      	bne.n	8004292 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	2200      	movs	r2, #0
 8004308:	2140      	movs	r1, #64	; 0x40
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 fec8 	bl	80050a0 <UART_WaitOnFlagUntilTimeout>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2220      	movs	r2, #32
 800431a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e006      	b.n	8004330 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2220      	movs	r2, #32
 8004326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	e000      	b.n	8004330 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800432e:	2302      	movs	r3, #2
  }
}
 8004330:	4618      	mov	r0, r3
 8004332:	3720      	adds	r7, #32
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800433c:	b092      	sub	sp, #72	; 0x48
 800433e:	af00      	add	r7, sp, #0
 8004340:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	431a      	orrs	r2, r3
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	431a      	orrs	r2, r3
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	4313      	orrs	r3, r2
 800435e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	4bbe      	ldr	r3, [pc, #760]	; (8004660 <UART_SetConfig+0x328>)
 8004368:	4013      	ands	r3, r2
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	6812      	ldr	r2, [r2, #0]
 800436e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004370:	430b      	orrs	r3, r1
 8004372:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4ab3      	ldr	r2, [pc, #716]	; (8004664 <UART_SetConfig+0x32c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d004      	beq.n	80043a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043a0:	4313      	orrs	r3, r2
 80043a2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	4baf      	ldr	r3, [pc, #700]	; (8004668 <UART_SetConfig+0x330>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	6812      	ldr	r2, [r2, #0]
 80043b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043b4:	430b      	orrs	r3, r1
 80043b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043be:	f023 010f 	bic.w	r1, r3, #15
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4aa6      	ldr	r2, [pc, #664]	; (800466c <UART_SetConfig+0x334>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d177      	bne.n	80044c8 <UART_SetConfig+0x190>
 80043d8:	4ba5      	ldr	r3, [pc, #660]	; (8004670 <UART_SetConfig+0x338>)
 80043da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043e0:	2b28      	cmp	r3, #40	; 0x28
 80043e2:	d86d      	bhi.n	80044c0 <UART_SetConfig+0x188>
 80043e4:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <UART_SetConfig+0xb4>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	08004491 	.word	0x08004491
 80043f0:	080044c1 	.word	0x080044c1
 80043f4:	080044c1 	.word	0x080044c1
 80043f8:	080044c1 	.word	0x080044c1
 80043fc:	080044c1 	.word	0x080044c1
 8004400:	080044c1 	.word	0x080044c1
 8004404:	080044c1 	.word	0x080044c1
 8004408:	080044c1 	.word	0x080044c1
 800440c:	08004499 	.word	0x08004499
 8004410:	080044c1 	.word	0x080044c1
 8004414:	080044c1 	.word	0x080044c1
 8004418:	080044c1 	.word	0x080044c1
 800441c:	080044c1 	.word	0x080044c1
 8004420:	080044c1 	.word	0x080044c1
 8004424:	080044c1 	.word	0x080044c1
 8004428:	080044c1 	.word	0x080044c1
 800442c:	080044a1 	.word	0x080044a1
 8004430:	080044c1 	.word	0x080044c1
 8004434:	080044c1 	.word	0x080044c1
 8004438:	080044c1 	.word	0x080044c1
 800443c:	080044c1 	.word	0x080044c1
 8004440:	080044c1 	.word	0x080044c1
 8004444:	080044c1 	.word	0x080044c1
 8004448:	080044c1 	.word	0x080044c1
 800444c:	080044a9 	.word	0x080044a9
 8004450:	080044c1 	.word	0x080044c1
 8004454:	080044c1 	.word	0x080044c1
 8004458:	080044c1 	.word	0x080044c1
 800445c:	080044c1 	.word	0x080044c1
 8004460:	080044c1 	.word	0x080044c1
 8004464:	080044c1 	.word	0x080044c1
 8004468:	080044c1 	.word	0x080044c1
 800446c:	080044b1 	.word	0x080044b1
 8004470:	080044c1 	.word	0x080044c1
 8004474:	080044c1 	.word	0x080044c1
 8004478:	080044c1 	.word	0x080044c1
 800447c:	080044c1 	.word	0x080044c1
 8004480:	080044c1 	.word	0x080044c1
 8004484:	080044c1 	.word	0x080044c1
 8004488:	080044c1 	.word	0x080044c1
 800448c:	080044b9 	.word	0x080044b9
 8004490:	2301      	movs	r3, #1
 8004492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004496:	e222      	b.n	80048de <UART_SetConfig+0x5a6>
 8004498:	2304      	movs	r3, #4
 800449a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800449e:	e21e      	b.n	80048de <UART_SetConfig+0x5a6>
 80044a0:	2308      	movs	r3, #8
 80044a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044a6:	e21a      	b.n	80048de <UART_SetConfig+0x5a6>
 80044a8:	2310      	movs	r3, #16
 80044aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ae:	e216      	b.n	80048de <UART_SetConfig+0x5a6>
 80044b0:	2320      	movs	r3, #32
 80044b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044b6:	e212      	b.n	80048de <UART_SetConfig+0x5a6>
 80044b8:	2340      	movs	r3, #64	; 0x40
 80044ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044be:	e20e      	b.n	80048de <UART_SetConfig+0x5a6>
 80044c0:	2380      	movs	r3, #128	; 0x80
 80044c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044c6:	e20a      	b.n	80048de <UART_SetConfig+0x5a6>
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a69      	ldr	r2, [pc, #420]	; (8004674 <UART_SetConfig+0x33c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d130      	bne.n	8004534 <UART_SetConfig+0x1fc>
 80044d2:	4b67      	ldr	r3, [pc, #412]	; (8004670 <UART_SetConfig+0x338>)
 80044d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	2b05      	cmp	r3, #5
 80044dc:	d826      	bhi.n	800452c <UART_SetConfig+0x1f4>
 80044de:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <UART_SetConfig+0x1ac>)
 80044e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e4:	080044fd 	.word	0x080044fd
 80044e8:	08004505 	.word	0x08004505
 80044ec:	0800450d 	.word	0x0800450d
 80044f0:	08004515 	.word	0x08004515
 80044f4:	0800451d 	.word	0x0800451d
 80044f8:	08004525 	.word	0x08004525
 80044fc:	2300      	movs	r3, #0
 80044fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004502:	e1ec      	b.n	80048de <UART_SetConfig+0x5a6>
 8004504:	2304      	movs	r3, #4
 8004506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800450a:	e1e8      	b.n	80048de <UART_SetConfig+0x5a6>
 800450c:	2308      	movs	r3, #8
 800450e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004512:	e1e4      	b.n	80048de <UART_SetConfig+0x5a6>
 8004514:	2310      	movs	r3, #16
 8004516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800451a:	e1e0      	b.n	80048de <UART_SetConfig+0x5a6>
 800451c:	2320      	movs	r3, #32
 800451e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004522:	e1dc      	b.n	80048de <UART_SetConfig+0x5a6>
 8004524:	2340      	movs	r3, #64	; 0x40
 8004526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800452a:	e1d8      	b.n	80048de <UART_SetConfig+0x5a6>
 800452c:	2380      	movs	r3, #128	; 0x80
 800452e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004532:	e1d4      	b.n	80048de <UART_SetConfig+0x5a6>
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a4f      	ldr	r2, [pc, #316]	; (8004678 <UART_SetConfig+0x340>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d130      	bne.n	80045a0 <UART_SetConfig+0x268>
 800453e:	4b4c      	ldr	r3, [pc, #304]	; (8004670 <UART_SetConfig+0x338>)
 8004540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	2b05      	cmp	r3, #5
 8004548:	d826      	bhi.n	8004598 <UART_SetConfig+0x260>
 800454a:	a201      	add	r2, pc, #4	; (adr r2, 8004550 <UART_SetConfig+0x218>)
 800454c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004550:	08004569 	.word	0x08004569
 8004554:	08004571 	.word	0x08004571
 8004558:	08004579 	.word	0x08004579
 800455c:	08004581 	.word	0x08004581
 8004560:	08004589 	.word	0x08004589
 8004564:	08004591 	.word	0x08004591
 8004568:	2300      	movs	r3, #0
 800456a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800456e:	e1b6      	b.n	80048de <UART_SetConfig+0x5a6>
 8004570:	2304      	movs	r3, #4
 8004572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004576:	e1b2      	b.n	80048de <UART_SetConfig+0x5a6>
 8004578:	2308      	movs	r3, #8
 800457a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800457e:	e1ae      	b.n	80048de <UART_SetConfig+0x5a6>
 8004580:	2310      	movs	r3, #16
 8004582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004586:	e1aa      	b.n	80048de <UART_SetConfig+0x5a6>
 8004588:	2320      	movs	r3, #32
 800458a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800458e:	e1a6      	b.n	80048de <UART_SetConfig+0x5a6>
 8004590:	2340      	movs	r3, #64	; 0x40
 8004592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004596:	e1a2      	b.n	80048de <UART_SetConfig+0x5a6>
 8004598:	2380      	movs	r3, #128	; 0x80
 800459a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800459e:	e19e      	b.n	80048de <UART_SetConfig+0x5a6>
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a35      	ldr	r2, [pc, #212]	; (800467c <UART_SetConfig+0x344>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d130      	bne.n	800460c <UART_SetConfig+0x2d4>
 80045aa:	4b31      	ldr	r3, [pc, #196]	; (8004670 <UART_SetConfig+0x338>)
 80045ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	2b05      	cmp	r3, #5
 80045b4:	d826      	bhi.n	8004604 <UART_SetConfig+0x2cc>
 80045b6:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <UART_SetConfig+0x284>)
 80045b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045bc:	080045d5 	.word	0x080045d5
 80045c0:	080045dd 	.word	0x080045dd
 80045c4:	080045e5 	.word	0x080045e5
 80045c8:	080045ed 	.word	0x080045ed
 80045cc:	080045f5 	.word	0x080045f5
 80045d0:	080045fd 	.word	0x080045fd
 80045d4:	2300      	movs	r3, #0
 80045d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045da:	e180      	b.n	80048de <UART_SetConfig+0x5a6>
 80045dc:	2304      	movs	r3, #4
 80045de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045e2:	e17c      	b.n	80048de <UART_SetConfig+0x5a6>
 80045e4:	2308      	movs	r3, #8
 80045e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ea:	e178      	b.n	80048de <UART_SetConfig+0x5a6>
 80045ec:	2310      	movs	r3, #16
 80045ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045f2:	e174      	b.n	80048de <UART_SetConfig+0x5a6>
 80045f4:	2320      	movs	r3, #32
 80045f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045fa:	e170      	b.n	80048de <UART_SetConfig+0x5a6>
 80045fc:	2340      	movs	r3, #64	; 0x40
 80045fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004602:	e16c      	b.n	80048de <UART_SetConfig+0x5a6>
 8004604:	2380      	movs	r3, #128	; 0x80
 8004606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800460a:	e168      	b.n	80048de <UART_SetConfig+0x5a6>
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a1b      	ldr	r2, [pc, #108]	; (8004680 <UART_SetConfig+0x348>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d142      	bne.n	800469c <UART_SetConfig+0x364>
 8004616:	4b16      	ldr	r3, [pc, #88]	; (8004670 <UART_SetConfig+0x338>)
 8004618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	2b05      	cmp	r3, #5
 8004620:	d838      	bhi.n	8004694 <UART_SetConfig+0x35c>
 8004622:	a201      	add	r2, pc, #4	; (adr r2, 8004628 <UART_SetConfig+0x2f0>)
 8004624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004628:	08004641 	.word	0x08004641
 800462c:	08004649 	.word	0x08004649
 8004630:	08004651 	.word	0x08004651
 8004634:	08004659 	.word	0x08004659
 8004638:	08004685 	.word	0x08004685
 800463c:	0800468d 	.word	0x0800468d
 8004640:	2300      	movs	r3, #0
 8004642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004646:	e14a      	b.n	80048de <UART_SetConfig+0x5a6>
 8004648:	2304      	movs	r3, #4
 800464a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800464e:	e146      	b.n	80048de <UART_SetConfig+0x5a6>
 8004650:	2308      	movs	r3, #8
 8004652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004656:	e142      	b.n	80048de <UART_SetConfig+0x5a6>
 8004658:	2310      	movs	r3, #16
 800465a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800465e:	e13e      	b.n	80048de <UART_SetConfig+0x5a6>
 8004660:	cfff69f3 	.word	0xcfff69f3
 8004664:	58000c00 	.word	0x58000c00
 8004668:	11fff4ff 	.word	0x11fff4ff
 800466c:	40011000 	.word	0x40011000
 8004670:	58024400 	.word	0x58024400
 8004674:	40004400 	.word	0x40004400
 8004678:	40004800 	.word	0x40004800
 800467c:	40004c00 	.word	0x40004c00
 8004680:	40005000 	.word	0x40005000
 8004684:	2320      	movs	r3, #32
 8004686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800468a:	e128      	b.n	80048de <UART_SetConfig+0x5a6>
 800468c:	2340      	movs	r3, #64	; 0x40
 800468e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004692:	e124      	b.n	80048de <UART_SetConfig+0x5a6>
 8004694:	2380      	movs	r3, #128	; 0x80
 8004696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800469a:	e120      	b.n	80048de <UART_SetConfig+0x5a6>
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4acb      	ldr	r2, [pc, #812]	; (80049d0 <UART_SetConfig+0x698>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d176      	bne.n	8004794 <UART_SetConfig+0x45c>
 80046a6:	4bcb      	ldr	r3, [pc, #812]	; (80049d4 <UART_SetConfig+0x69c>)
 80046a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046ae:	2b28      	cmp	r3, #40	; 0x28
 80046b0:	d86c      	bhi.n	800478c <UART_SetConfig+0x454>
 80046b2:	a201      	add	r2, pc, #4	; (adr r2, 80046b8 <UART_SetConfig+0x380>)
 80046b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b8:	0800475d 	.word	0x0800475d
 80046bc:	0800478d 	.word	0x0800478d
 80046c0:	0800478d 	.word	0x0800478d
 80046c4:	0800478d 	.word	0x0800478d
 80046c8:	0800478d 	.word	0x0800478d
 80046cc:	0800478d 	.word	0x0800478d
 80046d0:	0800478d 	.word	0x0800478d
 80046d4:	0800478d 	.word	0x0800478d
 80046d8:	08004765 	.word	0x08004765
 80046dc:	0800478d 	.word	0x0800478d
 80046e0:	0800478d 	.word	0x0800478d
 80046e4:	0800478d 	.word	0x0800478d
 80046e8:	0800478d 	.word	0x0800478d
 80046ec:	0800478d 	.word	0x0800478d
 80046f0:	0800478d 	.word	0x0800478d
 80046f4:	0800478d 	.word	0x0800478d
 80046f8:	0800476d 	.word	0x0800476d
 80046fc:	0800478d 	.word	0x0800478d
 8004700:	0800478d 	.word	0x0800478d
 8004704:	0800478d 	.word	0x0800478d
 8004708:	0800478d 	.word	0x0800478d
 800470c:	0800478d 	.word	0x0800478d
 8004710:	0800478d 	.word	0x0800478d
 8004714:	0800478d 	.word	0x0800478d
 8004718:	08004775 	.word	0x08004775
 800471c:	0800478d 	.word	0x0800478d
 8004720:	0800478d 	.word	0x0800478d
 8004724:	0800478d 	.word	0x0800478d
 8004728:	0800478d 	.word	0x0800478d
 800472c:	0800478d 	.word	0x0800478d
 8004730:	0800478d 	.word	0x0800478d
 8004734:	0800478d 	.word	0x0800478d
 8004738:	0800477d 	.word	0x0800477d
 800473c:	0800478d 	.word	0x0800478d
 8004740:	0800478d 	.word	0x0800478d
 8004744:	0800478d 	.word	0x0800478d
 8004748:	0800478d 	.word	0x0800478d
 800474c:	0800478d 	.word	0x0800478d
 8004750:	0800478d 	.word	0x0800478d
 8004754:	0800478d 	.word	0x0800478d
 8004758:	08004785 	.word	0x08004785
 800475c:	2301      	movs	r3, #1
 800475e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004762:	e0bc      	b.n	80048de <UART_SetConfig+0x5a6>
 8004764:	2304      	movs	r3, #4
 8004766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800476a:	e0b8      	b.n	80048de <UART_SetConfig+0x5a6>
 800476c:	2308      	movs	r3, #8
 800476e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004772:	e0b4      	b.n	80048de <UART_SetConfig+0x5a6>
 8004774:	2310      	movs	r3, #16
 8004776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800477a:	e0b0      	b.n	80048de <UART_SetConfig+0x5a6>
 800477c:	2320      	movs	r3, #32
 800477e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004782:	e0ac      	b.n	80048de <UART_SetConfig+0x5a6>
 8004784:	2340      	movs	r3, #64	; 0x40
 8004786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800478a:	e0a8      	b.n	80048de <UART_SetConfig+0x5a6>
 800478c:	2380      	movs	r3, #128	; 0x80
 800478e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004792:	e0a4      	b.n	80048de <UART_SetConfig+0x5a6>
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a8f      	ldr	r2, [pc, #572]	; (80049d8 <UART_SetConfig+0x6a0>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d130      	bne.n	8004800 <UART_SetConfig+0x4c8>
 800479e:	4b8d      	ldr	r3, [pc, #564]	; (80049d4 <UART_SetConfig+0x69c>)
 80047a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	2b05      	cmp	r3, #5
 80047a8:	d826      	bhi.n	80047f8 <UART_SetConfig+0x4c0>
 80047aa:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <UART_SetConfig+0x478>)
 80047ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b0:	080047c9 	.word	0x080047c9
 80047b4:	080047d1 	.word	0x080047d1
 80047b8:	080047d9 	.word	0x080047d9
 80047bc:	080047e1 	.word	0x080047e1
 80047c0:	080047e9 	.word	0x080047e9
 80047c4:	080047f1 	.word	0x080047f1
 80047c8:	2300      	movs	r3, #0
 80047ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ce:	e086      	b.n	80048de <UART_SetConfig+0x5a6>
 80047d0:	2304      	movs	r3, #4
 80047d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047d6:	e082      	b.n	80048de <UART_SetConfig+0x5a6>
 80047d8:	2308      	movs	r3, #8
 80047da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047de:	e07e      	b.n	80048de <UART_SetConfig+0x5a6>
 80047e0:	2310      	movs	r3, #16
 80047e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047e6:	e07a      	b.n	80048de <UART_SetConfig+0x5a6>
 80047e8:	2320      	movs	r3, #32
 80047ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ee:	e076      	b.n	80048de <UART_SetConfig+0x5a6>
 80047f0:	2340      	movs	r3, #64	; 0x40
 80047f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047f6:	e072      	b.n	80048de <UART_SetConfig+0x5a6>
 80047f8:	2380      	movs	r3, #128	; 0x80
 80047fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047fe:	e06e      	b.n	80048de <UART_SetConfig+0x5a6>
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a75      	ldr	r2, [pc, #468]	; (80049dc <UART_SetConfig+0x6a4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d130      	bne.n	800486c <UART_SetConfig+0x534>
 800480a:	4b72      	ldr	r3, [pc, #456]	; (80049d4 <UART_SetConfig+0x69c>)
 800480c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480e:	f003 0307 	and.w	r3, r3, #7
 8004812:	2b05      	cmp	r3, #5
 8004814:	d826      	bhi.n	8004864 <UART_SetConfig+0x52c>
 8004816:	a201      	add	r2, pc, #4	; (adr r2, 800481c <UART_SetConfig+0x4e4>)
 8004818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481c:	08004835 	.word	0x08004835
 8004820:	0800483d 	.word	0x0800483d
 8004824:	08004845 	.word	0x08004845
 8004828:	0800484d 	.word	0x0800484d
 800482c:	08004855 	.word	0x08004855
 8004830:	0800485d 	.word	0x0800485d
 8004834:	2300      	movs	r3, #0
 8004836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800483a:	e050      	b.n	80048de <UART_SetConfig+0x5a6>
 800483c:	2304      	movs	r3, #4
 800483e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004842:	e04c      	b.n	80048de <UART_SetConfig+0x5a6>
 8004844:	2308      	movs	r3, #8
 8004846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800484a:	e048      	b.n	80048de <UART_SetConfig+0x5a6>
 800484c:	2310      	movs	r3, #16
 800484e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004852:	e044      	b.n	80048de <UART_SetConfig+0x5a6>
 8004854:	2320      	movs	r3, #32
 8004856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800485a:	e040      	b.n	80048de <UART_SetConfig+0x5a6>
 800485c:	2340      	movs	r3, #64	; 0x40
 800485e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004862:	e03c      	b.n	80048de <UART_SetConfig+0x5a6>
 8004864:	2380      	movs	r3, #128	; 0x80
 8004866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800486a:	e038      	b.n	80048de <UART_SetConfig+0x5a6>
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a5b      	ldr	r2, [pc, #364]	; (80049e0 <UART_SetConfig+0x6a8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d130      	bne.n	80048d8 <UART_SetConfig+0x5a0>
 8004876:	4b57      	ldr	r3, [pc, #348]	; (80049d4 <UART_SetConfig+0x69c>)
 8004878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	2b05      	cmp	r3, #5
 8004880:	d826      	bhi.n	80048d0 <UART_SetConfig+0x598>
 8004882:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <UART_SetConfig+0x550>)
 8004884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004888:	080048a1 	.word	0x080048a1
 800488c:	080048a9 	.word	0x080048a9
 8004890:	080048b1 	.word	0x080048b1
 8004894:	080048b9 	.word	0x080048b9
 8004898:	080048c1 	.word	0x080048c1
 800489c:	080048c9 	.word	0x080048c9
 80048a0:	2302      	movs	r3, #2
 80048a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048a6:	e01a      	b.n	80048de <UART_SetConfig+0x5a6>
 80048a8:	2304      	movs	r3, #4
 80048aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048ae:	e016      	b.n	80048de <UART_SetConfig+0x5a6>
 80048b0:	2308      	movs	r3, #8
 80048b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048b6:	e012      	b.n	80048de <UART_SetConfig+0x5a6>
 80048b8:	2310      	movs	r3, #16
 80048ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048be:	e00e      	b.n	80048de <UART_SetConfig+0x5a6>
 80048c0:	2320      	movs	r3, #32
 80048c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048c6:	e00a      	b.n	80048de <UART_SetConfig+0x5a6>
 80048c8:	2340      	movs	r3, #64	; 0x40
 80048ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048ce:	e006      	b.n	80048de <UART_SetConfig+0x5a6>
 80048d0:	2380      	movs	r3, #128	; 0x80
 80048d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048d6:	e002      	b.n	80048de <UART_SetConfig+0x5a6>
 80048d8:	2380      	movs	r3, #128	; 0x80
 80048da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a3f      	ldr	r2, [pc, #252]	; (80049e0 <UART_SetConfig+0x6a8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	f040 80f8 	bne.w	8004ada <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80048ee:	2b20      	cmp	r3, #32
 80048f0:	dc46      	bgt.n	8004980 <UART_SetConfig+0x648>
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	f2c0 8082 	blt.w	80049fc <UART_SetConfig+0x6c4>
 80048f8:	3b02      	subs	r3, #2
 80048fa:	2b1e      	cmp	r3, #30
 80048fc:	d87e      	bhi.n	80049fc <UART_SetConfig+0x6c4>
 80048fe:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <UART_SetConfig+0x5cc>)
 8004900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004904:	08004987 	.word	0x08004987
 8004908:	080049fd 	.word	0x080049fd
 800490c:	0800498f 	.word	0x0800498f
 8004910:	080049fd 	.word	0x080049fd
 8004914:	080049fd 	.word	0x080049fd
 8004918:	080049fd 	.word	0x080049fd
 800491c:	0800499f 	.word	0x0800499f
 8004920:	080049fd 	.word	0x080049fd
 8004924:	080049fd 	.word	0x080049fd
 8004928:	080049fd 	.word	0x080049fd
 800492c:	080049fd 	.word	0x080049fd
 8004930:	080049fd 	.word	0x080049fd
 8004934:	080049fd 	.word	0x080049fd
 8004938:	080049fd 	.word	0x080049fd
 800493c:	080049af 	.word	0x080049af
 8004940:	080049fd 	.word	0x080049fd
 8004944:	080049fd 	.word	0x080049fd
 8004948:	080049fd 	.word	0x080049fd
 800494c:	080049fd 	.word	0x080049fd
 8004950:	080049fd 	.word	0x080049fd
 8004954:	080049fd 	.word	0x080049fd
 8004958:	080049fd 	.word	0x080049fd
 800495c:	080049fd 	.word	0x080049fd
 8004960:	080049fd 	.word	0x080049fd
 8004964:	080049fd 	.word	0x080049fd
 8004968:	080049fd 	.word	0x080049fd
 800496c:	080049fd 	.word	0x080049fd
 8004970:	080049fd 	.word	0x080049fd
 8004974:	080049fd 	.word	0x080049fd
 8004978:	080049fd 	.word	0x080049fd
 800497c:	080049ef 	.word	0x080049ef
 8004980:	2b40      	cmp	r3, #64	; 0x40
 8004982:	d037      	beq.n	80049f4 <UART_SetConfig+0x6bc>
 8004984:	e03a      	b.n	80049fc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004986:	f7fe ffd7 	bl	8003938 <HAL_RCCEx_GetD3PCLK1Freq>
 800498a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800498c:	e03c      	b.n	8004a08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800498e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004992:	4618      	mov	r0, r3
 8004994:	f7fe ffe6 	bl	8003964 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800499c:	e034      	b.n	8004a08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800499e:	f107 0318 	add.w	r3, r7, #24
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff f932 	bl	8003c0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049ac:	e02c      	b.n	8004a08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049ae:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <UART_SetConfig+0x69c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0320 	and.w	r3, r3, #32
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d016      	beq.n	80049e8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <UART_SetConfig+0x69c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	08db      	lsrs	r3, r3, #3
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	4a07      	ldr	r2, [pc, #28]	; (80049e4 <UART_SetConfig+0x6ac>)
 80049c6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049cc:	e01c      	b.n	8004a08 <UART_SetConfig+0x6d0>
 80049ce:	bf00      	nop
 80049d0:	40011400 	.word	0x40011400
 80049d4:	58024400 	.word	0x58024400
 80049d8:	40007800 	.word	0x40007800
 80049dc:	40007c00 	.word	0x40007c00
 80049e0:	58000c00 	.word	0x58000c00
 80049e4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80049e8:	4b9d      	ldr	r3, [pc, #628]	; (8004c60 <UART_SetConfig+0x928>)
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049ec:	e00c      	b.n	8004a08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80049ee:	4b9d      	ldr	r3, [pc, #628]	; (8004c64 <UART_SetConfig+0x92c>)
 80049f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049f2:	e009      	b.n	8004a08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049fa:	e005      	b.n	8004a08 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004a06:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 81de 	beq.w	8004dcc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	4a94      	ldr	r2, [pc, #592]	; (8004c68 <UART_SetConfig+0x930>)
 8004a16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a22:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	4413      	add	r3, r2
 8004a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d305      	bcc.n	8004a40 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d903      	bls.n	8004a48 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004a46:	e1c1      	b.n	8004dcc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	60bb      	str	r3, [r7, #8]
 8004a4e:	60fa      	str	r2, [r7, #12]
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	4a84      	ldr	r2, [pc, #528]	; (8004c68 <UART_SetConfig+0x930>)
 8004a56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	607a      	str	r2, [r7, #4]
 8004a62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a6a:	f7fb fc89 	bl	8000380 <__aeabi_uldivmod>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4610      	mov	r0, r2
 8004a74:	4619      	mov	r1, r3
 8004a76:	f04f 0200 	mov.w	r2, #0
 8004a7a:	f04f 0300 	mov.w	r3, #0
 8004a7e:	020b      	lsls	r3, r1, #8
 8004a80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a84:	0202      	lsls	r2, r0, #8
 8004a86:	6979      	ldr	r1, [r7, #20]
 8004a88:	6849      	ldr	r1, [r1, #4]
 8004a8a:	0849      	lsrs	r1, r1, #1
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	460c      	mov	r4, r1
 8004a90:	4605      	mov	r5, r0
 8004a92:	eb12 0804 	adds.w	r8, r2, r4
 8004a96:	eb43 0905 	adc.w	r9, r3, r5
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	469a      	mov	sl, r3
 8004aa2:	4693      	mov	fp, r2
 8004aa4:	4652      	mov	r2, sl
 8004aa6:	465b      	mov	r3, fp
 8004aa8:	4640      	mov	r0, r8
 8004aaa:	4649      	mov	r1, r9
 8004aac:	f7fb fc68 	bl	8000380 <__aeabi_uldivmod>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004abe:	d308      	bcc.n	8004ad2 <UART_SetConfig+0x79a>
 8004ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac6:	d204      	bcs.n	8004ad2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ace:	60da      	str	r2, [r3, #12]
 8004ad0:	e17c      	b.n	8004dcc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004ad8:	e178      	b.n	8004dcc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae2:	f040 80c5 	bne.w	8004c70 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004ae6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	dc48      	bgt.n	8004b80 <UART_SetConfig+0x848>
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	db7b      	blt.n	8004bea <UART_SetConfig+0x8b2>
 8004af2:	2b20      	cmp	r3, #32
 8004af4:	d879      	bhi.n	8004bea <UART_SetConfig+0x8b2>
 8004af6:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <UART_SetConfig+0x7c4>)
 8004af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afc:	08004b87 	.word	0x08004b87
 8004b00:	08004b8f 	.word	0x08004b8f
 8004b04:	08004beb 	.word	0x08004beb
 8004b08:	08004beb 	.word	0x08004beb
 8004b0c:	08004b97 	.word	0x08004b97
 8004b10:	08004beb 	.word	0x08004beb
 8004b14:	08004beb 	.word	0x08004beb
 8004b18:	08004beb 	.word	0x08004beb
 8004b1c:	08004ba7 	.word	0x08004ba7
 8004b20:	08004beb 	.word	0x08004beb
 8004b24:	08004beb 	.word	0x08004beb
 8004b28:	08004beb 	.word	0x08004beb
 8004b2c:	08004beb 	.word	0x08004beb
 8004b30:	08004beb 	.word	0x08004beb
 8004b34:	08004beb 	.word	0x08004beb
 8004b38:	08004beb 	.word	0x08004beb
 8004b3c:	08004bb7 	.word	0x08004bb7
 8004b40:	08004beb 	.word	0x08004beb
 8004b44:	08004beb 	.word	0x08004beb
 8004b48:	08004beb 	.word	0x08004beb
 8004b4c:	08004beb 	.word	0x08004beb
 8004b50:	08004beb 	.word	0x08004beb
 8004b54:	08004beb 	.word	0x08004beb
 8004b58:	08004beb 	.word	0x08004beb
 8004b5c:	08004beb 	.word	0x08004beb
 8004b60:	08004beb 	.word	0x08004beb
 8004b64:	08004beb 	.word	0x08004beb
 8004b68:	08004beb 	.word	0x08004beb
 8004b6c:	08004beb 	.word	0x08004beb
 8004b70:	08004beb 	.word	0x08004beb
 8004b74:	08004beb 	.word	0x08004beb
 8004b78:	08004beb 	.word	0x08004beb
 8004b7c:	08004bdd 	.word	0x08004bdd
 8004b80:	2b40      	cmp	r3, #64	; 0x40
 8004b82:	d02e      	beq.n	8004be2 <UART_SetConfig+0x8aa>
 8004b84:	e031      	b.n	8004bea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b86:	f7fd fc61 	bl	800244c <HAL_RCC_GetPCLK1Freq>
 8004b8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b8c:	e033      	b.n	8004bf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b8e:	f7fd fc73 	bl	8002478 <HAL_RCC_GetPCLK2Freq>
 8004b92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b94:	e02f      	b.n	8004bf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fe fee2 	bl	8003964 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ba4:	e027      	b.n	8004bf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ba6:	f107 0318 	add.w	r3, r7, #24
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff f82e 	bl	8003c0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bb4:	e01f      	b.n	8004bf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bb6:	4b2d      	ldr	r3, [pc, #180]	; (8004c6c <UART_SetConfig+0x934>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d009      	beq.n	8004bd6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004bc2:	4b2a      	ldr	r3, [pc, #168]	; (8004c6c <UART_SetConfig+0x934>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	08db      	lsrs	r3, r3, #3
 8004bc8:	f003 0303 	and.w	r3, r3, #3
 8004bcc:	4a24      	ldr	r2, [pc, #144]	; (8004c60 <UART_SetConfig+0x928>)
 8004bce:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004bd4:	e00f      	b.n	8004bf6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004bd6:	4b22      	ldr	r3, [pc, #136]	; (8004c60 <UART_SetConfig+0x928>)
 8004bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bda:	e00c      	b.n	8004bf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004bdc:	4b21      	ldr	r3, [pc, #132]	; (8004c64 <UART_SetConfig+0x92c>)
 8004bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004be0:	e009      	b.n	8004bf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004be8:	e005      	b.n	8004bf6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004bf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 80e7 	beq.w	8004dcc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	4a19      	ldr	r2, [pc, #100]	; (8004c68 <UART_SetConfig+0x930>)
 8004c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c10:	005a      	lsls	r2, r3, #1
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	085b      	lsrs	r3, r3, #1
 8004c18:	441a      	add	r2, r3
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c22:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c26:	2b0f      	cmp	r3, #15
 8004c28:	d916      	bls.n	8004c58 <UART_SetConfig+0x920>
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c30:	d212      	bcs.n	8004c58 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	f023 030f 	bic.w	r3, r3, #15
 8004c3a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3e:	085b      	lsrs	r3, r3, #1
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004c54:	60da      	str	r2, [r3, #12]
 8004c56:	e0b9      	b.n	8004dcc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004c5e:	e0b5      	b.n	8004dcc <UART_SetConfig+0xa94>
 8004c60:	03d09000 	.word	0x03d09000
 8004c64:	003d0900 	.word	0x003d0900
 8004c68:	08006408 	.word	0x08006408
 8004c6c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c70:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	dc49      	bgt.n	8004d0c <UART_SetConfig+0x9d4>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	db7c      	blt.n	8004d76 <UART_SetConfig+0xa3e>
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	d87a      	bhi.n	8004d76 <UART_SetConfig+0xa3e>
 8004c80:	a201      	add	r2, pc, #4	; (adr r2, 8004c88 <UART_SetConfig+0x950>)
 8004c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c86:	bf00      	nop
 8004c88:	08004d13 	.word	0x08004d13
 8004c8c:	08004d1b 	.word	0x08004d1b
 8004c90:	08004d77 	.word	0x08004d77
 8004c94:	08004d77 	.word	0x08004d77
 8004c98:	08004d23 	.word	0x08004d23
 8004c9c:	08004d77 	.word	0x08004d77
 8004ca0:	08004d77 	.word	0x08004d77
 8004ca4:	08004d77 	.word	0x08004d77
 8004ca8:	08004d33 	.word	0x08004d33
 8004cac:	08004d77 	.word	0x08004d77
 8004cb0:	08004d77 	.word	0x08004d77
 8004cb4:	08004d77 	.word	0x08004d77
 8004cb8:	08004d77 	.word	0x08004d77
 8004cbc:	08004d77 	.word	0x08004d77
 8004cc0:	08004d77 	.word	0x08004d77
 8004cc4:	08004d77 	.word	0x08004d77
 8004cc8:	08004d43 	.word	0x08004d43
 8004ccc:	08004d77 	.word	0x08004d77
 8004cd0:	08004d77 	.word	0x08004d77
 8004cd4:	08004d77 	.word	0x08004d77
 8004cd8:	08004d77 	.word	0x08004d77
 8004cdc:	08004d77 	.word	0x08004d77
 8004ce0:	08004d77 	.word	0x08004d77
 8004ce4:	08004d77 	.word	0x08004d77
 8004ce8:	08004d77 	.word	0x08004d77
 8004cec:	08004d77 	.word	0x08004d77
 8004cf0:	08004d77 	.word	0x08004d77
 8004cf4:	08004d77 	.word	0x08004d77
 8004cf8:	08004d77 	.word	0x08004d77
 8004cfc:	08004d77 	.word	0x08004d77
 8004d00:	08004d77 	.word	0x08004d77
 8004d04:	08004d77 	.word	0x08004d77
 8004d08:	08004d69 	.word	0x08004d69
 8004d0c:	2b40      	cmp	r3, #64	; 0x40
 8004d0e:	d02e      	beq.n	8004d6e <UART_SetConfig+0xa36>
 8004d10:	e031      	b.n	8004d76 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d12:	f7fd fb9b 	bl	800244c <HAL_RCC_GetPCLK1Freq>
 8004d16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004d18:	e033      	b.n	8004d82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d1a:	f7fd fbad 	bl	8002478 <HAL_RCC_GetPCLK2Freq>
 8004d1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004d20:	e02f      	b.n	8004d82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fe fe1c 	bl	8003964 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d30:	e027      	b.n	8004d82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d32:	f107 0318 	add.w	r3, r7, #24
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fe ff68 	bl	8003c0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d40:	e01f      	b.n	8004d82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d42:	4b2d      	ldr	r3, [pc, #180]	; (8004df8 <UART_SetConfig+0xac0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d4e:	4b2a      	ldr	r3, [pc, #168]	; (8004df8 <UART_SetConfig+0xac0>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	08db      	lsrs	r3, r3, #3
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	4a28      	ldr	r2, [pc, #160]	; (8004dfc <UART_SetConfig+0xac4>)
 8004d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d60:	e00f      	b.n	8004d82 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004d62:	4b26      	ldr	r3, [pc, #152]	; (8004dfc <UART_SetConfig+0xac4>)
 8004d64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d66:	e00c      	b.n	8004d82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004d68:	4b25      	ldr	r3, [pc, #148]	; (8004e00 <UART_SetConfig+0xac8>)
 8004d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d6c:	e009      	b.n	8004d82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d74:	e005      	b.n	8004d82 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004d80:	bf00      	nop
    }

    if (pclk != 0U)
 8004d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d021      	beq.n	8004dcc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	4a1d      	ldr	r2, [pc, #116]	; (8004e04 <UART_SetConfig+0xacc>)
 8004d8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d92:	461a      	mov	r2, r3
 8004d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d96:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	085b      	lsrs	r3, r3, #1
 8004da0:	441a      	add	r2, r3
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004daa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dae:	2b0f      	cmp	r3, #15
 8004db0:	d909      	bls.n	8004dc6 <UART_SetConfig+0xa8e>
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db8:	d205      	bcs.n	8004dc6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60da      	str	r2, [r3, #12]
 8004dc4:	e002      	b.n	8004dcc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	2200      	movs	r2, #0
 8004de0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2200      	movs	r2, #0
 8004de6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004de8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3748      	adds	r7, #72	; 0x48
 8004df0:	46bd      	mov	sp, r7
 8004df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004df6:	bf00      	nop
 8004df8:	58024400 	.word	0x58024400
 8004dfc:	03d09000 	.word	0x03d09000
 8004e00:	003d0900 	.word	0x003d0900
 8004e04:	08006408 	.word	0x08006408

08004e08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00a      	beq.n	8004e98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9c:	f003 0310 	and.w	r3, r3, #16
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00a      	beq.n	8004eba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01a      	beq.n	8004f1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f06:	d10a      	bne.n	8004f1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	605a      	str	r2, [r3, #4]
  }
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b098      	sub	sp, #96	; 0x60
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f5c:	f7fb ff64 	bl	8000e28 <HAL_GetTick>
 8004f60:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d12f      	bne.n	8004fd0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f88e 	bl	80050a0 <UART_WaitOnFlagUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d022      	beq.n	8004fd0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f92:	e853 3f00 	ldrex	r3, [r3]
 8004f96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f9e:	653b      	str	r3, [r7, #80]	; 0x50
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fa8:	647b      	str	r3, [r7, #68]	; 0x44
 8004faa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e6      	bne.n	8004f8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e063      	b.n	8005098 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d149      	bne.n	8005072 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fde:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f857 	bl	80050a0 <UART_WaitOnFlagUntilTimeout>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d03c      	beq.n	8005072 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	e853 3f00 	ldrex	r3, [r3]
 8005004:	623b      	str	r3, [r7, #32]
   return(result);
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800500c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005016:	633b      	str	r3, [r7, #48]	; 0x30
 8005018:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800501c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800501e:	e841 2300 	strex	r3, r2, [r1]
 8005022:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1e6      	bne.n	8004ff8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3308      	adds	r3, #8
 8005030:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	e853 3f00 	ldrex	r3, [r3]
 8005038:	60fb      	str	r3, [r7, #12]
   return(result);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f023 0301 	bic.w	r3, r3, #1
 8005040:	64bb      	str	r3, [r7, #72]	; 0x48
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3308      	adds	r3, #8
 8005048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800504a:	61fa      	str	r2, [r7, #28]
 800504c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	69b9      	ldr	r1, [r7, #24]
 8005050:	69fa      	ldr	r2, [r7, #28]
 8005052:	e841 2300 	strex	r3, r2, [r1]
 8005056:	617b      	str	r3, [r7, #20]
   return(result);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e5      	bne.n	800502a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e012      	b.n	8005098 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2220      	movs	r2, #32
 8005076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3758      	adds	r7, #88	; 0x58
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	4613      	mov	r3, r2
 80050ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b0:	e049      	b.n	8005146 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b8:	d045      	beq.n	8005146 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ba:	f7fb feb5 	bl	8000e28 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d302      	bcc.n	80050d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e048      	b.n	8005166 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d031      	beq.n	8005146 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	f003 0308 	and.w	r3, r3, #8
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	d110      	bne.n	8005112 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2208      	movs	r2, #8
 80050f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 f839 	bl	8005170 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2208      	movs	r2, #8
 8005102:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e029      	b.n	8005166 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800511c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005120:	d111      	bne.n	8005146 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800512a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f81f 	bl	8005170 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2220      	movs	r2, #32
 8005136:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e00f      	b.n	8005166 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69da      	ldr	r2, [r3, #28]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	4013      	ands	r3, r2
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	429a      	cmp	r2, r3
 8005154:	bf0c      	ite	eq
 8005156:	2301      	moveq	r3, #1
 8005158:	2300      	movne	r3, #0
 800515a:	b2db      	uxtb	r3, r3
 800515c:	461a      	mov	r2, r3
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	429a      	cmp	r2, r3
 8005162:	d0a6      	beq.n	80050b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005170:	b480      	push	{r7}
 8005172:	b095      	sub	sp, #84	; 0x54
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800518c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	461a      	mov	r2, r3
 8005194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005196:	643b      	str	r3, [r7, #64]	; 0x40
 8005198:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800519c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800519e:	e841 2300 	strex	r3, r2, [r1]
 80051a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1e6      	bne.n	8005178 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	3308      	adds	r3, #8
 80051b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	e853 3f00 	ldrex	r3, [r3]
 80051b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80051ba:	69fa      	ldr	r2, [r7, #28]
 80051bc:	4b1e      	ldr	r3, [pc, #120]	; (8005238 <UART_EndRxTransfer+0xc8>)
 80051be:	4013      	ands	r3, r2
 80051c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3308      	adds	r3, #8
 80051c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e5      	bne.n	80051aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d118      	bne.n	8005218 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	e853 3f00 	ldrex	r3, [r3]
 80051f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f023 0310 	bic.w	r3, r3, #16
 80051fa:	647b      	str	r3, [r7, #68]	; 0x44
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	461a      	mov	r2, r3
 8005202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005204:	61bb      	str	r3, [r7, #24]
 8005206:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005208:	6979      	ldr	r1, [r7, #20]
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	e841 2300 	strex	r3, r2, [r1]
 8005210:	613b      	str	r3, [r7, #16]
   return(result);
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e6      	bne.n	80051e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800522c:	bf00      	nop
 800522e:	3754      	adds	r7, #84	; 0x54
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	effffffe 	.word	0xeffffffe

0800523c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800524a:	2b01      	cmp	r3, #1
 800524c:	d101      	bne.n	8005252 <HAL_UARTEx_DisableFifoMode+0x16>
 800524e:	2302      	movs	r3, #2
 8005250:	e027      	b.n	80052a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2224      	movs	r2, #36	; 0x24
 800525e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0201 	bic.w	r2, r2, #1
 8005278:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005280:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2220      	movs	r2, #32
 8005294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b084      	sub	sp, #16
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e02d      	b.n	8005322 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2224      	movs	r2, #36	; 0x24
 80052d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0201 	bic.w	r2, r2, #1
 80052ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f850 	bl	80053a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2220      	movs	r2, #32
 8005314:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b084      	sub	sp, #16
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800533e:	2302      	movs	r3, #2
 8005340:	e02d      	b.n	800539e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2224      	movs	r2, #36	; 0x24
 800534e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0201 	bic.w	r2, r2, #1
 8005368:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f812 	bl	80053a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2220      	movs	r2, #32
 8005390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
	...

080053a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d108      	bne.n	80053ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80053c8:	e031      	b.n	800542e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80053ca:	2310      	movs	r3, #16
 80053cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80053ce:	2310      	movs	r3, #16
 80053d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	0e5b      	lsrs	r3, r3, #25
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	0f5b      	lsrs	r3, r3, #29
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053f2:	7bbb      	ldrb	r3, [r7, #14]
 80053f4:	7b3a      	ldrb	r2, [r7, #12]
 80053f6:	4911      	ldr	r1, [pc, #68]	; (800543c <UARTEx_SetNbDataToProcess+0x94>)
 80053f8:	5c8a      	ldrb	r2, [r1, r2]
 80053fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80053fe:	7b3a      	ldrb	r2, [r7, #12]
 8005400:	490f      	ldr	r1, [pc, #60]	; (8005440 <UARTEx_SetNbDataToProcess+0x98>)
 8005402:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005404:	fb93 f3f2 	sdiv	r3, r3, r2
 8005408:	b29a      	uxth	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005410:	7bfb      	ldrb	r3, [r7, #15]
 8005412:	7b7a      	ldrb	r2, [r7, #13]
 8005414:	4909      	ldr	r1, [pc, #36]	; (800543c <UARTEx_SetNbDataToProcess+0x94>)
 8005416:	5c8a      	ldrb	r2, [r1, r2]
 8005418:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800541c:	7b7a      	ldrb	r2, [r7, #13]
 800541e:	4908      	ldr	r1, [pc, #32]	; (8005440 <UARTEx_SetNbDataToProcess+0x98>)
 8005420:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005422:	fb93 f3f2 	sdiv	r3, r3, r2
 8005426:	b29a      	uxth	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800542e:	bf00      	nop
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	08006420 	.word	0x08006420
 8005440:	08006428 	.word	0x08006428

08005444 <__errno>:
 8005444:	4b01      	ldr	r3, [pc, #4]	; (800544c <__errno+0x8>)
 8005446:	6818      	ldr	r0, [r3, #0]
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	24000010 	.word	0x24000010

08005450 <__libc_init_array>:
 8005450:	b570      	push	{r4, r5, r6, lr}
 8005452:	4d0d      	ldr	r5, [pc, #52]	; (8005488 <__libc_init_array+0x38>)
 8005454:	4c0d      	ldr	r4, [pc, #52]	; (800548c <__libc_init_array+0x3c>)
 8005456:	1b64      	subs	r4, r4, r5
 8005458:	10a4      	asrs	r4, r4, #2
 800545a:	2600      	movs	r6, #0
 800545c:	42a6      	cmp	r6, r4
 800545e:	d109      	bne.n	8005474 <__libc_init_array+0x24>
 8005460:	4d0b      	ldr	r5, [pc, #44]	; (8005490 <__libc_init_array+0x40>)
 8005462:	4c0c      	ldr	r4, [pc, #48]	; (8005494 <__libc_init_array+0x44>)
 8005464:	f000 ffae 	bl	80063c4 <_init>
 8005468:	1b64      	subs	r4, r4, r5
 800546a:	10a4      	asrs	r4, r4, #2
 800546c:	2600      	movs	r6, #0
 800546e:	42a6      	cmp	r6, r4
 8005470:	d105      	bne.n	800547e <__libc_init_array+0x2e>
 8005472:	bd70      	pop	{r4, r5, r6, pc}
 8005474:	f855 3b04 	ldr.w	r3, [r5], #4
 8005478:	4798      	blx	r3
 800547a:	3601      	adds	r6, #1
 800547c:	e7ee      	b.n	800545c <__libc_init_array+0xc>
 800547e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005482:	4798      	blx	r3
 8005484:	3601      	adds	r6, #1
 8005486:	e7f2      	b.n	800546e <__libc_init_array+0x1e>
 8005488:	080064d0 	.word	0x080064d0
 800548c:	080064d0 	.word	0x080064d0
 8005490:	080064d0 	.word	0x080064d0
 8005494:	080064d4 	.word	0x080064d4

08005498 <memset>:
 8005498:	4402      	add	r2, r0
 800549a:	4603      	mov	r3, r0
 800549c:	4293      	cmp	r3, r2
 800549e:	d100      	bne.n	80054a2 <memset+0xa>
 80054a0:	4770      	bx	lr
 80054a2:	f803 1b01 	strb.w	r1, [r3], #1
 80054a6:	e7f9      	b.n	800549c <memset+0x4>

080054a8 <iprintf>:
 80054a8:	b40f      	push	{r0, r1, r2, r3}
 80054aa:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <iprintf+0x2c>)
 80054ac:	b513      	push	{r0, r1, r4, lr}
 80054ae:	681c      	ldr	r4, [r3, #0]
 80054b0:	b124      	cbz	r4, 80054bc <iprintf+0x14>
 80054b2:	69a3      	ldr	r3, [r4, #24]
 80054b4:	b913      	cbnz	r3, 80054bc <iprintf+0x14>
 80054b6:	4620      	mov	r0, r4
 80054b8:	f000 f866 	bl	8005588 <__sinit>
 80054bc:	ab05      	add	r3, sp, #20
 80054be:	9a04      	ldr	r2, [sp, #16]
 80054c0:	68a1      	ldr	r1, [r4, #8]
 80054c2:	9301      	str	r3, [sp, #4]
 80054c4:	4620      	mov	r0, r4
 80054c6:	f000 f9bd 	bl	8005844 <_vfiprintf_r>
 80054ca:	b002      	add	sp, #8
 80054cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054d0:	b004      	add	sp, #16
 80054d2:	4770      	bx	lr
 80054d4:	24000010 	.word	0x24000010

080054d8 <std>:
 80054d8:	2300      	movs	r3, #0
 80054da:	b510      	push	{r4, lr}
 80054dc:	4604      	mov	r4, r0
 80054de:	e9c0 3300 	strd	r3, r3, [r0]
 80054e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054e6:	6083      	str	r3, [r0, #8]
 80054e8:	8181      	strh	r1, [r0, #12]
 80054ea:	6643      	str	r3, [r0, #100]	; 0x64
 80054ec:	81c2      	strh	r2, [r0, #14]
 80054ee:	6183      	str	r3, [r0, #24]
 80054f0:	4619      	mov	r1, r3
 80054f2:	2208      	movs	r2, #8
 80054f4:	305c      	adds	r0, #92	; 0x5c
 80054f6:	f7ff ffcf 	bl	8005498 <memset>
 80054fa:	4b05      	ldr	r3, [pc, #20]	; (8005510 <std+0x38>)
 80054fc:	6263      	str	r3, [r4, #36]	; 0x24
 80054fe:	4b05      	ldr	r3, [pc, #20]	; (8005514 <std+0x3c>)
 8005500:	62a3      	str	r3, [r4, #40]	; 0x28
 8005502:	4b05      	ldr	r3, [pc, #20]	; (8005518 <std+0x40>)
 8005504:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005506:	4b05      	ldr	r3, [pc, #20]	; (800551c <std+0x44>)
 8005508:	6224      	str	r4, [r4, #32]
 800550a:	6323      	str	r3, [r4, #48]	; 0x30
 800550c:	bd10      	pop	{r4, pc}
 800550e:	bf00      	nop
 8005510:	08005ded 	.word	0x08005ded
 8005514:	08005e0f 	.word	0x08005e0f
 8005518:	08005e47 	.word	0x08005e47
 800551c:	08005e6b 	.word	0x08005e6b

08005520 <_cleanup_r>:
 8005520:	4901      	ldr	r1, [pc, #4]	; (8005528 <_cleanup_r+0x8>)
 8005522:	f000 b8af 	b.w	8005684 <_fwalk_reent>
 8005526:	bf00      	nop
 8005528:	08006145 	.word	0x08006145

0800552c <__sfmoreglue>:
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	2268      	movs	r2, #104	; 0x68
 8005530:	1e4d      	subs	r5, r1, #1
 8005532:	4355      	muls	r5, r2
 8005534:	460e      	mov	r6, r1
 8005536:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800553a:	f000 f8e5 	bl	8005708 <_malloc_r>
 800553e:	4604      	mov	r4, r0
 8005540:	b140      	cbz	r0, 8005554 <__sfmoreglue+0x28>
 8005542:	2100      	movs	r1, #0
 8005544:	e9c0 1600 	strd	r1, r6, [r0]
 8005548:	300c      	adds	r0, #12
 800554a:	60a0      	str	r0, [r4, #8]
 800554c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005550:	f7ff ffa2 	bl	8005498 <memset>
 8005554:	4620      	mov	r0, r4
 8005556:	bd70      	pop	{r4, r5, r6, pc}

08005558 <__sfp_lock_acquire>:
 8005558:	4801      	ldr	r0, [pc, #4]	; (8005560 <__sfp_lock_acquire+0x8>)
 800555a:	f000 b8b3 	b.w	80056c4 <__retarget_lock_acquire_recursive>
 800555e:	bf00      	nop
 8005560:	2400012d 	.word	0x2400012d

08005564 <__sfp_lock_release>:
 8005564:	4801      	ldr	r0, [pc, #4]	; (800556c <__sfp_lock_release+0x8>)
 8005566:	f000 b8ae 	b.w	80056c6 <__retarget_lock_release_recursive>
 800556a:	bf00      	nop
 800556c:	2400012d 	.word	0x2400012d

08005570 <__sinit_lock_acquire>:
 8005570:	4801      	ldr	r0, [pc, #4]	; (8005578 <__sinit_lock_acquire+0x8>)
 8005572:	f000 b8a7 	b.w	80056c4 <__retarget_lock_acquire_recursive>
 8005576:	bf00      	nop
 8005578:	2400012e 	.word	0x2400012e

0800557c <__sinit_lock_release>:
 800557c:	4801      	ldr	r0, [pc, #4]	; (8005584 <__sinit_lock_release+0x8>)
 800557e:	f000 b8a2 	b.w	80056c6 <__retarget_lock_release_recursive>
 8005582:	bf00      	nop
 8005584:	2400012e 	.word	0x2400012e

08005588 <__sinit>:
 8005588:	b510      	push	{r4, lr}
 800558a:	4604      	mov	r4, r0
 800558c:	f7ff fff0 	bl	8005570 <__sinit_lock_acquire>
 8005590:	69a3      	ldr	r3, [r4, #24]
 8005592:	b11b      	cbz	r3, 800559c <__sinit+0x14>
 8005594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005598:	f7ff bff0 	b.w	800557c <__sinit_lock_release>
 800559c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80055a0:	6523      	str	r3, [r4, #80]	; 0x50
 80055a2:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <__sinit+0x68>)
 80055a4:	4a13      	ldr	r2, [pc, #76]	; (80055f4 <__sinit+0x6c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80055aa:	42a3      	cmp	r3, r4
 80055ac:	bf04      	itt	eq
 80055ae:	2301      	moveq	r3, #1
 80055b0:	61a3      	streq	r3, [r4, #24]
 80055b2:	4620      	mov	r0, r4
 80055b4:	f000 f820 	bl	80055f8 <__sfp>
 80055b8:	6060      	str	r0, [r4, #4]
 80055ba:	4620      	mov	r0, r4
 80055bc:	f000 f81c 	bl	80055f8 <__sfp>
 80055c0:	60a0      	str	r0, [r4, #8]
 80055c2:	4620      	mov	r0, r4
 80055c4:	f000 f818 	bl	80055f8 <__sfp>
 80055c8:	2200      	movs	r2, #0
 80055ca:	60e0      	str	r0, [r4, #12]
 80055cc:	2104      	movs	r1, #4
 80055ce:	6860      	ldr	r0, [r4, #4]
 80055d0:	f7ff ff82 	bl	80054d8 <std>
 80055d4:	68a0      	ldr	r0, [r4, #8]
 80055d6:	2201      	movs	r2, #1
 80055d8:	2109      	movs	r1, #9
 80055da:	f7ff ff7d 	bl	80054d8 <std>
 80055de:	68e0      	ldr	r0, [r4, #12]
 80055e0:	2202      	movs	r2, #2
 80055e2:	2112      	movs	r1, #18
 80055e4:	f7ff ff78 	bl	80054d8 <std>
 80055e8:	2301      	movs	r3, #1
 80055ea:	61a3      	str	r3, [r4, #24]
 80055ec:	e7d2      	b.n	8005594 <__sinit+0xc>
 80055ee:	bf00      	nop
 80055f0:	08006430 	.word	0x08006430
 80055f4:	08005521 	.word	0x08005521

080055f8 <__sfp>:
 80055f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fa:	4607      	mov	r7, r0
 80055fc:	f7ff ffac 	bl	8005558 <__sfp_lock_acquire>
 8005600:	4b1e      	ldr	r3, [pc, #120]	; (800567c <__sfp+0x84>)
 8005602:	681e      	ldr	r6, [r3, #0]
 8005604:	69b3      	ldr	r3, [r6, #24]
 8005606:	b913      	cbnz	r3, 800560e <__sfp+0x16>
 8005608:	4630      	mov	r0, r6
 800560a:	f7ff ffbd 	bl	8005588 <__sinit>
 800560e:	3648      	adds	r6, #72	; 0x48
 8005610:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005614:	3b01      	subs	r3, #1
 8005616:	d503      	bpl.n	8005620 <__sfp+0x28>
 8005618:	6833      	ldr	r3, [r6, #0]
 800561a:	b30b      	cbz	r3, 8005660 <__sfp+0x68>
 800561c:	6836      	ldr	r6, [r6, #0]
 800561e:	e7f7      	b.n	8005610 <__sfp+0x18>
 8005620:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005624:	b9d5      	cbnz	r5, 800565c <__sfp+0x64>
 8005626:	4b16      	ldr	r3, [pc, #88]	; (8005680 <__sfp+0x88>)
 8005628:	60e3      	str	r3, [r4, #12]
 800562a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800562e:	6665      	str	r5, [r4, #100]	; 0x64
 8005630:	f000 f847 	bl	80056c2 <__retarget_lock_init_recursive>
 8005634:	f7ff ff96 	bl	8005564 <__sfp_lock_release>
 8005638:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800563c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005640:	6025      	str	r5, [r4, #0]
 8005642:	61a5      	str	r5, [r4, #24]
 8005644:	2208      	movs	r2, #8
 8005646:	4629      	mov	r1, r5
 8005648:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800564c:	f7ff ff24 	bl	8005498 <memset>
 8005650:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005654:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005658:	4620      	mov	r0, r4
 800565a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800565c:	3468      	adds	r4, #104	; 0x68
 800565e:	e7d9      	b.n	8005614 <__sfp+0x1c>
 8005660:	2104      	movs	r1, #4
 8005662:	4638      	mov	r0, r7
 8005664:	f7ff ff62 	bl	800552c <__sfmoreglue>
 8005668:	4604      	mov	r4, r0
 800566a:	6030      	str	r0, [r6, #0]
 800566c:	2800      	cmp	r0, #0
 800566e:	d1d5      	bne.n	800561c <__sfp+0x24>
 8005670:	f7ff ff78 	bl	8005564 <__sfp_lock_release>
 8005674:	230c      	movs	r3, #12
 8005676:	603b      	str	r3, [r7, #0]
 8005678:	e7ee      	b.n	8005658 <__sfp+0x60>
 800567a:	bf00      	nop
 800567c:	08006430 	.word	0x08006430
 8005680:	ffff0001 	.word	0xffff0001

08005684 <_fwalk_reent>:
 8005684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005688:	4606      	mov	r6, r0
 800568a:	4688      	mov	r8, r1
 800568c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005690:	2700      	movs	r7, #0
 8005692:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005696:	f1b9 0901 	subs.w	r9, r9, #1
 800569a:	d505      	bpl.n	80056a8 <_fwalk_reent+0x24>
 800569c:	6824      	ldr	r4, [r4, #0]
 800569e:	2c00      	cmp	r4, #0
 80056a0:	d1f7      	bne.n	8005692 <_fwalk_reent+0xe>
 80056a2:	4638      	mov	r0, r7
 80056a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056a8:	89ab      	ldrh	r3, [r5, #12]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d907      	bls.n	80056be <_fwalk_reent+0x3a>
 80056ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056b2:	3301      	adds	r3, #1
 80056b4:	d003      	beq.n	80056be <_fwalk_reent+0x3a>
 80056b6:	4629      	mov	r1, r5
 80056b8:	4630      	mov	r0, r6
 80056ba:	47c0      	blx	r8
 80056bc:	4307      	orrs	r7, r0
 80056be:	3568      	adds	r5, #104	; 0x68
 80056c0:	e7e9      	b.n	8005696 <_fwalk_reent+0x12>

080056c2 <__retarget_lock_init_recursive>:
 80056c2:	4770      	bx	lr

080056c4 <__retarget_lock_acquire_recursive>:
 80056c4:	4770      	bx	lr

080056c6 <__retarget_lock_release_recursive>:
 80056c6:	4770      	bx	lr

080056c8 <sbrk_aligned>:
 80056c8:	b570      	push	{r4, r5, r6, lr}
 80056ca:	4e0e      	ldr	r6, [pc, #56]	; (8005704 <sbrk_aligned+0x3c>)
 80056cc:	460c      	mov	r4, r1
 80056ce:	6831      	ldr	r1, [r6, #0]
 80056d0:	4605      	mov	r5, r0
 80056d2:	b911      	cbnz	r1, 80056da <sbrk_aligned+0x12>
 80056d4:	f000 fb7a 	bl	8005dcc <_sbrk_r>
 80056d8:	6030      	str	r0, [r6, #0]
 80056da:	4621      	mov	r1, r4
 80056dc:	4628      	mov	r0, r5
 80056de:	f000 fb75 	bl	8005dcc <_sbrk_r>
 80056e2:	1c43      	adds	r3, r0, #1
 80056e4:	d00a      	beq.n	80056fc <sbrk_aligned+0x34>
 80056e6:	1cc4      	adds	r4, r0, #3
 80056e8:	f024 0403 	bic.w	r4, r4, #3
 80056ec:	42a0      	cmp	r0, r4
 80056ee:	d007      	beq.n	8005700 <sbrk_aligned+0x38>
 80056f0:	1a21      	subs	r1, r4, r0
 80056f2:	4628      	mov	r0, r5
 80056f4:	f000 fb6a 	bl	8005dcc <_sbrk_r>
 80056f8:	3001      	adds	r0, #1
 80056fa:	d101      	bne.n	8005700 <sbrk_aligned+0x38>
 80056fc:	f04f 34ff 	mov.w	r4, #4294967295
 8005700:	4620      	mov	r0, r4
 8005702:	bd70      	pop	{r4, r5, r6, pc}
 8005704:	24000134 	.word	0x24000134

08005708 <_malloc_r>:
 8005708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800570c:	1ccd      	adds	r5, r1, #3
 800570e:	f025 0503 	bic.w	r5, r5, #3
 8005712:	3508      	adds	r5, #8
 8005714:	2d0c      	cmp	r5, #12
 8005716:	bf38      	it	cc
 8005718:	250c      	movcc	r5, #12
 800571a:	2d00      	cmp	r5, #0
 800571c:	4607      	mov	r7, r0
 800571e:	db01      	blt.n	8005724 <_malloc_r+0x1c>
 8005720:	42a9      	cmp	r1, r5
 8005722:	d905      	bls.n	8005730 <_malloc_r+0x28>
 8005724:	230c      	movs	r3, #12
 8005726:	603b      	str	r3, [r7, #0]
 8005728:	2600      	movs	r6, #0
 800572a:	4630      	mov	r0, r6
 800572c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005730:	4e2e      	ldr	r6, [pc, #184]	; (80057ec <_malloc_r+0xe4>)
 8005732:	f000 fdbb 	bl	80062ac <__malloc_lock>
 8005736:	6833      	ldr	r3, [r6, #0]
 8005738:	461c      	mov	r4, r3
 800573a:	bb34      	cbnz	r4, 800578a <_malloc_r+0x82>
 800573c:	4629      	mov	r1, r5
 800573e:	4638      	mov	r0, r7
 8005740:	f7ff ffc2 	bl	80056c8 <sbrk_aligned>
 8005744:	1c43      	adds	r3, r0, #1
 8005746:	4604      	mov	r4, r0
 8005748:	d14d      	bne.n	80057e6 <_malloc_r+0xde>
 800574a:	6834      	ldr	r4, [r6, #0]
 800574c:	4626      	mov	r6, r4
 800574e:	2e00      	cmp	r6, #0
 8005750:	d140      	bne.n	80057d4 <_malloc_r+0xcc>
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	4631      	mov	r1, r6
 8005756:	4638      	mov	r0, r7
 8005758:	eb04 0803 	add.w	r8, r4, r3
 800575c:	f000 fb36 	bl	8005dcc <_sbrk_r>
 8005760:	4580      	cmp	r8, r0
 8005762:	d13a      	bne.n	80057da <_malloc_r+0xd2>
 8005764:	6821      	ldr	r1, [r4, #0]
 8005766:	3503      	adds	r5, #3
 8005768:	1a6d      	subs	r5, r5, r1
 800576a:	f025 0503 	bic.w	r5, r5, #3
 800576e:	3508      	adds	r5, #8
 8005770:	2d0c      	cmp	r5, #12
 8005772:	bf38      	it	cc
 8005774:	250c      	movcc	r5, #12
 8005776:	4629      	mov	r1, r5
 8005778:	4638      	mov	r0, r7
 800577a:	f7ff ffa5 	bl	80056c8 <sbrk_aligned>
 800577e:	3001      	adds	r0, #1
 8005780:	d02b      	beq.n	80057da <_malloc_r+0xd2>
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	442b      	add	r3, r5
 8005786:	6023      	str	r3, [r4, #0]
 8005788:	e00e      	b.n	80057a8 <_malloc_r+0xa0>
 800578a:	6822      	ldr	r2, [r4, #0]
 800578c:	1b52      	subs	r2, r2, r5
 800578e:	d41e      	bmi.n	80057ce <_malloc_r+0xc6>
 8005790:	2a0b      	cmp	r2, #11
 8005792:	d916      	bls.n	80057c2 <_malloc_r+0xba>
 8005794:	1961      	adds	r1, r4, r5
 8005796:	42a3      	cmp	r3, r4
 8005798:	6025      	str	r5, [r4, #0]
 800579a:	bf18      	it	ne
 800579c:	6059      	strne	r1, [r3, #4]
 800579e:	6863      	ldr	r3, [r4, #4]
 80057a0:	bf08      	it	eq
 80057a2:	6031      	streq	r1, [r6, #0]
 80057a4:	5162      	str	r2, [r4, r5]
 80057a6:	604b      	str	r3, [r1, #4]
 80057a8:	4638      	mov	r0, r7
 80057aa:	f104 060b 	add.w	r6, r4, #11
 80057ae:	f000 fd83 	bl	80062b8 <__malloc_unlock>
 80057b2:	f026 0607 	bic.w	r6, r6, #7
 80057b6:	1d23      	adds	r3, r4, #4
 80057b8:	1af2      	subs	r2, r6, r3
 80057ba:	d0b6      	beq.n	800572a <_malloc_r+0x22>
 80057bc:	1b9b      	subs	r3, r3, r6
 80057be:	50a3      	str	r3, [r4, r2]
 80057c0:	e7b3      	b.n	800572a <_malloc_r+0x22>
 80057c2:	6862      	ldr	r2, [r4, #4]
 80057c4:	42a3      	cmp	r3, r4
 80057c6:	bf0c      	ite	eq
 80057c8:	6032      	streq	r2, [r6, #0]
 80057ca:	605a      	strne	r2, [r3, #4]
 80057cc:	e7ec      	b.n	80057a8 <_malloc_r+0xa0>
 80057ce:	4623      	mov	r3, r4
 80057d0:	6864      	ldr	r4, [r4, #4]
 80057d2:	e7b2      	b.n	800573a <_malloc_r+0x32>
 80057d4:	4634      	mov	r4, r6
 80057d6:	6876      	ldr	r6, [r6, #4]
 80057d8:	e7b9      	b.n	800574e <_malloc_r+0x46>
 80057da:	230c      	movs	r3, #12
 80057dc:	603b      	str	r3, [r7, #0]
 80057de:	4638      	mov	r0, r7
 80057e0:	f000 fd6a 	bl	80062b8 <__malloc_unlock>
 80057e4:	e7a1      	b.n	800572a <_malloc_r+0x22>
 80057e6:	6025      	str	r5, [r4, #0]
 80057e8:	e7de      	b.n	80057a8 <_malloc_r+0xa0>
 80057ea:	bf00      	nop
 80057ec:	24000130 	.word	0x24000130

080057f0 <__sfputc_r>:
 80057f0:	6893      	ldr	r3, [r2, #8]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	b410      	push	{r4}
 80057f8:	6093      	str	r3, [r2, #8]
 80057fa:	da08      	bge.n	800580e <__sfputc_r+0x1e>
 80057fc:	6994      	ldr	r4, [r2, #24]
 80057fe:	42a3      	cmp	r3, r4
 8005800:	db01      	blt.n	8005806 <__sfputc_r+0x16>
 8005802:	290a      	cmp	r1, #10
 8005804:	d103      	bne.n	800580e <__sfputc_r+0x1e>
 8005806:	f85d 4b04 	ldr.w	r4, [sp], #4
 800580a:	f000 bb33 	b.w	8005e74 <__swbuf_r>
 800580e:	6813      	ldr	r3, [r2, #0]
 8005810:	1c58      	adds	r0, r3, #1
 8005812:	6010      	str	r0, [r2, #0]
 8005814:	7019      	strb	r1, [r3, #0]
 8005816:	4608      	mov	r0, r1
 8005818:	f85d 4b04 	ldr.w	r4, [sp], #4
 800581c:	4770      	bx	lr

0800581e <__sfputs_r>:
 800581e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005820:	4606      	mov	r6, r0
 8005822:	460f      	mov	r7, r1
 8005824:	4614      	mov	r4, r2
 8005826:	18d5      	adds	r5, r2, r3
 8005828:	42ac      	cmp	r4, r5
 800582a:	d101      	bne.n	8005830 <__sfputs_r+0x12>
 800582c:	2000      	movs	r0, #0
 800582e:	e007      	b.n	8005840 <__sfputs_r+0x22>
 8005830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005834:	463a      	mov	r2, r7
 8005836:	4630      	mov	r0, r6
 8005838:	f7ff ffda 	bl	80057f0 <__sfputc_r>
 800583c:	1c43      	adds	r3, r0, #1
 800583e:	d1f3      	bne.n	8005828 <__sfputs_r+0xa>
 8005840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005844 <_vfiprintf_r>:
 8005844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005848:	460d      	mov	r5, r1
 800584a:	b09d      	sub	sp, #116	; 0x74
 800584c:	4614      	mov	r4, r2
 800584e:	4698      	mov	r8, r3
 8005850:	4606      	mov	r6, r0
 8005852:	b118      	cbz	r0, 800585c <_vfiprintf_r+0x18>
 8005854:	6983      	ldr	r3, [r0, #24]
 8005856:	b90b      	cbnz	r3, 800585c <_vfiprintf_r+0x18>
 8005858:	f7ff fe96 	bl	8005588 <__sinit>
 800585c:	4b89      	ldr	r3, [pc, #548]	; (8005a84 <_vfiprintf_r+0x240>)
 800585e:	429d      	cmp	r5, r3
 8005860:	d11b      	bne.n	800589a <_vfiprintf_r+0x56>
 8005862:	6875      	ldr	r5, [r6, #4]
 8005864:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005866:	07d9      	lsls	r1, r3, #31
 8005868:	d405      	bmi.n	8005876 <_vfiprintf_r+0x32>
 800586a:	89ab      	ldrh	r3, [r5, #12]
 800586c:	059a      	lsls	r2, r3, #22
 800586e:	d402      	bmi.n	8005876 <_vfiprintf_r+0x32>
 8005870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005872:	f7ff ff27 	bl	80056c4 <__retarget_lock_acquire_recursive>
 8005876:	89ab      	ldrh	r3, [r5, #12]
 8005878:	071b      	lsls	r3, r3, #28
 800587a:	d501      	bpl.n	8005880 <_vfiprintf_r+0x3c>
 800587c:	692b      	ldr	r3, [r5, #16]
 800587e:	b9eb      	cbnz	r3, 80058bc <_vfiprintf_r+0x78>
 8005880:	4629      	mov	r1, r5
 8005882:	4630      	mov	r0, r6
 8005884:	f000 fb5a 	bl	8005f3c <__swsetup_r>
 8005888:	b1c0      	cbz	r0, 80058bc <_vfiprintf_r+0x78>
 800588a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800588c:	07dc      	lsls	r4, r3, #31
 800588e:	d50e      	bpl.n	80058ae <_vfiprintf_r+0x6a>
 8005890:	f04f 30ff 	mov.w	r0, #4294967295
 8005894:	b01d      	add	sp, #116	; 0x74
 8005896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800589a:	4b7b      	ldr	r3, [pc, #492]	; (8005a88 <_vfiprintf_r+0x244>)
 800589c:	429d      	cmp	r5, r3
 800589e:	d101      	bne.n	80058a4 <_vfiprintf_r+0x60>
 80058a0:	68b5      	ldr	r5, [r6, #8]
 80058a2:	e7df      	b.n	8005864 <_vfiprintf_r+0x20>
 80058a4:	4b79      	ldr	r3, [pc, #484]	; (8005a8c <_vfiprintf_r+0x248>)
 80058a6:	429d      	cmp	r5, r3
 80058a8:	bf08      	it	eq
 80058aa:	68f5      	ldreq	r5, [r6, #12]
 80058ac:	e7da      	b.n	8005864 <_vfiprintf_r+0x20>
 80058ae:	89ab      	ldrh	r3, [r5, #12]
 80058b0:	0598      	lsls	r0, r3, #22
 80058b2:	d4ed      	bmi.n	8005890 <_vfiprintf_r+0x4c>
 80058b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058b6:	f7ff ff06 	bl	80056c6 <__retarget_lock_release_recursive>
 80058ba:	e7e9      	b.n	8005890 <_vfiprintf_r+0x4c>
 80058bc:	2300      	movs	r3, #0
 80058be:	9309      	str	r3, [sp, #36]	; 0x24
 80058c0:	2320      	movs	r3, #32
 80058c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80058ca:	2330      	movs	r3, #48	; 0x30
 80058cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005a90 <_vfiprintf_r+0x24c>
 80058d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058d4:	f04f 0901 	mov.w	r9, #1
 80058d8:	4623      	mov	r3, r4
 80058da:	469a      	mov	sl, r3
 80058dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058e0:	b10a      	cbz	r2, 80058e6 <_vfiprintf_r+0xa2>
 80058e2:	2a25      	cmp	r2, #37	; 0x25
 80058e4:	d1f9      	bne.n	80058da <_vfiprintf_r+0x96>
 80058e6:	ebba 0b04 	subs.w	fp, sl, r4
 80058ea:	d00b      	beq.n	8005904 <_vfiprintf_r+0xc0>
 80058ec:	465b      	mov	r3, fp
 80058ee:	4622      	mov	r2, r4
 80058f0:	4629      	mov	r1, r5
 80058f2:	4630      	mov	r0, r6
 80058f4:	f7ff ff93 	bl	800581e <__sfputs_r>
 80058f8:	3001      	adds	r0, #1
 80058fa:	f000 80aa 	beq.w	8005a52 <_vfiprintf_r+0x20e>
 80058fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005900:	445a      	add	r2, fp
 8005902:	9209      	str	r2, [sp, #36]	; 0x24
 8005904:	f89a 3000 	ldrb.w	r3, [sl]
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 80a2 	beq.w	8005a52 <_vfiprintf_r+0x20e>
 800590e:	2300      	movs	r3, #0
 8005910:	f04f 32ff 	mov.w	r2, #4294967295
 8005914:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005918:	f10a 0a01 	add.w	sl, sl, #1
 800591c:	9304      	str	r3, [sp, #16]
 800591e:	9307      	str	r3, [sp, #28]
 8005920:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005924:	931a      	str	r3, [sp, #104]	; 0x68
 8005926:	4654      	mov	r4, sl
 8005928:	2205      	movs	r2, #5
 800592a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800592e:	4858      	ldr	r0, [pc, #352]	; (8005a90 <_vfiprintf_r+0x24c>)
 8005930:	f7fa fcd6 	bl	80002e0 <memchr>
 8005934:	9a04      	ldr	r2, [sp, #16]
 8005936:	b9d8      	cbnz	r0, 8005970 <_vfiprintf_r+0x12c>
 8005938:	06d1      	lsls	r1, r2, #27
 800593a:	bf44      	itt	mi
 800593c:	2320      	movmi	r3, #32
 800593e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005942:	0713      	lsls	r3, r2, #28
 8005944:	bf44      	itt	mi
 8005946:	232b      	movmi	r3, #43	; 0x2b
 8005948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800594c:	f89a 3000 	ldrb.w	r3, [sl]
 8005950:	2b2a      	cmp	r3, #42	; 0x2a
 8005952:	d015      	beq.n	8005980 <_vfiprintf_r+0x13c>
 8005954:	9a07      	ldr	r2, [sp, #28]
 8005956:	4654      	mov	r4, sl
 8005958:	2000      	movs	r0, #0
 800595a:	f04f 0c0a 	mov.w	ip, #10
 800595e:	4621      	mov	r1, r4
 8005960:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005964:	3b30      	subs	r3, #48	; 0x30
 8005966:	2b09      	cmp	r3, #9
 8005968:	d94e      	bls.n	8005a08 <_vfiprintf_r+0x1c4>
 800596a:	b1b0      	cbz	r0, 800599a <_vfiprintf_r+0x156>
 800596c:	9207      	str	r2, [sp, #28]
 800596e:	e014      	b.n	800599a <_vfiprintf_r+0x156>
 8005970:	eba0 0308 	sub.w	r3, r0, r8
 8005974:	fa09 f303 	lsl.w	r3, r9, r3
 8005978:	4313      	orrs	r3, r2
 800597a:	9304      	str	r3, [sp, #16]
 800597c:	46a2      	mov	sl, r4
 800597e:	e7d2      	b.n	8005926 <_vfiprintf_r+0xe2>
 8005980:	9b03      	ldr	r3, [sp, #12]
 8005982:	1d19      	adds	r1, r3, #4
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	9103      	str	r1, [sp, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	bfbb      	ittet	lt
 800598c:	425b      	neglt	r3, r3
 800598e:	f042 0202 	orrlt.w	r2, r2, #2
 8005992:	9307      	strge	r3, [sp, #28]
 8005994:	9307      	strlt	r3, [sp, #28]
 8005996:	bfb8      	it	lt
 8005998:	9204      	strlt	r2, [sp, #16]
 800599a:	7823      	ldrb	r3, [r4, #0]
 800599c:	2b2e      	cmp	r3, #46	; 0x2e
 800599e:	d10c      	bne.n	80059ba <_vfiprintf_r+0x176>
 80059a0:	7863      	ldrb	r3, [r4, #1]
 80059a2:	2b2a      	cmp	r3, #42	; 0x2a
 80059a4:	d135      	bne.n	8005a12 <_vfiprintf_r+0x1ce>
 80059a6:	9b03      	ldr	r3, [sp, #12]
 80059a8:	1d1a      	adds	r2, r3, #4
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	9203      	str	r2, [sp, #12]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	bfb8      	it	lt
 80059b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80059b6:	3402      	adds	r4, #2
 80059b8:	9305      	str	r3, [sp, #20]
 80059ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005aa0 <_vfiprintf_r+0x25c>
 80059be:	7821      	ldrb	r1, [r4, #0]
 80059c0:	2203      	movs	r2, #3
 80059c2:	4650      	mov	r0, sl
 80059c4:	f7fa fc8c 	bl	80002e0 <memchr>
 80059c8:	b140      	cbz	r0, 80059dc <_vfiprintf_r+0x198>
 80059ca:	2340      	movs	r3, #64	; 0x40
 80059cc:	eba0 000a 	sub.w	r0, r0, sl
 80059d0:	fa03 f000 	lsl.w	r0, r3, r0
 80059d4:	9b04      	ldr	r3, [sp, #16]
 80059d6:	4303      	orrs	r3, r0
 80059d8:	3401      	adds	r4, #1
 80059da:	9304      	str	r3, [sp, #16]
 80059dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059e0:	482c      	ldr	r0, [pc, #176]	; (8005a94 <_vfiprintf_r+0x250>)
 80059e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059e6:	2206      	movs	r2, #6
 80059e8:	f7fa fc7a 	bl	80002e0 <memchr>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d03f      	beq.n	8005a70 <_vfiprintf_r+0x22c>
 80059f0:	4b29      	ldr	r3, [pc, #164]	; (8005a98 <_vfiprintf_r+0x254>)
 80059f2:	bb1b      	cbnz	r3, 8005a3c <_vfiprintf_r+0x1f8>
 80059f4:	9b03      	ldr	r3, [sp, #12]
 80059f6:	3307      	adds	r3, #7
 80059f8:	f023 0307 	bic.w	r3, r3, #7
 80059fc:	3308      	adds	r3, #8
 80059fe:	9303      	str	r3, [sp, #12]
 8005a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a02:	443b      	add	r3, r7
 8005a04:	9309      	str	r3, [sp, #36]	; 0x24
 8005a06:	e767      	b.n	80058d8 <_vfiprintf_r+0x94>
 8005a08:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a0c:	460c      	mov	r4, r1
 8005a0e:	2001      	movs	r0, #1
 8005a10:	e7a5      	b.n	800595e <_vfiprintf_r+0x11a>
 8005a12:	2300      	movs	r3, #0
 8005a14:	3401      	adds	r4, #1
 8005a16:	9305      	str	r3, [sp, #20]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	f04f 0c0a 	mov.w	ip, #10
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a24:	3a30      	subs	r2, #48	; 0x30
 8005a26:	2a09      	cmp	r2, #9
 8005a28:	d903      	bls.n	8005a32 <_vfiprintf_r+0x1ee>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0c5      	beq.n	80059ba <_vfiprintf_r+0x176>
 8005a2e:	9105      	str	r1, [sp, #20]
 8005a30:	e7c3      	b.n	80059ba <_vfiprintf_r+0x176>
 8005a32:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a36:	4604      	mov	r4, r0
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e7f0      	b.n	8005a1e <_vfiprintf_r+0x1da>
 8005a3c:	ab03      	add	r3, sp, #12
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	462a      	mov	r2, r5
 8005a42:	4b16      	ldr	r3, [pc, #88]	; (8005a9c <_vfiprintf_r+0x258>)
 8005a44:	a904      	add	r1, sp, #16
 8005a46:	4630      	mov	r0, r6
 8005a48:	f3af 8000 	nop.w
 8005a4c:	4607      	mov	r7, r0
 8005a4e:	1c78      	adds	r0, r7, #1
 8005a50:	d1d6      	bne.n	8005a00 <_vfiprintf_r+0x1bc>
 8005a52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a54:	07d9      	lsls	r1, r3, #31
 8005a56:	d405      	bmi.n	8005a64 <_vfiprintf_r+0x220>
 8005a58:	89ab      	ldrh	r3, [r5, #12]
 8005a5a:	059a      	lsls	r2, r3, #22
 8005a5c:	d402      	bmi.n	8005a64 <_vfiprintf_r+0x220>
 8005a5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a60:	f7ff fe31 	bl	80056c6 <__retarget_lock_release_recursive>
 8005a64:	89ab      	ldrh	r3, [r5, #12]
 8005a66:	065b      	lsls	r3, r3, #25
 8005a68:	f53f af12 	bmi.w	8005890 <_vfiprintf_r+0x4c>
 8005a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a6e:	e711      	b.n	8005894 <_vfiprintf_r+0x50>
 8005a70:	ab03      	add	r3, sp, #12
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	462a      	mov	r2, r5
 8005a76:	4b09      	ldr	r3, [pc, #36]	; (8005a9c <_vfiprintf_r+0x258>)
 8005a78:	a904      	add	r1, sp, #16
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	f000 f880 	bl	8005b80 <_printf_i>
 8005a80:	e7e4      	b.n	8005a4c <_vfiprintf_r+0x208>
 8005a82:	bf00      	nop
 8005a84:	08006454 	.word	0x08006454
 8005a88:	08006474 	.word	0x08006474
 8005a8c:	08006434 	.word	0x08006434
 8005a90:	08006494 	.word	0x08006494
 8005a94:	0800649e 	.word	0x0800649e
 8005a98:	00000000 	.word	0x00000000
 8005a9c:	0800581f 	.word	0x0800581f
 8005aa0:	0800649a 	.word	0x0800649a

08005aa4 <_printf_common>:
 8005aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa8:	4616      	mov	r6, r2
 8005aaa:	4699      	mov	r9, r3
 8005aac:	688a      	ldr	r2, [r1, #8]
 8005aae:	690b      	ldr	r3, [r1, #16]
 8005ab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	bfb8      	it	lt
 8005ab8:	4613      	movlt	r3, r2
 8005aba:	6033      	str	r3, [r6, #0]
 8005abc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ac0:	4607      	mov	r7, r0
 8005ac2:	460c      	mov	r4, r1
 8005ac4:	b10a      	cbz	r2, 8005aca <_printf_common+0x26>
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	6033      	str	r3, [r6, #0]
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	0699      	lsls	r1, r3, #26
 8005ace:	bf42      	ittt	mi
 8005ad0:	6833      	ldrmi	r3, [r6, #0]
 8005ad2:	3302      	addmi	r3, #2
 8005ad4:	6033      	strmi	r3, [r6, #0]
 8005ad6:	6825      	ldr	r5, [r4, #0]
 8005ad8:	f015 0506 	ands.w	r5, r5, #6
 8005adc:	d106      	bne.n	8005aec <_printf_common+0x48>
 8005ade:	f104 0a19 	add.w	sl, r4, #25
 8005ae2:	68e3      	ldr	r3, [r4, #12]
 8005ae4:	6832      	ldr	r2, [r6, #0]
 8005ae6:	1a9b      	subs	r3, r3, r2
 8005ae8:	42ab      	cmp	r3, r5
 8005aea:	dc26      	bgt.n	8005b3a <_printf_common+0x96>
 8005aec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005af0:	1e13      	subs	r3, r2, #0
 8005af2:	6822      	ldr	r2, [r4, #0]
 8005af4:	bf18      	it	ne
 8005af6:	2301      	movne	r3, #1
 8005af8:	0692      	lsls	r2, r2, #26
 8005afa:	d42b      	bmi.n	8005b54 <_printf_common+0xb0>
 8005afc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b00:	4649      	mov	r1, r9
 8005b02:	4638      	mov	r0, r7
 8005b04:	47c0      	blx	r8
 8005b06:	3001      	adds	r0, #1
 8005b08:	d01e      	beq.n	8005b48 <_printf_common+0xa4>
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	68e5      	ldr	r5, [r4, #12]
 8005b0e:	6832      	ldr	r2, [r6, #0]
 8005b10:	f003 0306 	and.w	r3, r3, #6
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	bf08      	it	eq
 8005b18:	1aad      	subeq	r5, r5, r2
 8005b1a:	68a3      	ldr	r3, [r4, #8]
 8005b1c:	6922      	ldr	r2, [r4, #16]
 8005b1e:	bf0c      	ite	eq
 8005b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b24:	2500      	movne	r5, #0
 8005b26:	4293      	cmp	r3, r2
 8005b28:	bfc4      	itt	gt
 8005b2a:	1a9b      	subgt	r3, r3, r2
 8005b2c:	18ed      	addgt	r5, r5, r3
 8005b2e:	2600      	movs	r6, #0
 8005b30:	341a      	adds	r4, #26
 8005b32:	42b5      	cmp	r5, r6
 8005b34:	d11a      	bne.n	8005b6c <_printf_common+0xc8>
 8005b36:	2000      	movs	r0, #0
 8005b38:	e008      	b.n	8005b4c <_printf_common+0xa8>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	4652      	mov	r2, sl
 8005b3e:	4649      	mov	r1, r9
 8005b40:	4638      	mov	r0, r7
 8005b42:	47c0      	blx	r8
 8005b44:	3001      	adds	r0, #1
 8005b46:	d103      	bne.n	8005b50 <_printf_common+0xac>
 8005b48:	f04f 30ff 	mov.w	r0, #4294967295
 8005b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b50:	3501      	adds	r5, #1
 8005b52:	e7c6      	b.n	8005ae2 <_printf_common+0x3e>
 8005b54:	18e1      	adds	r1, r4, r3
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	2030      	movs	r0, #48	; 0x30
 8005b5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b5e:	4422      	add	r2, r4
 8005b60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b68:	3302      	adds	r3, #2
 8005b6a:	e7c7      	b.n	8005afc <_printf_common+0x58>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	4622      	mov	r2, r4
 8005b70:	4649      	mov	r1, r9
 8005b72:	4638      	mov	r0, r7
 8005b74:	47c0      	blx	r8
 8005b76:	3001      	adds	r0, #1
 8005b78:	d0e6      	beq.n	8005b48 <_printf_common+0xa4>
 8005b7a:	3601      	adds	r6, #1
 8005b7c:	e7d9      	b.n	8005b32 <_printf_common+0x8e>
	...

08005b80 <_printf_i>:
 8005b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b84:	7e0f      	ldrb	r7, [r1, #24]
 8005b86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b88:	2f78      	cmp	r7, #120	; 0x78
 8005b8a:	4691      	mov	r9, r2
 8005b8c:	4680      	mov	r8, r0
 8005b8e:	460c      	mov	r4, r1
 8005b90:	469a      	mov	sl, r3
 8005b92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b96:	d807      	bhi.n	8005ba8 <_printf_i+0x28>
 8005b98:	2f62      	cmp	r7, #98	; 0x62
 8005b9a:	d80a      	bhi.n	8005bb2 <_printf_i+0x32>
 8005b9c:	2f00      	cmp	r7, #0
 8005b9e:	f000 80d8 	beq.w	8005d52 <_printf_i+0x1d2>
 8005ba2:	2f58      	cmp	r7, #88	; 0x58
 8005ba4:	f000 80a3 	beq.w	8005cee <_printf_i+0x16e>
 8005ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bb0:	e03a      	b.n	8005c28 <_printf_i+0xa8>
 8005bb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bb6:	2b15      	cmp	r3, #21
 8005bb8:	d8f6      	bhi.n	8005ba8 <_printf_i+0x28>
 8005bba:	a101      	add	r1, pc, #4	; (adr r1, 8005bc0 <_printf_i+0x40>)
 8005bbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bc0:	08005c19 	.word	0x08005c19
 8005bc4:	08005c2d 	.word	0x08005c2d
 8005bc8:	08005ba9 	.word	0x08005ba9
 8005bcc:	08005ba9 	.word	0x08005ba9
 8005bd0:	08005ba9 	.word	0x08005ba9
 8005bd4:	08005ba9 	.word	0x08005ba9
 8005bd8:	08005c2d 	.word	0x08005c2d
 8005bdc:	08005ba9 	.word	0x08005ba9
 8005be0:	08005ba9 	.word	0x08005ba9
 8005be4:	08005ba9 	.word	0x08005ba9
 8005be8:	08005ba9 	.word	0x08005ba9
 8005bec:	08005d39 	.word	0x08005d39
 8005bf0:	08005c5d 	.word	0x08005c5d
 8005bf4:	08005d1b 	.word	0x08005d1b
 8005bf8:	08005ba9 	.word	0x08005ba9
 8005bfc:	08005ba9 	.word	0x08005ba9
 8005c00:	08005d5b 	.word	0x08005d5b
 8005c04:	08005ba9 	.word	0x08005ba9
 8005c08:	08005c5d 	.word	0x08005c5d
 8005c0c:	08005ba9 	.word	0x08005ba9
 8005c10:	08005ba9 	.word	0x08005ba9
 8005c14:	08005d23 	.word	0x08005d23
 8005c18:	682b      	ldr	r3, [r5, #0]
 8005c1a:	1d1a      	adds	r2, r3, #4
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	602a      	str	r2, [r5, #0]
 8005c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0a3      	b.n	8005d74 <_printf_i+0x1f4>
 8005c2c:	6820      	ldr	r0, [r4, #0]
 8005c2e:	6829      	ldr	r1, [r5, #0]
 8005c30:	0606      	lsls	r6, r0, #24
 8005c32:	f101 0304 	add.w	r3, r1, #4
 8005c36:	d50a      	bpl.n	8005c4e <_printf_i+0xce>
 8005c38:	680e      	ldr	r6, [r1, #0]
 8005c3a:	602b      	str	r3, [r5, #0]
 8005c3c:	2e00      	cmp	r6, #0
 8005c3e:	da03      	bge.n	8005c48 <_printf_i+0xc8>
 8005c40:	232d      	movs	r3, #45	; 0x2d
 8005c42:	4276      	negs	r6, r6
 8005c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c48:	485e      	ldr	r0, [pc, #376]	; (8005dc4 <_printf_i+0x244>)
 8005c4a:	230a      	movs	r3, #10
 8005c4c:	e019      	b.n	8005c82 <_printf_i+0x102>
 8005c4e:	680e      	ldr	r6, [r1, #0]
 8005c50:	602b      	str	r3, [r5, #0]
 8005c52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c56:	bf18      	it	ne
 8005c58:	b236      	sxthne	r6, r6
 8005c5a:	e7ef      	b.n	8005c3c <_printf_i+0xbc>
 8005c5c:	682b      	ldr	r3, [r5, #0]
 8005c5e:	6820      	ldr	r0, [r4, #0]
 8005c60:	1d19      	adds	r1, r3, #4
 8005c62:	6029      	str	r1, [r5, #0]
 8005c64:	0601      	lsls	r1, r0, #24
 8005c66:	d501      	bpl.n	8005c6c <_printf_i+0xec>
 8005c68:	681e      	ldr	r6, [r3, #0]
 8005c6a:	e002      	b.n	8005c72 <_printf_i+0xf2>
 8005c6c:	0646      	lsls	r6, r0, #25
 8005c6e:	d5fb      	bpl.n	8005c68 <_printf_i+0xe8>
 8005c70:	881e      	ldrh	r6, [r3, #0]
 8005c72:	4854      	ldr	r0, [pc, #336]	; (8005dc4 <_printf_i+0x244>)
 8005c74:	2f6f      	cmp	r7, #111	; 0x6f
 8005c76:	bf0c      	ite	eq
 8005c78:	2308      	moveq	r3, #8
 8005c7a:	230a      	movne	r3, #10
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c82:	6865      	ldr	r5, [r4, #4]
 8005c84:	60a5      	str	r5, [r4, #8]
 8005c86:	2d00      	cmp	r5, #0
 8005c88:	bfa2      	ittt	ge
 8005c8a:	6821      	ldrge	r1, [r4, #0]
 8005c8c:	f021 0104 	bicge.w	r1, r1, #4
 8005c90:	6021      	strge	r1, [r4, #0]
 8005c92:	b90e      	cbnz	r6, 8005c98 <_printf_i+0x118>
 8005c94:	2d00      	cmp	r5, #0
 8005c96:	d04d      	beq.n	8005d34 <_printf_i+0x1b4>
 8005c98:	4615      	mov	r5, r2
 8005c9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c9e:	fb03 6711 	mls	r7, r3, r1, r6
 8005ca2:	5dc7      	ldrb	r7, [r0, r7]
 8005ca4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ca8:	4637      	mov	r7, r6
 8005caa:	42bb      	cmp	r3, r7
 8005cac:	460e      	mov	r6, r1
 8005cae:	d9f4      	bls.n	8005c9a <_printf_i+0x11a>
 8005cb0:	2b08      	cmp	r3, #8
 8005cb2:	d10b      	bne.n	8005ccc <_printf_i+0x14c>
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	07de      	lsls	r6, r3, #31
 8005cb8:	d508      	bpl.n	8005ccc <_printf_i+0x14c>
 8005cba:	6923      	ldr	r3, [r4, #16]
 8005cbc:	6861      	ldr	r1, [r4, #4]
 8005cbe:	4299      	cmp	r1, r3
 8005cc0:	bfde      	ittt	le
 8005cc2:	2330      	movle	r3, #48	; 0x30
 8005cc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ccc:	1b52      	subs	r2, r2, r5
 8005cce:	6122      	str	r2, [r4, #16]
 8005cd0:	f8cd a000 	str.w	sl, [sp]
 8005cd4:	464b      	mov	r3, r9
 8005cd6:	aa03      	add	r2, sp, #12
 8005cd8:	4621      	mov	r1, r4
 8005cda:	4640      	mov	r0, r8
 8005cdc:	f7ff fee2 	bl	8005aa4 <_printf_common>
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	d14c      	bne.n	8005d7e <_printf_i+0x1fe>
 8005ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce8:	b004      	add	sp, #16
 8005cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cee:	4835      	ldr	r0, [pc, #212]	; (8005dc4 <_printf_i+0x244>)
 8005cf0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005cf4:	6829      	ldr	r1, [r5, #0]
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cfc:	6029      	str	r1, [r5, #0]
 8005cfe:	061d      	lsls	r5, r3, #24
 8005d00:	d514      	bpl.n	8005d2c <_printf_i+0x1ac>
 8005d02:	07df      	lsls	r7, r3, #31
 8005d04:	bf44      	itt	mi
 8005d06:	f043 0320 	orrmi.w	r3, r3, #32
 8005d0a:	6023      	strmi	r3, [r4, #0]
 8005d0c:	b91e      	cbnz	r6, 8005d16 <_printf_i+0x196>
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	f023 0320 	bic.w	r3, r3, #32
 8005d14:	6023      	str	r3, [r4, #0]
 8005d16:	2310      	movs	r3, #16
 8005d18:	e7b0      	b.n	8005c7c <_printf_i+0xfc>
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	f043 0320 	orr.w	r3, r3, #32
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	2378      	movs	r3, #120	; 0x78
 8005d24:	4828      	ldr	r0, [pc, #160]	; (8005dc8 <_printf_i+0x248>)
 8005d26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d2a:	e7e3      	b.n	8005cf4 <_printf_i+0x174>
 8005d2c:	0659      	lsls	r1, r3, #25
 8005d2e:	bf48      	it	mi
 8005d30:	b2b6      	uxthmi	r6, r6
 8005d32:	e7e6      	b.n	8005d02 <_printf_i+0x182>
 8005d34:	4615      	mov	r5, r2
 8005d36:	e7bb      	b.n	8005cb0 <_printf_i+0x130>
 8005d38:	682b      	ldr	r3, [r5, #0]
 8005d3a:	6826      	ldr	r6, [r4, #0]
 8005d3c:	6961      	ldr	r1, [r4, #20]
 8005d3e:	1d18      	adds	r0, r3, #4
 8005d40:	6028      	str	r0, [r5, #0]
 8005d42:	0635      	lsls	r5, r6, #24
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	d501      	bpl.n	8005d4c <_printf_i+0x1cc>
 8005d48:	6019      	str	r1, [r3, #0]
 8005d4a:	e002      	b.n	8005d52 <_printf_i+0x1d2>
 8005d4c:	0670      	lsls	r0, r6, #25
 8005d4e:	d5fb      	bpl.n	8005d48 <_printf_i+0x1c8>
 8005d50:	8019      	strh	r1, [r3, #0]
 8005d52:	2300      	movs	r3, #0
 8005d54:	6123      	str	r3, [r4, #16]
 8005d56:	4615      	mov	r5, r2
 8005d58:	e7ba      	b.n	8005cd0 <_printf_i+0x150>
 8005d5a:	682b      	ldr	r3, [r5, #0]
 8005d5c:	1d1a      	adds	r2, r3, #4
 8005d5e:	602a      	str	r2, [r5, #0]
 8005d60:	681d      	ldr	r5, [r3, #0]
 8005d62:	6862      	ldr	r2, [r4, #4]
 8005d64:	2100      	movs	r1, #0
 8005d66:	4628      	mov	r0, r5
 8005d68:	f7fa faba 	bl	80002e0 <memchr>
 8005d6c:	b108      	cbz	r0, 8005d72 <_printf_i+0x1f2>
 8005d6e:	1b40      	subs	r0, r0, r5
 8005d70:	6060      	str	r0, [r4, #4]
 8005d72:	6863      	ldr	r3, [r4, #4]
 8005d74:	6123      	str	r3, [r4, #16]
 8005d76:	2300      	movs	r3, #0
 8005d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d7c:	e7a8      	b.n	8005cd0 <_printf_i+0x150>
 8005d7e:	6923      	ldr	r3, [r4, #16]
 8005d80:	462a      	mov	r2, r5
 8005d82:	4649      	mov	r1, r9
 8005d84:	4640      	mov	r0, r8
 8005d86:	47d0      	blx	sl
 8005d88:	3001      	adds	r0, #1
 8005d8a:	d0ab      	beq.n	8005ce4 <_printf_i+0x164>
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	079b      	lsls	r3, r3, #30
 8005d90:	d413      	bmi.n	8005dba <_printf_i+0x23a>
 8005d92:	68e0      	ldr	r0, [r4, #12]
 8005d94:	9b03      	ldr	r3, [sp, #12]
 8005d96:	4298      	cmp	r0, r3
 8005d98:	bfb8      	it	lt
 8005d9a:	4618      	movlt	r0, r3
 8005d9c:	e7a4      	b.n	8005ce8 <_printf_i+0x168>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	4632      	mov	r2, r6
 8005da2:	4649      	mov	r1, r9
 8005da4:	4640      	mov	r0, r8
 8005da6:	47d0      	blx	sl
 8005da8:	3001      	adds	r0, #1
 8005daa:	d09b      	beq.n	8005ce4 <_printf_i+0x164>
 8005dac:	3501      	adds	r5, #1
 8005dae:	68e3      	ldr	r3, [r4, #12]
 8005db0:	9903      	ldr	r1, [sp, #12]
 8005db2:	1a5b      	subs	r3, r3, r1
 8005db4:	42ab      	cmp	r3, r5
 8005db6:	dcf2      	bgt.n	8005d9e <_printf_i+0x21e>
 8005db8:	e7eb      	b.n	8005d92 <_printf_i+0x212>
 8005dba:	2500      	movs	r5, #0
 8005dbc:	f104 0619 	add.w	r6, r4, #25
 8005dc0:	e7f5      	b.n	8005dae <_printf_i+0x22e>
 8005dc2:	bf00      	nop
 8005dc4:	080064a5 	.word	0x080064a5
 8005dc8:	080064b6 	.word	0x080064b6

08005dcc <_sbrk_r>:
 8005dcc:	b538      	push	{r3, r4, r5, lr}
 8005dce:	4d06      	ldr	r5, [pc, #24]	; (8005de8 <_sbrk_r+0x1c>)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	602b      	str	r3, [r5, #0]
 8005dd8:	f7fa fe8a 	bl	8000af0 <_sbrk>
 8005ddc:	1c43      	adds	r3, r0, #1
 8005dde:	d102      	bne.n	8005de6 <_sbrk_r+0x1a>
 8005de0:	682b      	ldr	r3, [r5, #0]
 8005de2:	b103      	cbz	r3, 8005de6 <_sbrk_r+0x1a>
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	24000138 	.word	0x24000138

08005dec <__sread>:
 8005dec:	b510      	push	{r4, lr}
 8005dee:	460c      	mov	r4, r1
 8005df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005df4:	f000 fab2 	bl	800635c <_read_r>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	bfab      	itete	ge
 8005dfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005dfe:	89a3      	ldrhlt	r3, [r4, #12]
 8005e00:	181b      	addge	r3, r3, r0
 8005e02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e06:	bfac      	ite	ge
 8005e08:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e0a:	81a3      	strhlt	r3, [r4, #12]
 8005e0c:	bd10      	pop	{r4, pc}

08005e0e <__swrite>:
 8005e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e12:	461f      	mov	r7, r3
 8005e14:	898b      	ldrh	r3, [r1, #12]
 8005e16:	05db      	lsls	r3, r3, #23
 8005e18:	4605      	mov	r5, r0
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	4616      	mov	r6, r2
 8005e1e:	d505      	bpl.n	8005e2c <__swrite+0x1e>
 8005e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e24:	2302      	movs	r3, #2
 8005e26:	2200      	movs	r2, #0
 8005e28:	f000 f9c8 	bl	80061bc <_lseek_r>
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e36:	81a3      	strh	r3, [r4, #12]
 8005e38:	4632      	mov	r2, r6
 8005e3a:	463b      	mov	r3, r7
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e42:	f000 b869 	b.w	8005f18 <_write_r>

08005e46 <__sseek>:
 8005e46:	b510      	push	{r4, lr}
 8005e48:	460c      	mov	r4, r1
 8005e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e4e:	f000 f9b5 	bl	80061bc <_lseek_r>
 8005e52:	1c43      	adds	r3, r0, #1
 8005e54:	89a3      	ldrh	r3, [r4, #12]
 8005e56:	bf15      	itete	ne
 8005e58:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e62:	81a3      	strheq	r3, [r4, #12]
 8005e64:	bf18      	it	ne
 8005e66:	81a3      	strhne	r3, [r4, #12]
 8005e68:	bd10      	pop	{r4, pc}

08005e6a <__sclose>:
 8005e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e6e:	f000 b8d3 	b.w	8006018 <_close_r>
	...

08005e74 <__swbuf_r>:
 8005e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e76:	460e      	mov	r6, r1
 8005e78:	4614      	mov	r4, r2
 8005e7a:	4605      	mov	r5, r0
 8005e7c:	b118      	cbz	r0, 8005e86 <__swbuf_r+0x12>
 8005e7e:	6983      	ldr	r3, [r0, #24]
 8005e80:	b90b      	cbnz	r3, 8005e86 <__swbuf_r+0x12>
 8005e82:	f7ff fb81 	bl	8005588 <__sinit>
 8005e86:	4b21      	ldr	r3, [pc, #132]	; (8005f0c <__swbuf_r+0x98>)
 8005e88:	429c      	cmp	r4, r3
 8005e8a:	d12b      	bne.n	8005ee4 <__swbuf_r+0x70>
 8005e8c:	686c      	ldr	r4, [r5, #4]
 8005e8e:	69a3      	ldr	r3, [r4, #24]
 8005e90:	60a3      	str	r3, [r4, #8]
 8005e92:	89a3      	ldrh	r3, [r4, #12]
 8005e94:	071a      	lsls	r2, r3, #28
 8005e96:	d52f      	bpl.n	8005ef8 <__swbuf_r+0x84>
 8005e98:	6923      	ldr	r3, [r4, #16]
 8005e9a:	b36b      	cbz	r3, 8005ef8 <__swbuf_r+0x84>
 8005e9c:	6923      	ldr	r3, [r4, #16]
 8005e9e:	6820      	ldr	r0, [r4, #0]
 8005ea0:	1ac0      	subs	r0, r0, r3
 8005ea2:	6963      	ldr	r3, [r4, #20]
 8005ea4:	b2f6      	uxtb	r6, r6
 8005ea6:	4283      	cmp	r3, r0
 8005ea8:	4637      	mov	r7, r6
 8005eaa:	dc04      	bgt.n	8005eb6 <__swbuf_r+0x42>
 8005eac:	4621      	mov	r1, r4
 8005eae:	4628      	mov	r0, r5
 8005eb0:	f000 f948 	bl	8006144 <_fflush_r>
 8005eb4:	bb30      	cbnz	r0, 8005f04 <__swbuf_r+0x90>
 8005eb6:	68a3      	ldr	r3, [r4, #8]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	60a3      	str	r3, [r4, #8]
 8005ebc:	6823      	ldr	r3, [r4, #0]
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	6022      	str	r2, [r4, #0]
 8005ec2:	701e      	strb	r6, [r3, #0]
 8005ec4:	6963      	ldr	r3, [r4, #20]
 8005ec6:	3001      	adds	r0, #1
 8005ec8:	4283      	cmp	r3, r0
 8005eca:	d004      	beq.n	8005ed6 <__swbuf_r+0x62>
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	07db      	lsls	r3, r3, #31
 8005ed0:	d506      	bpl.n	8005ee0 <__swbuf_r+0x6c>
 8005ed2:	2e0a      	cmp	r6, #10
 8005ed4:	d104      	bne.n	8005ee0 <__swbuf_r+0x6c>
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	4628      	mov	r0, r5
 8005eda:	f000 f933 	bl	8006144 <_fflush_r>
 8005ede:	b988      	cbnz	r0, 8005f04 <__swbuf_r+0x90>
 8005ee0:	4638      	mov	r0, r7
 8005ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ee4:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <__swbuf_r+0x9c>)
 8005ee6:	429c      	cmp	r4, r3
 8005ee8:	d101      	bne.n	8005eee <__swbuf_r+0x7a>
 8005eea:	68ac      	ldr	r4, [r5, #8]
 8005eec:	e7cf      	b.n	8005e8e <__swbuf_r+0x1a>
 8005eee:	4b09      	ldr	r3, [pc, #36]	; (8005f14 <__swbuf_r+0xa0>)
 8005ef0:	429c      	cmp	r4, r3
 8005ef2:	bf08      	it	eq
 8005ef4:	68ec      	ldreq	r4, [r5, #12]
 8005ef6:	e7ca      	b.n	8005e8e <__swbuf_r+0x1a>
 8005ef8:	4621      	mov	r1, r4
 8005efa:	4628      	mov	r0, r5
 8005efc:	f000 f81e 	bl	8005f3c <__swsetup_r>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	d0cb      	beq.n	8005e9c <__swbuf_r+0x28>
 8005f04:	f04f 37ff 	mov.w	r7, #4294967295
 8005f08:	e7ea      	b.n	8005ee0 <__swbuf_r+0x6c>
 8005f0a:	bf00      	nop
 8005f0c:	08006454 	.word	0x08006454
 8005f10:	08006474 	.word	0x08006474
 8005f14:	08006434 	.word	0x08006434

08005f18 <_write_r>:
 8005f18:	b538      	push	{r3, r4, r5, lr}
 8005f1a:	4d07      	ldr	r5, [pc, #28]	; (8005f38 <_write_r+0x20>)
 8005f1c:	4604      	mov	r4, r0
 8005f1e:	4608      	mov	r0, r1
 8005f20:	4611      	mov	r1, r2
 8005f22:	2200      	movs	r2, #0
 8005f24:	602a      	str	r2, [r5, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	f7fa fc5c 	bl	80007e4 <_write>
 8005f2c:	1c43      	adds	r3, r0, #1
 8005f2e:	d102      	bne.n	8005f36 <_write_r+0x1e>
 8005f30:	682b      	ldr	r3, [r5, #0]
 8005f32:	b103      	cbz	r3, 8005f36 <_write_r+0x1e>
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	bd38      	pop	{r3, r4, r5, pc}
 8005f38:	24000138 	.word	0x24000138

08005f3c <__swsetup_r>:
 8005f3c:	4b32      	ldr	r3, [pc, #200]	; (8006008 <__swsetup_r+0xcc>)
 8005f3e:	b570      	push	{r4, r5, r6, lr}
 8005f40:	681d      	ldr	r5, [r3, #0]
 8005f42:	4606      	mov	r6, r0
 8005f44:	460c      	mov	r4, r1
 8005f46:	b125      	cbz	r5, 8005f52 <__swsetup_r+0x16>
 8005f48:	69ab      	ldr	r3, [r5, #24]
 8005f4a:	b913      	cbnz	r3, 8005f52 <__swsetup_r+0x16>
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	f7ff fb1b 	bl	8005588 <__sinit>
 8005f52:	4b2e      	ldr	r3, [pc, #184]	; (800600c <__swsetup_r+0xd0>)
 8005f54:	429c      	cmp	r4, r3
 8005f56:	d10f      	bne.n	8005f78 <__swsetup_r+0x3c>
 8005f58:	686c      	ldr	r4, [r5, #4]
 8005f5a:	89a3      	ldrh	r3, [r4, #12]
 8005f5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f60:	0719      	lsls	r1, r3, #28
 8005f62:	d42c      	bmi.n	8005fbe <__swsetup_r+0x82>
 8005f64:	06dd      	lsls	r5, r3, #27
 8005f66:	d411      	bmi.n	8005f8c <__swsetup_r+0x50>
 8005f68:	2309      	movs	r3, #9
 8005f6a:	6033      	str	r3, [r6, #0]
 8005f6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f70:	81a3      	strh	r3, [r4, #12]
 8005f72:	f04f 30ff 	mov.w	r0, #4294967295
 8005f76:	e03e      	b.n	8005ff6 <__swsetup_r+0xba>
 8005f78:	4b25      	ldr	r3, [pc, #148]	; (8006010 <__swsetup_r+0xd4>)
 8005f7a:	429c      	cmp	r4, r3
 8005f7c:	d101      	bne.n	8005f82 <__swsetup_r+0x46>
 8005f7e:	68ac      	ldr	r4, [r5, #8]
 8005f80:	e7eb      	b.n	8005f5a <__swsetup_r+0x1e>
 8005f82:	4b24      	ldr	r3, [pc, #144]	; (8006014 <__swsetup_r+0xd8>)
 8005f84:	429c      	cmp	r4, r3
 8005f86:	bf08      	it	eq
 8005f88:	68ec      	ldreq	r4, [r5, #12]
 8005f8a:	e7e6      	b.n	8005f5a <__swsetup_r+0x1e>
 8005f8c:	0758      	lsls	r0, r3, #29
 8005f8e:	d512      	bpl.n	8005fb6 <__swsetup_r+0x7a>
 8005f90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f92:	b141      	cbz	r1, 8005fa6 <__swsetup_r+0x6a>
 8005f94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f98:	4299      	cmp	r1, r3
 8005f9a:	d002      	beq.n	8005fa2 <__swsetup_r+0x66>
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f000 f991 	bl	80062c4 <_free_r>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	6363      	str	r3, [r4, #52]	; 0x34
 8005fa6:	89a3      	ldrh	r3, [r4, #12]
 8005fa8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fac:	81a3      	strh	r3, [r4, #12]
 8005fae:	2300      	movs	r3, #0
 8005fb0:	6063      	str	r3, [r4, #4]
 8005fb2:	6923      	ldr	r3, [r4, #16]
 8005fb4:	6023      	str	r3, [r4, #0]
 8005fb6:	89a3      	ldrh	r3, [r4, #12]
 8005fb8:	f043 0308 	orr.w	r3, r3, #8
 8005fbc:	81a3      	strh	r3, [r4, #12]
 8005fbe:	6923      	ldr	r3, [r4, #16]
 8005fc0:	b94b      	cbnz	r3, 8005fd6 <__swsetup_r+0x9a>
 8005fc2:	89a3      	ldrh	r3, [r4, #12]
 8005fc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fcc:	d003      	beq.n	8005fd6 <__swsetup_r+0x9a>
 8005fce:	4621      	mov	r1, r4
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	f000 f92b 	bl	800622c <__smakebuf_r>
 8005fd6:	89a0      	ldrh	r0, [r4, #12]
 8005fd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fdc:	f010 0301 	ands.w	r3, r0, #1
 8005fe0:	d00a      	beq.n	8005ff8 <__swsetup_r+0xbc>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60a3      	str	r3, [r4, #8]
 8005fe6:	6963      	ldr	r3, [r4, #20]
 8005fe8:	425b      	negs	r3, r3
 8005fea:	61a3      	str	r3, [r4, #24]
 8005fec:	6923      	ldr	r3, [r4, #16]
 8005fee:	b943      	cbnz	r3, 8006002 <__swsetup_r+0xc6>
 8005ff0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ff4:	d1ba      	bne.n	8005f6c <__swsetup_r+0x30>
 8005ff6:	bd70      	pop	{r4, r5, r6, pc}
 8005ff8:	0781      	lsls	r1, r0, #30
 8005ffa:	bf58      	it	pl
 8005ffc:	6963      	ldrpl	r3, [r4, #20]
 8005ffe:	60a3      	str	r3, [r4, #8]
 8006000:	e7f4      	b.n	8005fec <__swsetup_r+0xb0>
 8006002:	2000      	movs	r0, #0
 8006004:	e7f7      	b.n	8005ff6 <__swsetup_r+0xba>
 8006006:	bf00      	nop
 8006008:	24000010 	.word	0x24000010
 800600c:	08006454 	.word	0x08006454
 8006010:	08006474 	.word	0x08006474
 8006014:	08006434 	.word	0x08006434

08006018 <_close_r>:
 8006018:	b538      	push	{r3, r4, r5, lr}
 800601a:	4d06      	ldr	r5, [pc, #24]	; (8006034 <_close_r+0x1c>)
 800601c:	2300      	movs	r3, #0
 800601e:	4604      	mov	r4, r0
 8006020:	4608      	mov	r0, r1
 8006022:	602b      	str	r3, [r5, #0]
 8006024:	f7fa fd2f 	bl	8000a86 <_close>
 8006028:	1c43      	adds	r3, r0, #1
 800602a:	d102      	bne.n	8006032 <_close_r+0x1a>
 800602c:	682b      	ldr	r3, [r5, #0]
 800602e:	b103      	cbz	r3, 8006032 <_close_r+0x1a>
 8006030:	6023      	str	r3, [r4, #0]
 8006032:	bd38      	pop	{r3, r4, r5, pc}
 8006034:	24000138 	.word	0x24000138

08006038 <__sflush_r>:
 8006038:	898a      	ldrh	r2, [r1, #12]
 800603a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800603e:	4605      	mov	r5, r0
 8006040:	0710      	lsls	r0, r2, #28
 8006042:	460c      	mov	r4, r1
 8006044:	d458      	bmi.n	80060f8 <__sflush_r+0xc0>
 8006046:	684b      	ldr	r3, [r1, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	dc05      	bgt.n	8006058 <__sflush_r+0x20>
 800604c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	dc02      	bgt.n	8006058 <__sflush_r+0x20>
 8006052:	2000      	movs	r0, #0
 8006054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006058:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800605a:	2e00      	cmp	r6, #0
 800605c:	d0f9      	beq.n	8006052 <__sflush_r+0x1a>
 800605e:	2300      	movs	r3, #0
 8006060:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006064:	682f      	ldr	r7, [r5, #0]
 8006066:	602b      	str	r3, [r5, #0]
 8006068:	d032      	beq.n	80060d0 <__sflush_r+0x98>
 800606a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800606c:	89a3      	ldrh	r3, [r4, #12]
 800606e:	075a      	lsls	r2, r3, #29
 8006070:	d505      	bpl.n	800607e <__sflush_r+0x46>
 8006072:	6863      	ldr	r3, [r4, #4]
 8006074:	1ac0      	subs	r0, r0, r3
 8006076:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006078:	b10b      	cbz	r3, 800607e <__sflush_r+0x46>
 800607a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800607c:	1ac0      	subs	r0, r0, r3
 800607e:	2300      	movs	r3, #0
 8006080:	4602      	mov	r2, r0
 8006082:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006084:	6a21      	ldr	r1, [r4, #32]
 8006086:	4628      	mov	r0, r5
 8006088:	47b0      	blx	r6
 800608a:	1c43      	adds	r3, r0, #1
 800608c:	89a3      	ldrh	r3, [r4, #12]
 800608e:	d106      	bne.n	800609e <__sflush_r+0x66>
 8006090:	6829      	ldr	r1, [r5, #0]
 8006092:	291d      	cmp	r1, #29
 8006094:	d82c      	bhi.n	80060f0 <__sflush_r+0xb8>
 8006096:	4a2a      	ldr	r2, [pc, #168]	; (8006140 <__sflush_r+0x108>)
 8006098:	40ca      	lsrs	r2, r1
 800609a:	07d6      	lsls	r6, r2, #31
 800609c:	d528      	bpl.n	80060f0 <__sflush_r+0xb8>
 800609e:	2200      	movs	r2, #0
 80060a0:	6062      	str	r2, [r4, #4]
 80060a2:	04d9      	lsls	r1, r3, #19
 80060a4:	6922      	ldr	r2, [r4, #16]
 80060a6:	6022      	str	r2, [r4, #0]
 80060a8:	d504      	bpl.n	80060b4 <__sflush_r+0x7c>
 80060aa:	1c42      	adds	r2, r0, #1
 80060ac:	d101      	bne.n	80060b2 <__sflush_r+0x7a>
 80060ae:	682b      	ldr	r3, [r5, #0]
 80060b0:	b903      	cbnz	r3, 80060b4 <__sflush_r+0x7c>
 80060b2:	6560      	str	r0, [r4, #84]	; 0x54
 80060b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060b6:	602f      	str	r7, [r5, #0]
 80060b8:	2900      	cmp	r1, #0
 80060ba:	d0ca      	beq.n	8006052 <__sflush_r+0x1a>
 80060bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060c0:	4299      	cmp	r1, r3
 80060c2:	d002      	beq.n	80060ca <__sflush_r+0x92>
 80060c4:	4628      	mov	r0, r5
 80060c6:	f000 f8fd 	bl	80062c4 <_free_r>
 80060ca:	2000      	movs	r0, #0
 80060cc:	6360      	str	r0, [r4, #52]	; 0x34
 80060ce:	e7c1      	b.n	8006054 <__sflush_r+0x1c>
 80060d0:	6a21      	ldr	r1, [r4, #32]
 80060d2:	2301      	movs	r3, #1
 80060d4:	4628      	mov	r0, r5
 80060d6:	47b0      	blx	r6
 80060d8:	1c41      	adds	r1, r0, #1
 80060da:	d1c7      	bne.n	800606c <__sflush_r+0x34>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0c4      	beq.n	800606c <__sflush_r+0x34>
 80060e2:	2b1d      	cmp	r3, #29
 80060e4:	d001      	beq.n	80060ea <__sflush_r+0xb2>
 80060e6:	2b16      	cmp	r3, #22
 80060e8:	d101      	bne.n	80060ee <__sflush_r+0xb6>
 80060ea:	602f      	str	r7, [r5, #0]
 80060ec:	e7b1      	b.n	8006052 <__sflush_r+0x1a>
 80060ee:	89a3      	ldrh	r3, [r4, #12]
 80060f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060f4:	81a3      	strh	r3, [r4, #12]
 80060f6:	e7ad      	b.n	8006054 <__sflush_r+0x1c>
 80060f8:	690f      	ldr	r7, [r1, #16]
 80060fa:	2f00      	cmp	r7, #0
 80060fc:	d0a9      	beq.n	8006052 <__sflush_r+0x1a>
 80060fe:	0793      	lsls	r3, r2, #30
 8006100:	680e      	ldr	r6, [r1, #0]
 8006102:	bf08      	it	eq
 8006104:	694b      	ldreq	r3, [r1, #20]
 8006106:	600f      	str	r7, [r1, #0]
 8006108:	bf18      	it	ne
 800610a:	2300      	movne	r3, #0
 800610c:	eba6 0807 	sub.w	r8, r6, r7
 8006110:	608b      	str	r3, [r1, #8]
 8006112:	f1b8 0f00 	cmp.w	r8, #0
 8006116:	dd9c      	ble.n	8006052 <__sflush_r+0x1a>
 8006118:	6a21      	ldr	r1, [r4, #32]
 800611a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800611c:	4643      	mov	r3, r8
 800611e:	463a      	mov	r2, r7
 8006120:	4628      	mov	r0, r5
 8006122:	47b0      	blx	r6
 8006124:	2800      	cmp	r0, #0
 8006126:	dc06      	bgt.n	8006136 <__sflush_r+0xfe>
 8006128:	89a3      	ldrh	r3, [r4, #12]
 800612a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800612e:	81a3      	strh	r3, [r4, #12]
 8006130:	f04f 30ff 	mov.w	r0, #4294967295
 8006134:	e78e      	b.n	8006054 <__sflush_r+0x1c>
 8006136:	4407      	add	r7, r0
 8006138:	eba8 0800 	sub.w	r8, r8, r0
 800613c:	e7e9      	b.n	8006112 <__sflush_r+0xda>
 800613e:	bf00      	nop
 8006140:	20400001 	.word	0x20400001

08006144 <_fflush_r>:
 8006144:	b538      	push	{r3, r4, r5, lr}
 8006146:	690b      	ldr	r3, [r1, #16]
 8006148:	4605      	mov	r5, r0
 800614a:	460c      	mov	r4, r1
 800614c:	b913      	cbnz	r3, 8006154 <_fflush_r+0x10>
 800614e:	2500      	movs	r5, #0
 8006150:	4628      	mov	r0, r5
 8006152:	bd38      	pop	{r3, r4, r5, pc}
 8006154:	b118      	cbz	r0, 800615e <_fflush_r+0x1a>
 8006156:	6983      	ldr	r3, [r0, #24]
 8006158:	b90b      	cbnz	r3, 800615e <_fflush_r+0x1a>
 800615a:	f7ff fa15 	bl	8005588 <__sinit>
 800615e:	4b14      	ldr	r3, [pc, #80]	; (80061b0 <_fflush_r+0x6c>)
 8006160:	429c      	cmp	r4, r3
 8006162:	d11b      	bne.n	800619c <_fflush_r+0x58>
 8006164:	686c      	ldr	r4, [r5, #4]
 8006166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0ef      	beq.n	800614e <_fflush_r+0xa>
 800616e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006170:	07d0      	lsls	r0, r2, #31
 8006172:	d404      	bmi.n	800617e <_fflush_r+0x3a>
 8006174:	0599      	lsls	r1, r3, #22
 8006176:	d402      	bmi.n	800617e <_fflush_r+0x3a>
 8006178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800617a:	f7ff faa3 	bl	80056c4 <__retarget_lock_acquire_recursive>
 800617e:	4628      	mov	r0, r5
 8006180:	4621      	mov	r1, r4
 8006182:	f7ff ff59 	bl	8006038 <__sflush_r>
 8006186:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006188:	07da      	lsls	r2, r3, #31
 800618a:	4605      	mov	r5, r0
 800618c:	d4e0      	bmi.n	8006150 <_fflush_r+0xc>
 800618e:	89a3      	ldrh	r3, [r4, #12]
 8006190:	059b      	lsls	r3, r3, #22
 8006192:	d4dd      	bmi.n	8006150 <_fflush_r+0xc>
 8006194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006196:	f7ff fa96 	bl	80056c6 <__retarget_lock_release_recursive>
 800619a:	e7d9      	b.n	8006150 <_fflush_r+0xc>
 800619c:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <_fflush_r+0x70>)
 800619e:	429c      	cmp	r4, r3
 80061a0:	d101      	bne.n	80061a6 <_fflush_r+0x62>
 80061a2:	68ac      	ldr	r4, [r5, #8]
 80061a4:	e7df      	b.n	8006166 <_fflush_r+0x22>
 80061a6:	4b04      	ldr	r3, [pc, #16]	; (80061b8 <_fflush_r+0x74>)
 80061a8:	429c      	cmp	r4, r3
 80061aa:	bf08      	it	eq
 80061ac:	68ec      	ldreq	r4, [r5, #12]
 80061ae:	e7da      	b.n	8006166 <_fflush_r+0x22>
 80061b0:	08006454 	.word	0x08006454
 80061b4:	08006474 	.word	0x08006474
 80061b8:	08006434 	.word	0x08006434

080061bc <_lseek_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	4d07      	ldr	r5, [pc, #28]	; (80061dc <_lseek_r+0x20>)
 80061c0:	4604      	mov	r4, r0
 80061c2:	4608      	mov	r0, r1
 80061c4:	4611      	mov	r1, r2
 80061c6:	2200      	movs	r2, #0
 80061c8:	602a      	str	r2, [r5, #0]
 80061ca:	461a      	mov	r2, r3
 80061cc:	f7fa fc82 	bl	8000ad4 <_lseek>
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	d102      	bne.n	80061da <_lseek_r+0x1e>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	b103      	cbz	r3, 80061da <_lseek_r+0x1e>
 80061d8:	6023      	str	r3, [r4, #0]
 80061da:	bd38      	pop	{r3, r4, r5, pc}
 80061dc:	24000138 	.word	0x24000138

080061e0 <__swhatbuf_r>:
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	460e      	mov	r6, r1
 80061e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e8:	2900      	cmp	r1, #0
 80061ea:	b096      	sub	sp, #88	; 0x58
 80061ec:	4614      	mov	r4, r2
 80061ee:	461d      	mov	r5, r3
 80061f0:	da08      	bge.n	8006204 <__swhatbuf_r+0x24>
 80061f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	602a      	str	r2, [r5, #0]
 80061fa:	061a      	lsls	r2, r3, #24
 80061fc:	d410      	bmi.n	8006220 <__swhatbuf_r+0x40>
 80061fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006202:	e00e      	b.n	8006222 <__swhatbuf_r+0x42>
 8006204:	466a      	mov	r2, sp
 8006206:	f000 f8bb 	bl	8006380 <_fstat_r>
 800620a:	2800      	cmp	r0, #0
 800620c:	dbf1      	blt.n	80061f2 <__swhatbuf_r+0x12>
 800620e:	9a01      	ldr	r2, [sp, #4]
 8006210:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006214:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006218:	425a      	negs	r2, r3
 800621a:	415a      	adcs	r2, r3
 800621c:	602a      	str	r2, [r5, #0]
 800621e:	e7ee      	b.n	80061fe <__swhatbuf_r+0x1e>
 8006220:	2340      	movs	r3, #64	; 0x40
 8006222:	2000      	movs	r0, #0
 8006224:	6023      	str	r3, [r4, #0]
 8006226:	b016      	add	sp, #88	; 0x58
 8006228:	bd70      	pop	{r4, r5, r6, pc}
	...

0800622c <__smakebuf_r>:
 800622c:	898b      	ldrh	r3, [r1, #12]
 800622e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006230:	079d      	lsls	r5, r3, #30
 8006232:	4606      	mov	r6, r0
 8006234:	460c      	mov	r4, r1
 8006236:	d507      	bpl.n	8006248 <__smakebuf_r+0x1c>
 8006238:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800623c:	6023      	str	r3, [r4, #0]
 800623e:	6123      	str	r3, [r4, #16]
 8006240:	2301      	movs	r3, #1
 8006242:	6163      	str	r3, [r4, #20]
 8006244:	b002      	add	sp, #8
 8006246:	bd70      	pop	{r4, r5, r6, pc}
 8006248:	ab01      	add	r3, sp, #4
 800624a:	466a      	mov	r2, sp
 800624c:	f7ff ffc8 	bl	80061e0 <__swhatbuf_r>
 8006250:	9900      	ldr	r1, [sp, #0]
 8006252:	4605      	mov	r5, r0
 8006254:	4630      	mov	r0, r6
 8006256:	f7ff fa57 	bl	8005708 <_malloc_r>
 800625a:	b948      	cbnz	r0, 8006270 <__smakebuf_r+0x44>
 800625c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006260:	059a      	lsls	r2, r3, #22
 8006262:	d4ef      	bmi.n	8006244 <__smakebuf_r+0x18>
 8006264:	f023 0303 	bic.w	r3, r3, #3
 8006268:	f043 0302 	orr.w	r3, r3, #2
 800626c:	81a3      	strh	r3, [r4, #12]
 800626e:	e7e3      	b.n	8006238 <__smakebuf_r+0xc>
 8006270:	4b0d      	ldr	r3, [pc, #52]	; (80062a8 <__smakebuf_r+0x7c>)
 8006272:	62b3      	str	r3, [r6, #40]	; 0x28
 8006274:	89a3      	ldrh	r3, [r4, #12]
 8006276:	6020      	str	r0, [r4, #0]
 8006278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800627c:	81a3      	strh	r3, [r4, #12]
 800627e:	9b00      	ldr	r3, [sp, #0]
 8006280:	6163      	str	r3, [r4, #20]
 8006282:	9b01      	ldr	r3, [sp, #4]
 8006284:	6120      	str	r0, [r4, #16]
 8006286:	b15b      	cbz	r3, 80062a0 <__smakebuf_r+0x74>
 8006288:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800628c:	4630      	mov	r0, r6
 800628e:	f000 f889 	bl	80063a4 <_isatty_r>
 8006292:	b128      	cbz	r0, 80062a0 <__smakebuf_r+0x74>
 8006294:	89a3      	ldrh	r3, [r4, #12]
 8006296:	f023 0303 	bic.w	r3, r3, #3
 800629a:	f043 0301 	orr.w	r3, r3, #1
 800629e:	81a3      	strh	r3, [r4, #12]
 80062a0:	89a0      	ldrh	r0, [r4, #12]
 80062a2:	4305      	orrs	r5, r0
 80062a4:	81a5      	strh	r5, [r4, #12]
 80062a6:	e7cd      	b.n	8006244 <__smakebuf_r+0x18>
 80062a8:	08005521 	.word	0x08005521

080062ac <__malloc_lock>:
 80062ac:	4801      	ldr	r0, [pc, #4]	; (80062b4 <__malloc_lock+0x8>)
 80062ae:	f7ff ba09 	b.w	80056c4 <__retarget_lock_acquire_recursive>
 80062b2:	bf00      	nop
 80062b4:	2400012c 	.word	0x2400012c

080062b8 <__malloc_unlock>:
 80062b8:	4801      	ldr	r0, [pc, #4]	; (80062c0 <__malloc_unlock+0x8>)
 80062ba:	f7ff ba04 	b.w	80056c6 <__retarget_lock_release_recursive>
 80062be:	bf00      	nop
 80062c0:	2400012c 	.word	0x2400012c

080062c4 <_free_r>:
 80062c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062c6:	2900      	cmp	r1, #0
 80062c8:	d044      	beq.n	8006354 <_free_r+0x90>
 80062ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062ce:	9001      	str	r0, [sp, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f1a1 0404 	sub.w	r4, r1, #4
 80062d6:	bfb8      	it	lt
 80062d8:	18e4      	addlt	r4, r4, r3
 80062da:	f7ff ffe7 	bl	80062ac <__malloc_lock>
 80062de:	4a1e      	ldr	r2, [pc, #120]	; (8006358 <_free_r+0x94>)
 80062e0:	9801      	ldr	r0, [sp, #4]
 80062e2:	6813      	ldr	r3, [r2, #0]
 80062e4:	b933      	cbnz	r3, 80062f4 <_free_r+0x30>
 80062e6:	6063      	str	r3, [r4, #4]
 80062e8:	6014      	str	r4, [r2, #0]
 80062ea:	b003      	add	sp, #12
 80062ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062f0:	f7ff bfe2 	b.w	80062b8 <__malloc_unlock>
 80062f4:	42a3      	cmp	r3, r4
 80062f6:	d908      	bls.n	800630a <_free_r+0x46>
 80062f8:	6825      	ldr	r5, [r4, #0]
 80062fa:	1961      	adds	r1, r4, r5
 80062fc:	428b      	cmp	r3, r1
 80062fe:	bf01      	itttt	eq
 8006300:	6819      	ldreq	r1, [r3, #0]
 8006302:	685b      	ldreq	r3, [r3, #4]
 8006304:	1949      	addeq	r1, r1, r5
 8006306:	6021      	streq	r1, [r4, #0]
 8006308:	e7ed      	b.n	80062e6 <_free_r+0x22>
 800630a:	461a      	mov	r2, r3
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	b10b      	cbz	r3, 8006314 <_free_r+0x50>
 8006310:	42a3      	cmp	r3, r4
 8006312:	d9fa      	bls.n	800630a <_free_r+0x46>
 8006314:	6811      	ldr	r1, [r2, #0]
 8006316:	1855      	adds	r5, r2, r1
 8006318:	42a5      	cmp	r5, r4
 800631a:	d10b      	bne.n	8006334 <_free_r+0x70>
 800631c:	6824      	ldr	r4, [r4, #0]
 800631e:	4421      	add	r1, r4
 8006320:	1854      	adds	r4, r2, r1
 8006322:	42a3      	cmp	r3, r4
 8006324:	6011      	str	r1, [r2, #0]
 8006326:	d1e0      	bne.n	80062ea <_free_r+0x26>
 8006328:	681c      	ldr	r4, [r3, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	6053      	str	r3, [r2, #4]
 800632e:	4421      	add	r1, r4
 8006330:	6011      	str	r1, [r2, #0]
 8006332:	e7da      	b.n	80062ea <_free_r+0x26>
 8006334:	d902      	bls.n	800633c <_free_r+0x78>
 8006336:	230c      	movs	r3, #12
 8006338:	6003      	str	r3, [r0, #0]
 800633a:	e7d6      	b.n	80062ea <_free_r+0x26>
 800633c:	6825      	ldr	r5, [r4, #0]
 800633e:	1961      	adds	r1, r4, r5
 8006340:	428b      	cmp	r3, r1
 8006342:	bf04      	itt	eq
 8006344:	6819      	ldreq	r1, [r3, #0]
 8006346:	685b      	ldreq	r3, [r3, #4]
 8006348:	6063      	str	r3, [r4, #4]
 800634a:	bf04      	itt	eq
 800634c:	1949      	addeq	r1, r1, r5
 800634e:	6021      	streq	r1, [r4, #0]
 8006350:	6054      	str	r4, [r2, #4]
 8006352:	e7ca      	b.n	80062ea <_free_r+0x26>
 8006354:	b003      	add	sp, #12
 8006356:	bd30      	pop	{r4, r5, pc}
 8006358:	24000130 	.word	0x24000130

0800635c <_read_r>:
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	4d07      	ldr	r5, [pc, #28]	; (800637c <_read_r+0x20>)
 8006360:	4604      	mov	r4, r0
 8006362:	4608      	mov	r0, r1
 8006364:	4611      	mov	r1, r2
 8006366:	2200      	movs	r2, #0
 8006368:	602a      	str	r2, [r5, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	f7fa fb6e 	bl	8000a4c <_read>
 8006370:	1c43      	adds	r3, r0, #1
 8006372:	d102      	bne.n	800637a <_read_r+0x1e>
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	b103      	cbz	r3, 800637a <_read_r+0x1e>
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	bd38      	pop	{r3, r4, r5, pc}
 800637c:	24000138 	.word	0x24000138

08006380 <_fstat_r>:
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	4d07      	ldr	r5, [pc, #28]	; (80063a0 <_fstat_r+0x20>)
 8006384:	2300      	movs	r3, #0
 8006386:	4604      	mov	r4, r0
 8006388:	4608      	mov	r0, r1
 800638a:	4611      	mov	r1, r2
 800638c:	602b      	str	r3, [r5, #0]
 800638e:	f7fa fb86 	bl	8000a9e <_fstat>
 8006392:	1c43      	adds	r3, r0, #1
 8006394:	d102      	bne.n	800639c <_fstat_r+0x1c>
 8006396:	682b      	ldr	r3, [r5, #0]
 8006398:	b103      	cbz	r3, 800639c <_fstat_r+0x1c>
 800639a:	6023      	str	r3, [r4, #0]
 800639c:	bd38      	pop	{r3, r4, r5, pc}
 800639e:	bf00      	nop
 80063a0:	24000138 	.word	0x24000138

080063a4 <_isatty_r>:
 80063a4:	b538      	push	{r3, r4, r5, lr}
 80063a6:	4d06      	ldr	r5, [pc, #24]	; (80063c0 <_isatty_r+0x1c>)
 80063a8:	2300      	movs	r3, #0
 80063aa:	4604      	mov	r4, r0
 80063ac:	4608      	mov	r0, r1
 80063ae:	602b      	str	r3, [r5, #0]
 80063b0:	f7fa fb85 	bl	8000abe <_isatty>
 80063b4:	1c43      	adds	r3, r0, #1
 80063b6:	d102      	bne.n	80063be <_isatty_r+0x1a>
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	b103      	cbz	r3, 80063be <_isatty_r+0x1a>
 80063bc:	6023      	str	r3, [r4, #0]
 80063be:	bd38      	pop	{r3, r4, r5, pc}
 80063c0:	24000138 	.word	0x24000138

080063c4 <_init>:
 80063c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c6:	bf00      	nop
 80063c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ca:	bc08      	pop	{r3}
 80063cc:	469e      	mov	lr, r3
 80063ce:	4770      	bx	lr

080063d0 <_fini>:
 80063d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d2:	bf00      	nop
 80063d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063d6:	bc08      	pop	{r3}
 80063d8:	469e      	mov	lr, r3
 80063da:	4770      	bx	lr
