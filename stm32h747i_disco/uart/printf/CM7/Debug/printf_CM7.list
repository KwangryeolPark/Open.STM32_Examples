
printf_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b88  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08007e28  08007e28  00017e28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008254  08008254  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008254  08008254  00018254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800825c  0800825c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800825c  0800825c  0001825c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008260  08008260  00018260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  08008264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  240001e0  08008444  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240002a8  08008444  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113c8  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d1  00000000  00000000  000315d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  000337a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  00034398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f725  00000000  00000000  00034ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107bd  00000000  00000000  000745c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00195e13  00000000  00000000  00084d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021ab95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e88  00000000  00000000  0021abe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007e10 	.word	0x08007e10

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	08007e10 	.word	0x08007e10

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_GPIO_Init+0x30>)
 80007c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007cc:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <MX_GPIO_Init+0x30>)
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_GPIO_Init+0x30>)
 80007d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]

}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	58024400 	.word	0x58024400

080007f4 <_write>:

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int fd, char * ptr, int len) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	b29a      	uxth	r2, r3
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
 8000808:	68b9      	ldr	r1, [r7, #8]
 800080a:	4804      	ldr	r0, [pc, #16]	; (800081c <_write+0x28>)
 800080c:	f003 fd30 	bl	8004270 <HAL_UART_Transmit>
	return len;
 8000810:	687b      	ldr	r3, [r7, #4]
}
 8000812:	4618      	mov	r0, r3
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	24000200 	.word	0x24000200

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000826:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800082a:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800082c:	bf00      	nop
 800082e:	4b30      	ldr	r3, [pc, #192]	; (80008f0 <main+0xd0>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000836:	2b00      	cmp	r3, #0
 8000838:	d004      	beq.n	8000844 <main+0x24>
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	1e5a      	subs	r2, r3, #1
 800083e:	60fa      	str	r2, [r7, #12]
 8000840:	2b00      	cmp	r3, #0
 8000842:	dcf4      	bgt.n	800082e <main+0xe>
  if ( timeout < 0 )
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2b00      	cmp	r3, #0
 8000848:	da01      	bge.n	800084e <main+0x2e>
  {
  Error_Handler();
 800084a:	f000 f8bd 	bl	80009c8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084e:	f000 fa8f 	bl	8000d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000852:	f000 f851 	bl	80008f8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000856:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <main+0xd0>)
 8000858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085c:	4a24      	ldr	r2, [pc, #144]	; (80008f0 <main+0xd0>)
 800085e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000862:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000866:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <main+0xd0>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000874:	2000      	movs	r0, #0
 8000876:	f000 fdd1 	bl	800141c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800087a:	2100      	movs	r1, #0
 800087c:	2000      	movs	r0, #0
 800087e:	f000 fde7 	bl	8001450 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000886:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000888:	bf00      	nop
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <main+0xd0>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000892:	2b00      	cmp	r3, #0
 8000894:	d104      	bne.n	80008a0 <main+0x80>
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	1e5a      	subs	r2, r3, #1
 800089a:	60fa      	str	r2, [r7, #12]
 800089c:	2b00      	cmp	r3, #0
 800089e:	dcf4      	bgt.n	800088a <main+0x6a>
if ( timeout < 0 )
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	da01      	bge.n	80008aa <main+0x8a>
{
Error_Handler();
 80008a6:	f000 f88f 	bl	80009c8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008aa:	f7ff ff89 	bl	80007c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80008ae:	f000 f97f 	bl	8000bb0 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int count = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
  float fcount = 0.0;
 80008b6:	f04f 0300 	mov.w	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
  {
	  // To printf the floating number, you set option in
	  // Project -> Properties -> C/C++ Build -> Settings -> Tool Settings -> MCU GCC Linker -> Miscellaneous
	  // -u_printf_float
	  // Refer to https://swiftcam.tistory.com/144
	  printf("Count: %d\tFloat Count: %f\r\n", count, fcount);
 80008bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80008c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008c4:	ec53 2b17 	vmov	r2, r3, d7
 80008c8:	68b9      	ldr	r1, [r7, #8]
 80008ca:	480a      	ldr	r0, [pc, #40]	; (80008f4 <main+0xd4>)
 80008cc:	f005 fa5a 	bl	8005d84 <iprintf>
	  count++;
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	3301      	adds	r3, #1
 80008d4:	60bb      	str	r3, [r7, #8]
	  fcount += 0.5;
 80008d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80008da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80008de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008e2:	edc7 7a01 	vstr	s15, [r7, #4]
	  HAL_Delay(1000);
 80008e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ea:	f000 fad3 	bl	8000e94 <HAL_Delay>
	  printf("Count: %d\tFloat Count: %f\r\n", count, fcount);
 80008ee:	e7e5      	b.n	80008bc <main+0x9c>
 80008f0:	58024400 	.word	0x58024400
 80008f4:	08007e28 	.word	0x08007e28

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b09c      	sub	sp, #112	; 0x70
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	224c      	movs	r2, #76	; 0x4c
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f004 fdf0 	bl	80054ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2220      	movs	r2, #32
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f004 fdea 	bl	80054ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000918:	2004      	movs	r0, #4
 800091a:	f000 fdad 	bl	8001478 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <SystemClock_Config+0xc8>)
 8000924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000926:	4a26      	ldr	r2, [pc, #152]	; (80009c0 <SystemClock_Config+0xc8>)
 8000928:	f023 0301 	bic.w	r3, r3, #1
 800092c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800092e:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <SystemClock_Config+0xc8>)
 8000930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <SystemClock_Config+0xcc>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	4a21      	ldr	r2, [pc, #132]	; (80009c4 <SystemClock_Config+0xcc>)
 800093e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000942:	6193      	str	r3, [r2, #24]
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <SystemClock_Config+0xcc>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000950:	bf00      	nop
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <SystemClock_Config+0xcc>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800095a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800095e:	d1f8      	bne.n	8000952 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000960:	2302      	movs	r3, #2
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000964:	2301      	movs	r3, #1
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000968:	2340      	movs	r3, #64	; 0x40
 800096a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800096c:	2300      	movs	r3, #0
 800096e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4618      	mov	r0, r3
 8000976:	f000 fdd9 	bl	800152c <HAL_RCC_OscConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000980:	f000 f822 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000984:	233f      	movs	r3, #63	; 0x3f
 8000986:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000988:	2300      	movs	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f001 fa19 	bl	8001de0 <HAL_RCC_ClockConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009b4:	f000 f808 	bl	80009c8 <Error_Handler>
  }
}
 80009b8:	bf00      	nop
 80009ba:	3770      	adds	r7, #112	; 0x70
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	58000400 	.word	0x58000400
 80009c4:	58024800 	.word	0x58024800

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <Error_Handler+0x8>
	...

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <HAL_MspInit+0x30>)
 80009dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009e0:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_MspInit+0x30>)
 80009e2:	f043 0302 	orr.w	r3, r3, #2
 80009e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_MspInit+0x30>)
 80009ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	58024400 	.word	0x58024400

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a54:	f000 f9fe 	bl	8000e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return 1;
 8000a60:	2301      	movs	r3, #1
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <_kill>:

int _kill(int pid, int sig)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a76:	f004 fd0f 	bl	8005498 <__errno>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2216      	movs	r2, #22
 8000a7e:	601a      	str	r2, [r3, #0]
  return -1;
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <_exit>:

void _exit (int status)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a94:	f04f 31ff 	mov.w	r1, #4294967295
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ffe7 	bl	8000a6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a9e:	e7fe      	b.n	8000a9e <_exit+0x12>

08000aa0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	e00a      	b.n	8000ac8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ab2:	f3af 8000 	nop.w
 8000ab6:	4601      	mov	r1, r0
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	1c5a      	adds	r2, r3, #1
 8000abc:	60ba      	str	r2, [r7, #8]
 8000abe:	b2ca      	uxtb	r2, r1
 8000ac0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	dbf0      	blt.n	8000ab2 <_read+0x12>
  }

  return len;
 8000ad0:	687b      	ldr	r3, [r7, #4]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b02:	605a      	str	r2, [r3, #4]
  return 0;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <_isatty>:

int _isatty(int file)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
	...

08000b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b4c:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <_sbrk+0x5c>)
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <_sbrk+0x60>)
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d102      	bne.n	8000b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <_sbrk+0x64>)
 8000b62:	4a12      	ldr	r2, [pc, #72]	; (8000bac <_sbrk+0x68>)
 8000b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d207      	bcs.n	8000b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b74:	f004 fc90 	bl	8005498 <__errno>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b82:	e009      	b.n	8000b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <_sbrk+0x64>)
 8000b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b96:	68fb      	ldr	r3, [r7, #12]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	24080000 	.word	0x24080000
 8000ba4:	00000400 	.word	0x00000400
 8000ba8:	240001fc 	.word	0x240001fc
 8000bac:	240002a8 	.word	0x240002a8

08000bb0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb4:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000bb6:	4a23      	ldr	r2, [pc, #140]	; (8000c44 <MX_USART1_UART_Init+0x94>)
 8000bb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bba:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc2:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bf8:	4811      	ldr	r0, [pc, #68]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000bfa:	f003 fae9 	bl	80041d0 <HAL_UART_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c04:	f7ff fee0 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	480d      	ldr	r0, [pc, #52]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000c0c:	f004 fb79 	bl	8005302 <HAL_UARTEx_SetTxFifoThreshold>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c16:	f7ff fed7 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4808      	ldr	r0, [pc, #32]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000c1e:	f004 fbae 	bl	800537e <HAL_UARTEx_SetRxFifoThreshold>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c28:	f7ff fece 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000c2e:	f004 fb2f 	bl	8005290 <HAL_UARTEx_DisableFifoMode>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c38:	f7ff fec6 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	24000200 	.word	0x24000200
 8000c44:	40011000 	.word	0x40011000

08000c48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b0bc      	sub	sp, #240	; 0xf0
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	22c8      	movs	r2, #200	; 0xc8
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f004 fc3f 	bl	80054ec <memset>
  if(uartHandle->Instance==USART1)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a27      	ldr	r2, [pc, #156]	; (8000d10 <HAL_UART_MspInit+0xc8>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d146      	bne.n	8000d06 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c78:	f04f 0201 	mov.w	r2, #1
 8000c7c:	f04f 0300 	mov.w	r3, #0
 8000c80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 fc32 	bl	80024f8 <HAL_RCCEx_PeriphCLKConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c9a:	f7ff fe95 	bl	80009c8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <HAL_UART_MspInit+0xcc>)
 8000ca0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	; (8000d14 <HAL_UART_MspInit+0xcc>)
 8000ca6:	f043 0310 	orr.w	r3, r3, #16
 8000caa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <HAL_UART_MspInit+0xcc>)
 8000cb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cb4:	f003 0310 	and.w	r3, r3, #16
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <HAL_UART_MspInit+0xcc>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	4a14      	ldr	r2, [pc, #80]	; (8000d14 <HAL_UART_MspInit+0xcc>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_UART_MspInit+0xcc>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000cda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cf4:	2307      	movs	r3, #7
 8000cf6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4805      	ldr	r0, [pc, #20]	; (8000d18 <HAL_UART_MspInit+0xd0>)
 8000d02:	f000 f9db 	bl	80010bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d06:	bf00      	nop
 8000d08:	37f0      	adds	r7, #240	; 0xf0
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40011000 	.word	0x40011000
 8000d14:	58024400 	.word	0x58024400
 8000d18:	58020000 	.word	0x58020000

08000d1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d20:	f7ff fcb8 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d24:	480c      	ldr	r0, [pc, #48]	; (8000d58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d26:	490d      	ldr	r1, [pc, #52]	; (8000d5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d28:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d3c:	4c0a      	ldr	r4, [pc, #40]	; (8000d68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d4a:	f004 fbab 	bl	80054a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4e:	f7ff fd67 	bl	8000820 <main>
  bx  lr
 8000d52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d54:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d58:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d5c:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8000d60:	08008264 	.word	0x08008264
  ldr r2, =_sbss
 8000d64:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8000d68:	240002a8 	.word	0x240002a8

08000d6c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC3_IRQHandler>
	...

08000d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d76:	2003      	movs	r0, #3
 8000d78:	f000 f96e 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d7c:	f001 f9e6 	bl	800214c <HAL_RCC_GetSysClockFreq>
 8000d80:	4602      	mov	r2, r0
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <HAL_Init+0x68>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	0a1b      	lsrs	r3, r3, #8
 8000d88:	f003 030f 	and.w	r3, r3, #15
 8000d8c:	4913      	ldr	r1, [pc, #76]	; (8000ddc <HAL_Init+0x6c>)
 8000d8e:	5ccb      	ldrb	r3, [r1, r3]
 8000d90:	f003 031f 	and.w	r3, r3, #31
 8000d94:	fa22 f303 	lsr.w	r3, r2, r3
 8000d98:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <HAL_Init+0x68>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <HAL_Init+0x6c>)
 8000da4:	5cd3      	ldrb	r3, [r2, r3]
 8000da6:	f003 031f 	and.w	r3, r3, #31
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	fa22 f303 	lsr.w	r3, r2, r3
 8000db0:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <HAL_Init+0x70>)
 8000db2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000db4:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <HAL_Init+0x74>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 f814 	bl	8000de8 <HAL_InitTick>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e002      	b.n	8000dd0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000dca:	f7ff fe03 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	58024400 	.word	0x58024400
 8000ddc:	08007e44 	.word	0x08007e44
 8000de0:	24000004 	.word	0x24000004
 8000de4:	24000000 	.word	0x24000000

08000de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <HAL_InitTick+0x60>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d101      	bne.n	8000dfc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e021      	b.n	8000e40 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <HAL_InitTick+0x64>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_InitTick+0x60>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f945 	bl	80010a2 <HAL_SYSTICK_Config>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00e      	b.n	8000e40 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b0f      	cmp	r3, #15
 8000e26:	d80a      	bhi.n	8000e3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f000 f91d 	bl	800106e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e34:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <HAL_InitTick+0x68>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e000      	b.n	8000e40 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2400000c 	.word	0x2400000c
 8000e4c:	24000000 	.word	0x24000000
 8000e50:	24000008 	.word	0x24000008

08000e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x20>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x24>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <HAL_IncTick+0x24>)
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	2400000c 	.word	0x2400000c
 8000e78:	24000294 	.word	0x24000294

08000e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <HAL_GetTick+0x14>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	24000294 	.word	0x24000294

08000e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff ffee 	bl	8000e7c <HAL_GetTick>
 8000ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eac:	d005      	beq.n	8000eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_Delay+0x44>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eba:	bf00      	nop
 8000ebc:	f7ff ffde 	bl	8000e7c <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d8f7      	bhi.n	8000ebc <HAL_Delay+0x28>
  {
  }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2400000c 	.word	0x2400000c

08000edc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_GetREVID+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	0c1b      	lsrs	r3, r3, #16
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	5c001000 	.word	0x5c001000

08000ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <__NVIC_SetPriorityGrouping+0x40>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f10:	4013      	ands	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <__NVIC_SetPriorityGrouping+0x40>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00
 8000f38:	05fa0000 	.word	0x05fa0000

08000f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <__NVIC_GetPriorityGrouping+0x18>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	f003 0307 	and.w	r3, r3, #7
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db0a      	blt.n	8000f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	490c      	ldr	r1, [pc, #48]	; (8000fa4 <__NVIC_SetPriority+0x4c>)
 8000f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f80:	e00a      	b.n	8000f98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <__NVIC_SetPriority+0x50>)
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	761a      	strb	r2, [r3, #24]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	; 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f1c3 0307 	rsb	r3, r3, #7
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	bf28      	it	cs
 8000fca:	2304      	movcs	r3, #4
 8000fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d902      	bls.n	8000fdc <NVIC_EncodePriority+0x30>
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3b03      	subs	r3, #3
 8000fda:	e000      	b.n	8000fde <NVIC_EncodePriority+0x32>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	401a      	ands	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	4313      	orrs	r3, r2
         );
}
 8001006:	4618      	mov	r0, r3
 8001008:	3724      	adds	r7, #36	; 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001024:	d301      	bcc.n	800102a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001026:	2301      	movs	r3, #1
 8001028:	e00f      	b.n	800104a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <SysTick_Config+0x40>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001032:	210f      	movs	r1, #15
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f7ff ff8e 	bl	8000f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <SysTick_Config+0x40>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <SysTick_Config+0x40>)
 8001044:	2207      	movs	r2, #7
 8001046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	e000e010 	.word	0xe000e010

08001058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff47 	bl	8000ef4 <__NVIC_SetPriorityGrouping>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800107c:	f7ff ff5e 	bl	8000f3c <__NVIC_GetPriorityGrouping>
 8001080:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	6978      	ldr	r0, [r7, #20]
 8001088:	f7ff ff90 	bl	8000fac <NVIC_EncodePriority>
 800108c:	4602      	mov	r2, r0
 800108e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff5f 	bl	8000f58 <__NVIC_SetPriority>
}
 800109a:	bf00      	nop
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ffb2 	bl	8001014 <SysTick_Config>
 80010b0:	4603      	mov	r3, r0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80010ca:	4b89      	ldr	r3, [pc, #548]	; (80012f0 <HAL_GPIO_Init+0x234>)
 80010cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010ce:	e194      	b.n	80013fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	2101      	movs	r1, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa01 f303 	lsl.w	r3, r1, r3
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 8186 	beq.w	80013f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d005      	beq.n	8001100 <HAL_GPIO_Init+0x44>
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d130      	bne.n	8001162 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001136:	2201      	movs	r2, #1
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	091b      	lsrs	r3, r3, #4
 800114c:	f003 0201 	and.w	r2, r3, #1
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	2b03      	cmp	r3, #3
 800116c:	d017      	beq.n	800119e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d123      	bne.n	80011f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	08da      	lsrs	r2, r3, #3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3208      	adds	r2, #8
 80011b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	220f      	movs	r2, #15
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	691a      	ldr	r2, [r3, #16]
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	08da      	lsrs	r2, r3, #3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3208      	adds	r2, #8
 80011ec:	69b9      	ldr	r1, [r7, #24]
 80011ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	2203      	movs	r2, #3
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0203 	and.w	r2, r3, #3
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 80e0 	beq.w	80013f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001234:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <HAL_GPIO_Init+0x238>)
 8001236:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800123a:	4a2e      	ldr	r2, [pc, #184]	; (80012f4 <HAL_GPIO_Init+0x238>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001244:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <HAL_GPIO_Init+0x238>)
 8001246:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001252:	4a29      	ldr	r2, [pc, #164]	; (80012f8 <HAL_GPIO_Init+0x23c>)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	3302      	adds	r3, #2
 800125a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	220f      	movs	r2, #15
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a20      	ldr	r2, [pc, #128]	; (80012fc <HAL_GPIO_Init+0x240>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d052      	beq.n	8001324 <HAL_GPIO_Init+0x268>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a1f      	ldr	r2, [pc, #124]	; (8001300 <HAL_GPIO_Init+0x244>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d031      	beq.n	80012ea <HAL_GPIO_Init+0x22e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a1e      	ldr	r2, [pc, #120]	; (8001304 <HAL_GPIO_Init+0x248>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d02b      	beq.n	80012e6 <HAL_GPIO_Init+0x22a>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a1d      	ldr	r2, [pc, #116]	; (8001308 <HAL_GPIO_Init+0x24c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d025      	beq.n	80012e2 <HAL_GPIO_Init+0x226>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a1c      	ldr	r2, [pc, #112]	; (800130c <HAL_GPIO_Init+0x250>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d01f      	beq.n	80012de <HAL_GPIO_Init+0x222>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a1b      	ldr	r2, [pc, #108]	; (8001310 <HAL_GPIO_Init+0x254>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d019      	beq.n	80012da <HAL_GPIO_Init+0x21e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a1a      	ldr	r2, [pc, #104]	; (8001314 <HAL_GPIO_Init+0x258>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d013      	beq.n	80012d6 <HAL_GPIO_Init+0x21a>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a19      	ldr	r2, [pc, #100]	; (8001318 <HAL_GPIO_Init+0x25c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d00d      	beq.n	80012d2 <HAL_GPIO_Init+0x216>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a18      	ldr	r2, [pc, #96]	; (800131c <HAL_GPIO_Init+0x260>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d007      	beq.n	80012ce <HAL_GPIO_Init+0x212>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a17      	ldr	r2, [pc, #92]	; (8001320 <HAL_GPIO_Init+0x264>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d101      	bne.n	80012ca <HAL_GPIO_Init+0x20e>
 80012c6:	2309      	movs	r3, #9
 80012c8:	e02d      	b.n	8001326 <HAL_GPIO_Init+0x26a>
 80012ca:	230a      	movs	r3, #10
 80012cc:	e02b      	b.n	8001326 <HAL_GPIO_Init+0x26a>
 80012ce:	2308      	movs	r3, #8
 80012d0:	e029      	b.n	8001326 <HAL_GPIO_Init+0x26a>
 80012d2:	2307      	movs	r3, #7
 80012d4:	e027      	b.n	8001326 <HAL_GPIO_Init+0x26a>
 80012d6:	2306      	movs	r3, #6
 80012d8:	e025      	b.n	8001326 <HAL_GPIO_Init+0x26a>
 80012da:	2305      	movs	r3, #5
 80012dc:	e023      	b.n	8001326 <HAL_GPIO_Init+0x26a>
 80012de:	2304      	movs	r3, #4
 80012e0:	e021      	b.n	8001326 <HAL_GPIO_Init+0x26a>
 80012e2:	2303      	movs	r3, #3
 80012e4:	e01f      	b.n	8001326 <HAL_GPIO_Init+0x26a>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e01d      	b.n	8001326 <HAL_GPIO_Init+0x26a>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e01b      	b.n	8001326 <HAL_GPIO_Init+0x26a>
 80012ee:	bf00      	nop
 80012f0:	58000080 	.word	0x58000080
 80012f4:	58024400 	.word	0x58024400
 80012f8:	58000400 	.word	0x58000400
 80012fc:	58020000 	.word	0x58020000
 8001300:	58020400 	.word	0x58020400
 8001304:	58020800 	.word	0x58020800
 8001308:	58020c00 	.word	0x58020c00
 800130c:	58021000 	.word	0x58021000
 8001310:	58021400 	.word	0x58021400
 8001314:	58021800 	.word	0x58021800
 8001318:	58021c00 	.word	0x58021c00
 800131c:	58022000 	.word	0x58022000
 8001320:	58022400 	.word	0x58022400
 8001324:	2300      	movs	r3, #0
 8001326:	69fa      	ldr	r2, [r7, #28]
 8001328:	f002 0203 	and.w	r2, r2, #3
 800132c:	0092      	lsls	r2, r2, #2
 800132e:	4093      	lsls	r3, r2
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001336:	4938      	ldr	r1, [pc, #224]	; (8001418 <HAL_GPIO_Init+0x35c>)
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800136a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001398:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	3301      	adds	r3, #1
 80013f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	fa22 f303 	lsr.w	r3, r2, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	f47f ae63 	bne.w	80010d0 <HAL_GPIO_Init+0x14>
  }
}
 800140a:	bf00      	nop
 800140c:	bf00      	nop
 800140e:	3724      	adds	r7, #36	; 0x24
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	58000400 	.word	0x58000400

0800141c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001424:	4a08      	ldr	r2, [pc, #32]	; (8001448 <HAL_HSEM_FastTake+0x2c>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3320      	adds	r3, #32
 800142a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142e:	4a07      	ldr	r2, [pc, #28]	; (800144c <HAL_HSEM_FastTake+0x30>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d101      	bne.n	8001438 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	e000      	b.n	800143a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	58026400 	.word	0x58026400
 800144c:	80000300 	.word	0x80000300

08001450 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800145a:	4906      	ldr	r1, [pc, #24]	; (8001474 <HAL_HSEM_Release+0x24>)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	58026400 	.word	0x58026400

08001478 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001480:	4b29      	ldr	r3, [pc, #164]	; (8001528 <HAL_PWREx_ConfigSupply+0xb0>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	2b06      	cmp	r3, #6
 800148a:	d00a      	beq.n	80014a2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <HAL_PWREx_ConfigSupply+0xb0>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	429a      	cmp	r2, r3
 8001498:	d001      	beq.n	800149e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e040      	b.n	8001520 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	e03e      	b.n	8001520 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80014a2:	4b21      	ldr	r3, [pc, #132]	; (8001528 <HAL_PWREx_ConfigSupply+0xb0>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80014aa:	491f      	ldr	r1, [pc, #124]	; (8001528 <HAL_PWREx_ConfigSupply+0xb0>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80014b2:	f7ff fce3 	bl	8000e7c <HAL_GetTick>
 80014b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014b8:	e009      	b.n	80014ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014ba:	f7ff fcdf 	bl	8000e7c <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014c8:	d901      	bls.n	80014ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e028      	b.n	8001520 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <HAL_PWREx_ConfigSupply+0xb0>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014da:	d1ee      	bne.n	80014ba <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b1e      	cmp	r3, #30
 80014e0:	d008      	beq.n	80014f4 <HAL_PWREx_ConfigSupply+0x7c>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b2e      	cmp	r3, #46	; 0x2e
 80014e6:	d005      	beq.n	80014f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b1d      	cmp	r3, #29
 80014ec:	d002      	beq.n	80014f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b2d      	cmp	r3, #45	; 0x2d
 80014f2:	d114      	bne.n	800151e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80014f4:	f7ff fcc2 	bl	8000e7c <HAL_GetTick>
 80014f8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80014fa:	e009      	b.n	8001510 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014fc:	f7ff fcbe 	bl	8000e7c <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800150a:	d901      	bls.n	8001510 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e007      	b.n	8001520 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <HAL_PWREx_ConfigSupply+0xb0>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800151c:	d1ee      	bne.n	80014fc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	58024800 	.word	0x58024800

0800152c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08c      	sub	sp, #48	; 0x30
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d102      	bne.n	8001540 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	f000 bc48 	b.w	8001dd0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 8088 	beq.w	800165e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800154e:	4b99      	ldr	r3, [pc, #612]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001558:	4b96      	ldr	r3, [pc, #600]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800155e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001560:	2b10      	cmp	r3, #16
 8001562:	d007      	beq.n	8001574 <HAL_RCC_OscConfig+0x48>
 8001564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001566:	2b18      	cmp	r3, #24
 8001568:	d111      	bne.n	800158e <HAL_RCC_OscConfig+0x62>
 800156a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d10c      	bne.n	800158e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001574:	4b8f      	ldr	r3, [pc, #572]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d06d      	beq.n	800165c <HAL_RCC_OscConfig+0x130>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d169      	bne.n	800165c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	f000 bc21 	b.w	8001dd0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001596:	d106      	bne.n	80015a6 <HAL_RCC_OscConfig+0x7a>
 8001598:	4b86      	ldr	r3, [pc, #536]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a85      	ldr	r2, [pc, #532]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 800159e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	e02e      	b.n	8001604 <HAL_RCC_OscConfig+0xd8>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x9c>
 80015ae:	4b81      	ldr	r3, [pc, #516]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a80      	ldr	r2, [pc, #512]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	4b7e      	ldr	r3, [pc, #504]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a7d      	ldr	r2, [pc, #500]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e01d      	b.n	8001604 <HAL_RCC_OscConfig+0xd8>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d0:	d10c      	bne.n	80015ec <HAL_RCC_OscConfig+0xc0>
 80015d2:	4b78      	ldr	r3, [pc, #480]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a77      	ldr	r2, [pc, #476]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4b75      	ldr	r3, [pc, #468]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a74      	ldr	r2, [pc, #464]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e00b      	b.n	8001604 <HAL_RCC_OscConfig+0xd8>
 80015ec:	4b71      	ldr	r3, [pc, #452]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a70      	ldr	r2, [pc, #448]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b6e      	ldr	r3, [pc, #440]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a6d      	ldr	r2, [pc, #436]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d013      	beq.n	8001634 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fc36 	bl	8000e7c <HAL_GetTick>
 8001610:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fc32 	bl	8000e7c <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	; 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e3d4      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001626:	4b63      	ldr	r3, [pc, #396]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0xe8>
 8001632:	e014      	b.n	800165e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fc22 	bl	8000e7c <HAL_GetTick>
 8001638:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff fc1e 	bl	8000e7c <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e3c0      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800164e:	4b59      	ldr	r3, [pc, #356]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x110>
 800165a:	e000      	b.n	800165e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 80ca 	beq.w	8001800 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800166c:	4b51      	ldr	r3, [pc, #324]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001674:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001676:	4b4f      	ldr	r3, [pc, #316]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 8001678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d007      	beq.n	8001692 <HAL_RCC_OscConfig+0x166>
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	2b18      	cmp	r3, #24
 8001686:	d156      	bne.n	8001736 <HAL_RCC_OscConfig+0x20a>
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d151      	bne.n	8001736 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001692:	4b48      	ldr	r3, [pc, #288]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	2b00      	cmp	r3, #0
 800169c:	d005      	beq.n	80016aa <HAL_RCC_OscConfig+0x17e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e392      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016aa:	4b42      	ldr	r3, [pc, #264]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 0219 	bic.w	r2, r3, #25
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	493f      	ldr	r1, [pc, #252]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff fbde 	bl	8000e7c <HAL_GetTick>
 80016c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c4:	f7ff fbda 	bl	8000e7c <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e37c      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016d6:	4b37      	ldr	r3, [pc, #220]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e2:	f7ff fbfb 	bl	8000edc <HAL_GetREVID>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d817      	bhi.n	8001720 <HAL_RCC_OscConfig+0x1f4>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	2b40      	cmp	r3, #64	; 0x40
 80016f6:	d108      	bne.n	800170a <HAL_RCC_OscConfig+0x1de>
 80016f8:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001700:	4a2c      	ldr	r2, [pc, #176]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 8001702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001706:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001708:	e07a      	b.n	8001800 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170a:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	031b      	lsls	r3, r3, #12
 8001718:	4926      	ldr	r1, [pc, #152]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 800171a:	4313      	orrs	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800171e:	e06f      	b.n	8001800 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001720:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	061b      	lsls	r3, r3, #24
 800172e:	4921      	ldr	r1, [pc, #132]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001734:	e064      	b.n	8001800 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d047      	beq.n	80017ce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800173e:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 0219 	bic.w	r2, r3, #25
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	491a      	ldr	r1, [pc, #104]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 800174c:	4313      	orrs	r3, r2
 800174e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff fb94 	bl	8000e7c <HAL_GetTick>
 8001754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001758:	f7ff fb90 	bl	8000e7c <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e332      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800176a:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001776:	f7ff fbb1 	bl	8000edc <HAL_GetREVID>
 800177a:	4603      	mov	r3, r0
 800177c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001780:	4293      	cmp	r3, r2
 8001782:	d819      	bhi.n	80017b8 <HAL_RCC_OscConfig+0x28c>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	2b40      	cmp	r3, #64	; 0x40
 800178a:	d108      	bne.n	800179e <HAL_RCC_OscConfig+0x272>
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 8001796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800179a:	6053      	str	r3, [r2, #4]
 800179c:	e030      	b.n	8001800 <HAL_RCC_OscConfig+0x2d4>
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	031b      	lsls	r3, r3, #12
 80017ac:	4901      	ldr	r1, [pc, #4]	; (80017b4 <HAL_RCC_OscConfig+0x288>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	604b      	str	r3, [r1, #4]
 80017b2:	e025      	b.n	8001800 <HAL_RCC_OscConfig+0x2d4>
 80017b4:	58024400 	.word	0x58024400
 80017b8:	4b9a      	ldr	r3, [pc, #616]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	061b      	lsls	r3, r3, #24
 80017c6:	4997      	ldr	r1, [pc, #604]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
 80017cc:	e018      	b.n	8001800 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ce:	4b95      	ldr	r3, [pc, #596]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a94      	ldr	r2, [pc, #592]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017da:	f7ff fb4f 	bl	8000e7c <HAL_GetTick>
 80017de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e2:	f7ff fb4b 	bl	8000e7c <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e2ed      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017f4:	4b8b      	ldr	r3, [pc, #556]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f0      	bne.n	80017e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0310 	and.w	r3, r3, #16
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80a9 	beq.w	8001960 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800180e:	4b85      	ldr	r3, [pc, #532]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001816:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001818:	4b82      	ldr	r3, [pc, #520]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	2b08      	cmp	r3, #8
 8001822:	d007      	beq.n	8001834 <HAL_RCC_OscConfig+0x308>
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b18      	cmp	r3, #24
 8001828:	d13a      	bne.n	80018a0 <HAL_RCC_OscConfig+0x374>
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b01      	cmp	r3, #1
 8001832:	d135      	bne.n	80018a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001834:	4b7b      	ldr	r3, [pc, #492]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_RCC_OscConfig+0x320>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69db      	ldr	r3, [r3, #28]
 8001844:	2b80      	cmp	r3, #128	; 0x80
 8001846:	d001      	beq.n	800184c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e2c1      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800184c:	f7ff fb46 	bl	8000edc <HAL_GetREVID>
 8001850:	4603      	mov	r3, r0
 8001852:	f241 0203 	movw	r2, #4099	; 0x1003
 8001856:	4293      	cmp	r3, r2
 8001858:	d817      	bhi.n	800188a <HAL_RCC_OscConfig+0x35e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	2b20      	cmp	r3, #32
 8001860:	d108      	bne.n	8001874 <HAL_RCC_OscConfig+0x348>
 8001862:	4b70      	ldr	r3, [pc, #448]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800186a:	4a6e      	ldr	r2, [pc, #440]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 800186c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001870:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001872:	e075      	b.n	8001960 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001874:	4b6b      	ldr	r3, [pc, #428]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	069b      	lsls	r3, r3, #26
 8001882:	4968      	ldr	r1, [pc, #416]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001888:	e06a      	b.n	8001960 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800188a:	4b66      	ldr	r3, [pc, #408]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	061b      	lsls	r3, r3, #24
 8001898:	4962      	ldr	r1, [pc, #392]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 800189a:	4313      	orrs	r3, r2
 800189c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800189e:	e05f      	b.n	8001960 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d042      	beq.n	800192e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80018a8:	4b5e      	ldr	r3, [pc, #376]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a5d      	ldr	r2, [pc, #372]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80018ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff fae2 	bl	8000e7c <HAL_GetTick>
 80018b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80018bc:	f7ff fade 	bl	8000e7c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e280      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018ce:	4b55      	ldr	r3, [pc, #340]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018da:	f7ff faff 	bl	8000edc <HAL_GetREVID>
 80018de:	4603      	mov	r3, r0
 80018e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d817      	bhi.n	8001918 <HAL_RCC_OscConfig+0x3ec>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	2b20      	cmp	r3, #32
 80018ee:	d108      	bne.n	8001902 <HAL_RCC_OscConfig+0x3d6>
 80018f0:	4b4c      	ldr	r3, [pc, #304]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80018f8:	4a4a      	ldr	r2, [pc, #296]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80018fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018fe:	6053      	str	r3, [r2, #4]
 8001900:	e02e      	b.n	8001960 <HAL_RCC_OscConfig+0x434>
 8001902:	4b48      	ldr	r3, [pc, #288]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	069b      	lsls	r3, r3, #26
 8001910:	4944      	ldr	r1, [pc, #272]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001912:	4313      	orrs	r3, r2
 8001914:	604b      	str	r3, [r1, #4]
 8001916:	e023      	b.n	8001960 <HAL_RCC_OscConfig+0x434>
 8001918:	4b42      	ldr	r3, [pc, #264]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	061b      	lsls	r3, r3, #24
 8001926:	493f      	ldr	r1, [pc, #252]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001928:	4313      	orrs	r3, r2
 800192a:	60cb      	str	r3, [r1, #12]
 800192c:	e018      	b.n	8001960 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800192e:	4b3d      	ldr	r3, [pc, #244]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a3c      	ldr	r2, [pc, #240]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193a:	f7ff fa9f 	bl	8000e7c <HAL_GetTick>
 800193e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001942:	f7ff fa9b 	bl	8000e7c <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e23d      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001954:	4b33      	ldr	r3, [pc, #204]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f0      	bne.n	8001942 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	2b00      	cmp	r3, #0
 800196a:	d036      	beq.n	80019da <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d019      	beq.n	80019a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001974:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001978:	4a2a      	ldr	r2, [pc, #168]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001980:	f7ff fa7c 	bl	8000e7c <HAL_GetTick>
 8001984:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001988:	f7ff fa78 	bl	8000e7c <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e21a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800199a:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 800199c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x45c>
 80019a6:	e018      	b.n	80019da <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a8:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80019aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ac:	4a1d      	ldr	r2, [pc, #116]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b4:	f7ff fa62 	bl	8000e7c <HAL_GetTick>
 80019b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019bc:	f7ff fa5e 	bl	8000e7c <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e200      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80019d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0320 	and.w	r3, r3, #32
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d039      	beq.n	8001a5a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d01c      	beq.n	8001a28 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019ee:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80019f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019fa:	f7ff fa3f 	bl	8000e7c <HAL_GetTick>
 80019fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a02:	f7ff fa3b 	bl	8000e7c <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e1dd      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x4d6>
 8001a20:	e01b      	b.n	8001a5a <HAL_RCC_OscConfig+0x52e>
 8001a22:	bf00      	nop
 8001a24:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a28:	4b9b      	ldr	r3, [pc, #620]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a9a      	ldr	r2, [pc, #616]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001a2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a34:	f7ff fa22 	bl	8000e7c <HAL_GetTick>
 8001a38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a3c:	f7ff fa1e 	bl	8000e7c <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e1c0      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a4e:	4b92      	ldr	r3, [pc, #584]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8081 	beq.w	8001b6a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a68:	4b8c      	ldr	r3, [pc, #560]	; (8001c9c <HAL_RCC_OscConfig+0x770>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a8b      	ldr	r2, [pc, #556]	; (8001c9c <HAL_RCC_OscConfig+0x770>)
 8001a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a74:	f7ff fa02 	bl	8000e7c <HAL_GetTick>
 8001a78:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7c:	f7ff f9fe 	bl	8000e7c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	; 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e1a0      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a8e:	4b83      	ldr	r3, [pc, #524]	; (8001c9c <HAL_RCC_OscConfig+0x770>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d106      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x584>
 8001aa2:	4b7d      	ldr	r3, [pc, #500]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa6:	4a7c      	ldr	r2, [pc, #496]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6713      	str	r3, [r2, #112]	; 0x70
 8001aae:	e02d      	b.n	8001b0c <HAL_RCC_OscConfig+0x5e0>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10c      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x5a6>
 8001ab8:	4b77      	ldr	r3, [pc, #476]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abc:	4a76      	ldr	r2, [pc, #472]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac4:	4b74      	ldr	r3, [pc, #464]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac8:	4a73      	ldr	r2, [pc, #460]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001aca:	f023 0304 	bic.w	r3, r3, #4
 8001ace:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad0:	e01c      	b.n	8001b0c <HAL_RCC_OscConfig+0x5e0>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b05      	cmp	r3, #5
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x5c8>
 8001ada:	4b6f      	ldr	r3, [pc, #444]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ade:	4a6e      	ldr	r2, [pc, #440]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae6:	4b6c      	ldr	r3, [pc, #432]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aea:	4a6b      	ldr	r2, [pc, #428]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6713      	str	r3, [r2, #112]	; 0x70
 8001af2:	e00b      	b.n	8001b0c <HAL_RCC_OscConfig+0x5e0>
 8001af4:	4b68      	ldr	r3, [pc, #416]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af8:	4a67      	ldr	r2, [pc, #412]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001afa:	f023 0301 	bic.w	r3, r3, #1
 8001afe:	6713      	str	r3, [r2, #112]	; 0x70
 8001b00:	4b65      	ldr	r3, [pc, #404]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b04:	4a64      	ldr	r2, [pc, #400]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001b06:	f023 0304 	bic.w	r3, r3, #4
 8001b0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d015      	beq.n	8001b40 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b14:	f7ff f9b2 	bl	8000e7c <HAL_GetTick>
 8001b18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b1a:	e00a      	b.n	8001b32 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1c:	f7ff f9ae 	bl	8000e7c <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e14e      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b32:	4b59      	ldr	r3, [pc, #356]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0ee      	beq.n	8001b1c <HAL_RCC_OscConfig+0x5f0>
 8001b3e:	e014      	b.n	8001b6a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b40:	f7ff f99c 	bl	8000e7c <HAL_GetTick>
 8001b44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b48:	f7ff f998 	bl	8000e7c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e138      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b5e:	4b4e      	ldr	r3, [pc, #312]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1ee      	bne.n	8001b48 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 812d 	beq.w	8001dce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001b74:	4b48      	ldr	r3, [pc, #288]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b7c:	2b18      	cmp	r3, #24
 8001b7e:	f000 80bd 	beq.w	8001cfc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	f040 809e 	bne.w	8001cc8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8c:	4b42      	ldr	r3, [pc, #264]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a41      	ldr	r2, [pc, #260]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b98:	f7ff f970 	bl	8000e7c <HAL_GetTick>
 8001b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7ff f96c 	bl	8000e7c <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e10e      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bb2:	4b39      	ldr	r3, [pc, #228]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bbe:	4b36      	ldr	r3, [pc, #216]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bc2:	4b37      	ldr	r3, [pc, #220]	; (8001ca0 <HAL_RCC_OscConfig+0x774>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	4931      	ldr	r1, [pc, #196]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	628b      	str	r3, [r1, #40]	; 0x28
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be6:	3b01      	subs	r3, #1
 8001be8:	025b      	lsls	r3, r3, #9
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	041b      	lsls	r3, r3, #16
 8001bf6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c00:	3b01      	subs	r3, #1
 8001c02:	061b      	lsls	r3, r3, #24
 8001c04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001c08:	4923      	ldr	r1, [pc, #140]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001c0e:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c12:	4a21      	ldr	r2, [pc, #132]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c14:	f023 0301 	bic.w	r3, r3, #1
 8001c18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c1e:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c26:	00d2      	lsls	r2, r2, #3
 8001c28:	491b      	ldr	r1, [pc, #108]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c32:	f023 020c 	bic.w	r2, r3, #12
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	4917      	ldr	r1, [pc, #92]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c40:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	f023 0202 	bic.w	r2, r3, #2
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4c:	4912      	ldr	r1, [pc, #72]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c56:	4a10      	ldr	r2, [pc, #64]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c62:	4a0d      	ldr	r2, [pc, #52]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7a:	4a07      	ldr	r2, [pc, #28]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7ff f8f5 	bl	8000e7c <HAL_GetTick>
 8001c92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c94:	e011      	b.n	8001cba <HAL_RCC_OscConfig+0x78e>
 8001c96:	bf00      	nop
 8001c98:	58024400 	.word	0x58024400
 8001c9c:	58024800 	.word	0x58024800
 8001ca0:	fffffc0c 	.word	0xfffffc0c
 8001ca4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7ff f8e8 	bl	8000e7c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e08a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cba:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x77c>
 8001cc6:	e082      	b.n	8001dce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc8:	4b43      	ldr	r3, [pc, #268]	; (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a42      	ldr	r2, [pc, #264]	; (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7ff f8d2 	bl	8000e7c <HAL_GetTick>
 8001cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7ff f8ce 	bl	8000e7c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e070      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cee:	4b3a      	ldr	r3, [pc, #232]	; (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x7b0>
 8001cfa:	e068      	b.n	8001dce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001cfc:	4b36      	ldr	r3, [pc, #216]	; (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d02:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d031      	beq.n	8001d74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	f003 0203 	and.w	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d12a      	bne.n	8001d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d122      	bne.n	8001d74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d11a      	bne.n	8001d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	0a5b      	lsrs	r3, r3, #9
 8001d42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d111      	bne.n	8001d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	0c1b      	lsrs	r3, r3, #16
 8001d54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d108      	bne.n	8001d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	0e1b      	lsrs	r3, r3, #24
 8001d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e02b      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001d78:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d7c:	08db      	lsrs	r3, r3, #3
 8001d7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d82:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d01f      	beq.n	8001dce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	4a11      	ldr	r2, [pc, #68]	; (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d9a:	f7ff f86f 	bl	8000e7c <HAL_GetTick>
 8001d9e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001da0:	bf00      	nop
 8001da2:	f7ff f86b 	bl	8000e7c <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d0f9      	beq.n	8001da2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_RCC_OscConfig+0x8b0>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dba:	00d2      	lsls	r2, r2, #3
 8001dbc:	4906      	ldr	r1, [pc, #24]	; (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001dc2:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc6:	4a04      	ldr	r2, [pc, #16]	; (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3730      	adds	r7, #48	; 0x30
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	58024400 	.word	0x58024400
 8001ddc:	ffff0007 	.word	0xffff0007

08001de0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e19c      	b.n	800212e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001df4:	4b8a      	ldr	r3, [pc, #552]	; (8002020 <HAL_RCC_ClockConfig+0x240>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d910      	bls.n	8001e24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b87      	ldr	r3, [pc, #540]	; (8002020 <HAL_RCC_ClockConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 020f 	bic.w	r2, r3, #15
 8001e0a:	4985      	ldr	r1, [pc, #532]	; (8002020 <HAL_RCC_ClockConfig+0x240>)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e12:	4b83      	ldr	r3, [pc, #524]	; (8002020 <HAL_RCC_ClockConfig+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e184      	b.n	800212e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d010      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	4b7b      	ldr	r3, [pc, #492]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d908      	bls.n	8001e52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e40:	4b78      	ldr	r3, [pc, #480]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4975      	ldr	r1, [pc, #468]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d010      	beq.n	8001e80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	4b70      	ldr	r3, [pc, #448]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d908      	bls.n	8001e80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e6e:	4b6d      	ldr	r3, [pc, #436]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	496a      	ldr	r1, [pc, #424]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d010      	beq.n	8001eae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699a      	ldr	r2, [r3, #24]
 8001e90:	4b64      	ldr	r3, [pc, #400]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d908      	bls.n	8001eae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e9c:	4b61      	ldr	r3, [pc, #388]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	495e      	ldr	r1, [pc, #376]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0320 	and.w	r3, r3, #32
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d010      	beq.n	8001edc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69da      	ldr	r2, [r3, #28]
 8001ebe:	4b59      	ldr	r3, [pc, #356]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d908      	bls.n	8001edc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001eca:	4b56      	ldr	r3, [pc, #344]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4953      	ldr	r1, [pc, #332]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d010      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	4b4d      	ldr	r3, [pc, #308]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d908      	bls.n	8001f0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef8:	4b4a      	ldr	r3, [pc, #296]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f023 020f 	bic.w	r2, r3, #15
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4947      	ldr	r1, [pc, #284]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d055      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f16:	4b43      	ldr	r3, [pc, #268]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	4940      	ldr	r1, [pc, #256]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d107      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f30:	4b3c      	ldr	r3, [pc, #240]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d121      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0f6      	b.n	800212e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d107      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f48:	4b36      	ldr	r3, [pc, #216]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d115      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0ea      	b.n	800212e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d107      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f60:	4b30      	ldr	r3, [pc, #192]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d109      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0de      	b.n	800212e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f70:	4b2c      	ldr	r3, [pc, #176]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0d6      	b.n	800212e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f80:	4b28      	ldr	r3, [pc, #160]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	f023 0207 	bic.w	r2, r3, #7
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4925      	ldr	r1, [pc, #148]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f92:	f7fe ff73 	bl	8000e7c <HAL_GetTick>
 8001f96:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f98:	e00a      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9a:	f7fe ff6f 	bl	8000e7c <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e0be      	b.n	800212e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb0:	4b1c      	ldr	r3, [pc, #112]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d1eb      	bne.n	8001f9a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d010      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	4b14      	ldr	r3, [pc, #80]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d208      	bcs.n	8001ff0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	f023 020f 	bic.w	r2, r3, #15
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	490e      	ldr	r1, [pc, #56]	; (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_RCC_ClockConfig+0x240>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d214      	bcs.n	8002028 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <HAL_RCC_ClockConfig+0x240>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 020f 	bic.w	r2, r3, #15
 8002006:	4906      	ldr	r1, [pc, #24]	; (8002020 <HAL_RCC_ClockConfig+0x240>)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <HAL_RCC_ClockConfig+0x240>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d005      	beq.n	8002028 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e086      	b.n	800212e <HAL_RCC_ClockConfig+0x34e>
 8002020:	52002000 	.word	0x52002000
 8002024:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d010      	beq.n	8002056 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	4b3f      	ldr	r3, [pc, #252]	; (8002138 <HAL_RCC_ClockConfig+0x358>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002040:	429a      	cmp	r2, r3
 8002042:	d208      	bcs.n	8002056 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002044:	4b3c      	ldr	r3, [pc, #240]	; (8002138 <HAL_RCC_ClockConfig+0x358>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	4939      	ldr	r1, [pc, #228]	; (8002138 <HAL_RCC_ClockConfig+0x358>)
 8002052:	4313      	orrs	r3, r2
 8002054:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d010      	beq.n	8002084 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	4b34      	ldr	r3, [pc, #208]	; (8002138 <HAL_RCC_ClockConfig+0x358>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800206e:	429a      	cmp	r2, r3
 8002070:	d208      	bcs.n	8002084 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002072:	4b31      	ldr	r3, [pc, #196]	; (8002138 <HAL_RCC_ClockConfig+0x358>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	492e      	ldr	r1, [pc, #184]	; (8002138 <HAL_RCC_ClockConfig+0x358>)
 8002080:	4313      	orrs	r3, r2
 8002082:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	2b00      	cmp	r3, #0
 800208e:	d010      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699a      	ldr	r2, [r3, #24]
 8002094:	4b28      	ldr	r3, [pc, #160]	; (8002138 <HAL_RCC_ClockConfig+0x358>)
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800209c:	429a      	cmp	r2, r3
 800209e:	d208      	bcs.n	80020b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020a0:	4b25      	ldr	r3, [pc, #148]	; (8002138 <HAL_RCC_ClockConfig+0x358>)
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	4922      	ldr	r1, [pc, #136]	; (8002138 <HAL_RCC_ClockConfig+0x358>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d010      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69da      	ldr	r2, [r3, #28]
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_RCC_ClockConfig+0x358>)
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d208      	bcs.n	80020e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80020ce:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <HAL_RCC_ClockConfig+0x358>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	4917      	ldr	r1, [pc, #92]	; (8002138 <HAL_RCC_ClockConfig+0x358>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020e0:	f000 f834 	bl	800214c <HAL_RCC_GetSysClockFreq>
 80020e4:	4602      	mov	r2, r0
 80020e6:	4b14      	ldr	r3, [pc, #80]	; (8002138 <HAL_RCC_ClockConfig+0x358>)
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	0a1b      	lsrs	r3, r3, #8
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	4912      	ldr	r1, [pc, #72]	; (800213c <HAL_RCC_ClockConfig+0x35c>)
 80020f2:	5ccb      	ldrb	r3, [r1, r3]
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	fa22 f303 	lsr.w	r3, r2, r3
 80020fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020fe:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <HAL_RCC_ClockConfig+0x358>)
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	4a0d      	ldr	r2, [pc, #52]	; (800213c <HAL_RCC_ClockConfig+0x35c>)
 8002108:	5cd3      	ldrb	r3, [r2, r3]
 800210a:	f003 031f 	and.w	r3, r3, #31
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	fa22 f303 	lsr.w	r3, r2, r3
 8002114:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <HAL_RCC_ClockConfig+0x360>)
 8002116:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002118:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <HAL_RCC_ClockConfig+0x364>)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_RCC_ClockConfig+0x368>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fe60 	bl	8000de8 <HAL_InitTick>
 8002128:	4603      	mov	r3, r0
 800212a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800212c:	7bfb      	ldrb	r3, [r7, #15]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	58024400 	.word	0x58024400
 800213c:	08007e44 	.word	0x08007e44
 8002140:	24000004 	.word	0x24000004
 8002144:	24000000 	.word	0x24000000
 8002148:	24000008 	.word	0x24000008

0800214c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800214c:	b480      	push	{r7}
 800214e:	b089      	sub	sp, #36	; 0x24
 8002150:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002152:	4bb3      	ldr	r3, [pc, #716]	; (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800215a:	2b18      	cmp	r3, #24
 800215c:	f200 8155 	bhi.w	800240a <HAL_RCC_GetSysClockFreq+0x2be>
 8002160:	a201      	add	r2, pc, #4	; (adr r2, 8002168 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002166:	bf00      	nop
 8002168:	080021cd 	.word	0x080021cd
 800216c:	0800240b 	.word	0x0800240b
 8002170:	0800240b 	.word	0x0800240b
 8002174:	0800240b 	.word	0x0800240b
 8002178:	0800240b 	.word	0x0800240b
 800217c:	0800240b 	.word	0x0800240b
 8002180:	0800240b 	.word	0x0800240b
 8002184:	0800240b 	.word	0x0800240b
 8002188:	080021f3 	.word	0x080021f3
 800218c:	0800240b 	.word	0x0800240b
 8002190:	0800240b 	.word	0x0800240b
 8002194:	0800240b 	.word	0x0800240b
 8002198:	0800240b 	.word	0x0800240b
 800219c:	0800240b 	.word	0x0800240b
 80021a0:	0800240b 	.word	0x0800240b
 80021a4:	0800240b 	.word	0x0800240b
 80021a8:	080021f9 	.word	0x080021f9
 80021ac:	0800240b 	.word	0x0800240b
 80021b0:	0800240b 	.word	0x0800240b
 80021b4:	0800240b 	.word	0x0800240b
 80021b8:	0800240b 	.word	0x0800240b
 80021bc:	0800240b 	.word	0x0800240b
 80021c0:	0800240b 	.word	0x0800240b
 80021c4:	0800240b 	.word	0x0800240b
 80021c8:	080021ff 	.word	0x080021ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021cc:	4b94      	ldr	r3, [pc, #592]	; (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0320 	and.w	r3, r3, #32
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d009      	beq.n	80021ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80021d8:	4b91      	ldr	r3, [pc, #580]	; (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	08db      	lsrs	r3, r3, #3
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	4a90      	ldr	r2, [pc, #576]	; (8002424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021e4:	fa22 f303 	lsr.w	r3, r2, r3
 80021e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80021ea:	e111      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80021ec:	4b8d      	ldr	r3, [pc, #564]	; (8002424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021ee:	61bb      	str	r3, [r7, #24]
      break;
 80021f0:	e10e      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80021f2:	4b8d      	ldr	r3, [pc, #564]	; (8002428 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80021f4:	61bb      	str	r3, [r7, #24]
      break;
 80021f6:	e10b      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80021f8:	4b8c      	ldr	r3, [pc, #560]	; (800242c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80021fa:	61bb      	str	r3, [r7, #24]
      break;
 80021fc:	e108      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021fe:	4b88      	ldr	r3, [pc, #544]	; (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002208:	4b85      	ldr	r3, [pc, #532]	; (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002212:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002214:	4b82      	ldr	r3, [pc, #520]	; (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800221e:	4b80      	ldr	r3, [pc, #512]	; (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002222:	08db      	lsrs	r3, r3, #3
 8002224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	fb02 f303 	mul.w	r3, r2, r3
 800222e:	ee07 3a90 	vmov	s15, r3
 8002232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002236:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80e1 	beq.w	8002404 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b02      	cmp	r3, #2
 8002246:	f000 8083 	beq.w	8002350 <HAL_RCC_GetSysClockFreq+0x204>
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2b02      	cmp	r3, #2
 800224e:	f200 80a1 	bhi.w	8002394 <HAL_RCC_GetSysClockFreq+0x248>
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x114>
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d056      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x1c0>
 800225e:	e099      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002260:	4b6f      	ldr	r3, [pc, #444]	; (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	2b00      	cmp	r3, #0
 800226a:	d02d      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800226c:	4b6c      	ldr	r3, [pc, #432]	; (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	08db      	lsrs	r3, r3, #3
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	4a6b      	ldr	r2, [pc, #428]	; (8002424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002278:	fa22 f303 	lsr.w	r3, r2, r3
 800227c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	ee07 3a90 	vmov	s15, r3
 8002284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	ee07 3a90 	vmov	s15, r3
 800228e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002296:	4b62      	ldr	r3, [pc, #392]	; (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800229e:	ee07 3a90 	vmov	s15, r3
 80022a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80022aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80022c6:	e087      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	ee07 3a90 	vmov	s15, r3
 80022ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002434 <HAL_RCC_GetSysClockFreq+0x2e8>
 80022d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022da:	4b51      	ldr	r3, [pc, #324]	; (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022e2:	ee07 3a90 	vmov	s15, r3
 80022e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80022ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002306:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800230a:	e065      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	ee07 3a90 	vmov	s15, r3
 8002312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002316:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002438 <HAL_RCC_GetSysClockFreq+0x2ec>
 800231a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800231e:	4b40      	ldr	r3, [pc, #256]	; (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002326:	ee07 3a90 	vmov	s15, r3
 800232a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800232e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002332:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002430 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800233a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800233e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800234a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800234e:	e043      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	ee07 3a90 	vmov	s15, r3
 8002356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800235a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800243c <HAL_RCC_GetSysClockFreq+0x2f0>
 800235e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002362:	4b2f      	ldr	r3, [pc, #188]	; (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800236a:	ee07 3a90 	vmov	s15, r3
 800236e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002372:	ed97 6a02 	vldr	s12, [r7, #8]
 8002376:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002430 <HAL_RCC_GetSysClockFreq+0x2e4>
 800237a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800237e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800238a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002392:	e021      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	ee07 3a90 	vmov	s15, r3
 800239a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800239e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002438 <HAL_RCC_GetSysClockFreq+0x2ec>
 80023a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023a6:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80023ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	0a5b      	lsrs	r3, r3, #9
 80023de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023e2:	3301      	adds	r3, #1
 80023e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	ee07 3a90 	vmov	s15, r3
 80023ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80023f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023fc:	ee17 3a90 	vmov	r3, s15
 8002400:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002402:	e005      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	61bb      	str	r3, [r7, #24]
      break;
 8002408:	e002      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800240c:	61bb      	str	r3, [r7, #24]
      break;
 800240e:	bf00      	nop
  }

  return sysclockfreq;
 8002410:	69bb      	ldr	r3, [r7, #24]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3724      	adds	r7, #36	; 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	58024400 	.word	0x58024400
 8002424:	03d09000 	.word	0x03d09000
 8002428:	003d0900 	.word	0x003d0900
 800242c:	017d7840 	.word	0x017d7840
 8002430:	46000000 	.word	0x46000000
 8002434:	4c742400 	.word	0x4c742400
 8002438:	4a742400 	.word	0x4a742400
 800243c:	4bbebc20 	.word	0x4bbebc20

08002440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002446:	f7ff fe81 	bl	800214c <HAL_RCC_GetSysClockFreq>
 800244a:	4602      	mov	r2, r0
 800244c:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_RCC_GetHCLKFreq+0x50>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	0a1b      	lsrs	r3, r3, #8
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	490f      	ldr	r1, [pc, #60]	; (8002494 <HAL_RCC_GetHCLKFreq+0x54>)
 8002458:	5ccb      	ldrb	r3, [r1, r3]
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	fa22 f303 	lsr.w	r3, r2, r3
 8002462:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002464:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_RCC_GetHCLKFreq+0x50>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	4a09      	ldr	r2, [pc, #36]	; (8002494 <HAL_RCC_GetHCLKFreq+0x54>)
 800246e:	5cd3      	ldrb	r3, [r2, r3]
 8002470:	f003 031f 	and.w	r3, r3, #31
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	fa22 f303 	lsr.w	r3, r2, r3
 800247a:	4a07      	ldr	r2, [pc, #28]	; (8002498 <HAL_RCC_GetHCLKFreq+0x58>)
 800247c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800247e:	4a07      	ldr	r2, [pc, #28]	; (800249c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <HAL_RCC_GetHCLKFreq+0x58>)
 8002486:	681b      	ldr	r3, [r3, #0]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	58024400 	.word	0x58024400
 8002494:	08007e44 	.word	0x08007e44
 8002498:	24000004 	.word	0x24000004
 800249c:	24000000 	.word	0x24000000

080024a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80024a4:	f7ff ffcc 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	091b      	lsrs	r3, r3, #4
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	4904      	ldr	r1, [pc, #16]	; (80024c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024b6:	5ccb      	ldrb	r3, [r1, r3]
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	58024400 	.word	0x58024400
 80024c8:	08007e44 	.word	0x08007e44

080024cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80024d0:	f7ff ffb6 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 80024d4:	4602      	mov	r2, r0
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	4904      	ldr	r1, [pc, #16]	; (80024f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024e2:	5ccb      	ldrb	r3, [r1, r3]
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	58024400 	.word	0x58024400
 80024f4:	08007e44 	.word	0x08007e44

080024f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024fc:	b0cc      	sub	sp, #304	; 0x130
 80024fe:	af00      	add	r7, sp, #0
 8002500:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002504:	2300      	movs	r3, #0
 8002506:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800250a:	2300      	movs	r3, #0
 800250c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002510:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002518:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800251c:	2500      	movs	r5, #0
 800251e:	ea54 0305 	orrs.w	r3, r4, r5
 8002522:	d049      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002524:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800252a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800252e:	d02f      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002530:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002534:	d828      	bhi.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002536:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800253a:	d01a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800253c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002540:	d822      	bhi.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800254a:	d007      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800254c:	e01c      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800254e:	4bb8      	ldr	r3, [pc, #736]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	4ab7      	ldr	r2, [pc, #732]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002558:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800255a:	e01a      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800255c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002560:	3308      	adds	r3, #8
 8002562:	2102      	movs	r1, #2
 8002564:	4618      	mov	r0, r3
 8002566:	f001 fccf 	bl	8003f08 <RCCEx_PLL2_Config>
 800256a:	4603      	mov	r3, r0
 800256c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002570:	e00f      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002572:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002576:	3328      	adds	r3, #40	; 0x28
 8002578:	2102      	movs	r1, #2
 800257a:	4618      	mov	r0, r3
 800257c:	f001 fd76 	bl	800406c <RCCEx_PLL3_Config>
 8002580:	4603      	mov	r3, r0
 8002582:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002586:	e004      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800258e:	e000      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002592:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10a      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800259a:	4ba5      	ldr	r3, [pc, #660]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800259c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80025a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80025a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a8:	4aa1      	ldr	r2, [pc, #644]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025aa:	430b      	orrs	r3, r1
 80025ac:	6513      	str	r3, [r2, #80]	; 0x50
 80025ae:	e003      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025b0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80025b4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80025b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80025bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80025c4:	f04f 0900 	mov.w	r9, #0
 80025c8:	ea58 0309 	orrs.w	r3, r8, r9
 80025cc:	d047      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80025ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80025d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d82a      	bhi.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80025d8:	a201      	add	r2, pc, #4	; (adr r2, 80025e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80025da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025de:	bf00      	nop
 80025e0:	080025f5 	.word	0x080025f5
 80025e4:	08002603 	.word	0x08002603
 80025e8:	08002619 	.word	0x08002619
 80025ec:	08002637 	.word	0x08002637
 80025f0:	08002637 	.word	0x08002637
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025f4:	4b8e      	ldr	r3, [pc, #568]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	4a8d      	ldr	r2, [pc, #564]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002600:	e01a      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002602:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002606:	3308      	adds	r3, #8
 8002608:	2100      	movs	r1, #0
 800260a:	4618      	mov	r0, r3
 800260c:	f001 fc7c 	bl	8003f08 <RCCEx_PLL2_Config>
 8002610:	4603      	mov	r3, r0
 8002612:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002616:	e00f      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002618:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800261c:	3328      	adds	r3, #40	; 0x28
 800261e:	2100      	movs	r1, #0
 8002620:	4618      	mov	r0, r3
 8002622:	f001 fd23 	bl	800406c <RCCEx_PLL3_Config>
 8002626:	4603      	mov	r3, r0
 8002628:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800262c:	e004      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002634:	e000      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002638:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10a      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002640:	4b7b      	ldr	r3, [pc, #492]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002644:	f023 0107 	bic.w	r1, r3, #7
 8002648:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800264c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264e:	4a78      	ldr	r2, [pc, #480]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002650:	430b      	orrs	r3, r1
 8002652:	6513      	str	r3, [r2, #80]	; 0x50
 8002654:	e003      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002656:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800265a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800265e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002666:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800266a:	f04f 0b00 	mov.w	fp, #0
 800266e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002672:	d04c      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002674:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800267e:	d030      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002684:	d829      	bhi.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002686:	2bc0      	cmp	r3, #192	; 0xc0
 8002688:	d02d      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800268a:	2bc0      	cmp	r3, #192	; 0xc0
 800268c:	d825      	bhi.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800268e:	2b80      	cmp	r3, #128	; 0x80
 8002690:	d018      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002692:	2b80      	cmp	r3, #128	; 0x80
 8002694:	d821      	bhi.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800269a:	2b40      	cmp	r3, #64	; 0x40
 800269c:	d007      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800269e:	e01c      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026a0:	4b63      	ldr	r3, [pc, #396]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	4a62      	ldr	r2, [pc, #392]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80026ac:	e01c      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80026ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026b2:	3308      	adds	r3, #8
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f001 fc26 	bl	8003f08 <RCCEx_PLL2_Config>
 80026bc:	4603      	mov	r3, r0
 80026be:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80026c2:	e011      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026c8:	3328      	adds	r3, #40	; 0x28
 80026ca:	2100      	movs	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f001 fccd 	bl	800406c <RCCEx_PLL3_Config>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80026d8:	e006      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80026e0:	e002      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80026e2:	bf00      	nop
 80026e4:	e000      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80026e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026e8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10a      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80026f0:	4b4f      	ldr	r3, [pc, #316]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80026f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fe:	4a4c      	ldr	r2, [pc, #304]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002700:	430b      	orrs	r3, r1
 8002702:	6513      	str	r3, [r2, #80]	; 0x50
 8002704:	e003      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002706:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800270a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800270e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002716:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800271a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800271e:	2300      	movs	r3, #0
 8002720:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002724:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8002728:	460b      	mov	r3, r1
 800272a:	4313      	orrs	r3, r2
 800272c:	d053      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800272e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002732:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002736:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800273a:	d035      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800273c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002740:	d82e      	bhi.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002742:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002746:	d031      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002748:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800274c:	d828      	bhi.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800274e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002752:	d01a      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002754:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002758:	d822      	bhi.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800275e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002762:	d007      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002764:	e01c      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002766:	4b32      	ldr	r3, [pc, #200]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	4a31      	ldr	r2, [pc, #196]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800276c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002770:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002772:	e01c      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002774:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002778:	3308      	adds	r3, #8
 800277a:	2100      	movs	r1, #0
 800277c:	4618      	mov	r0, r3
 800277e:	f001 fbc3 	bl	8003f08 <RCCEx_PLL2_Config>
 8002782:	4603      	mov	r3, r0
 8002784:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002788:	e011      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800278a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800278e:	3328      	adds	r3, #40	; 0x28
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f001 fc6a 	bl	800406c <RCCEx_PLL3_Config>
 8002798:	4603      	mov	r3, r0
 800279a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800279e:	e006      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80027a6:	e002      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80027a8:	bf00      	nop
 80027aa:	e000      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80027ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10b      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80027b6:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ba:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80027be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80027c6:	4a1a      	ldr	r2, [pc, #104]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027c8:	430b      	orrs	r3, r1
 80027ca:	6593      	str	r3, [r2, #88]	; 0x58
 80027cc:	e003      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80027d2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80027d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027de:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80027e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80027e6:	2300      	movs	r3, #0
 80027e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80027ec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80027f0:	460b      	mov	r3, r1
 80027f2:	4313      	orrs	r3, r2
 80027f4:	d056      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80027f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002802:	d038      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002804:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002808:	d831      	bhi.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800280a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800280e:	d034      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002810:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002814:	d82b      	bhi.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002816:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800281a:	d01d      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800281c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002820:	d825      	bhi.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002822:	2b00      	cmp	r3, #0
 8002824:	d006      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002826:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800282a:	d00a      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800282c:	e01f      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800282e:	bf00      	nop
 8002830:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002834:	4ba2      	ldr	r3, [pc, #648]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	4aa1      	ldr	r2, [pc, #644]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800283a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800283e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002840:	e01c      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002842:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002846:	3308      	adds	r3, #8
 8002848:	2100      	movs	r1, #0
 800284a:	4618      	mov	r0, r3
 800284c:	f001 fb5c 	bl	8003f08 <RCCEx_PLL2_Config>
 8002850:	4603      	mov	r3, r0
 8002852:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002856:	e011      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002858:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800285c:	3328      	adds	r3, #40	; 0x28
 800285e:	2100      	movs	r1, #0
 8002860:	4618      	mov	r0, r3
 8002862:	f001 fc03 	bl	800406c <RCCEx_PLL3_Config>
 8002866:	4603      	mov	r3, r0
 8002868:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800286c:	e006      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002874:	e002      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002876:	bf00      	nop
 8002878:	e000      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800287a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800287c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10b      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002884:	4b8e      	ldr	r3, [pc, #568]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002888:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800288c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002890:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002894:	4a8a      	ldr	r2, [pc, #552]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002896:	430b      	orrs	r3, r1
 8002898:	6593      	str	r3, [r2, #88]	; 0x58
 800289a:	e003      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800289c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80028a0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80028a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ac:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80028b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80028b4:	2300      	movs	r3, #0
 80028b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80028ba:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80028be:	460b      	mov	r3, r1
 80028c0:	4313      	orrs	r3, r2
 80028c2:	d03a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80028c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ca:	2b30      	cmp	r3, #48	; 0x30
 80028cc:	d01f      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80028ce:	2b30      	cmp	r3, #48	; 0x30
 80028d0:	d819      	bhi.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	d00c      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	d815      	bhi.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d019      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80028de:	2b10      	cmp	r3, #16
 80028e0:	d111      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028e2:	4b77      	ldr	r3, [pc, #476]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	4a76      	ldr	r2, [pc, #472]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80028ee:	e011      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80028f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028f4:	3308      	adds	r3, #8
 80028f6:	2102      	movs	r1, #2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f001 fb05 	bl	8003f08 <RCCEx_PLL2_Config>
 80028fe:	4603      	mov	r3, r0
 8002900:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002904:	e006      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800290c:	e002      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800290e:	bf00      	nop
 8002910:	e000      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002914:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10a      	bne.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800291c:	4b68      	ldr	r3, [pc, #416]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800291e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002920:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002924:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292a:	4a65      	ldr	r2, [pc, #404]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800292c:	430b      	orrs	r3, r1
 800292e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002930:	e003      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002932:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002936:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800293a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800293e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002942:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002946:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800294a:	2300      	movs	r3, #0
 800294c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002950:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002954:	460b      	mov	r3, r1
 8002956:	4313      	orrs	r3, r2
 8002958:	d051      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800295a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800295e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002964:	d035      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002966:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800296a:	d82e      	bhi.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800296c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002970:	d031      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002972:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002976:	d828      	bhi.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800297c:	d01a      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800297e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002982:	d822      	bhi.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800298c:	d007      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800298e:	e01c      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002990:	4b4b      	ldr	r3, [pc, #300]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	4a4a      	ldr	r2, [pc, #296]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800299c:	e01c      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800299e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029a2:	3308      	adds	r3, #8
 80029a4:	2100      	movs	r1, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f001 faae 	bl	8003f08 <RCCEx_PLL2_Config>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80029b2:	e011      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029b8:	3328      	adds	r3, #40	; 0x28
 80029ba:	2100      	movs	r1, #0
 80029bc:	4618      	mov	r0, r3
 80029be:	f001 fb55 	bl	800406c <RCCEx_PLL3_Config>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80029c8:	e006      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80029d0:	e002      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80029d2:	bf00      	nop
 80029d4:	e000      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80029d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029d8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80029e0:	4b37      	ldr	r3, [pc, #220]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80029e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029ee:	4a34      	ldr	r2, [pc, #208]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029f0:	430b      	orrs	r3, r1
 80029f2:	6513      	str	r3, [r2, #80]	; 0x50
 80029f4:	e003      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029f6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80029fa:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80029fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a06:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002a0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002a14:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	d056      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002a1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a28:	d033      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002a2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a2e:	d82c      	bhi.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a34:	d02f      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002a36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a3a:	d826      	bhi.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a40:	d02b      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002a42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a46:	d820      	bhi.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a4c:	d012      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002a4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a52:	d81a      	bhi.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d022      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a5c:	d115      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a62:	3308      	adds	r3, #8
 8002a64:	2101      	movs	r1, #1
 8002a66:	4618      	mov	r0, r3
 8002a68:	f001 fa4e 	bl	8003f08 <RCCEx_PLL2_Config>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002a72:	e015      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a78:	3328      	adds	r3, #40	; 0x28
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f001 faf5 	bl	800406c <RCCEx_PLL3_Config>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002a90:	e006      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a92:	bf00      	nop
 8002a94:	e004      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a96:	bf00      	nop
 8002a98:	e002      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a9a:	bf00      	nop
 8002a9c:	e000      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aa0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10d      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aac:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002ab0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ab6:	4a02      	ldr	r2, [pc, #8]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	6513      	str	r3, [r2, #80]	; 0x50
 8002abc:	e006      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002abe:	bf00      	nop
 8002ac0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002ac8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002acc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002ad8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002adc:	2300      	movs	r3, #0
 8002ade:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002ae2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	d055      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002aec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002af0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002af8:	d033      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002afe:	d82c      	bhi.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b04:	d02f      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0a:	d826      	bhi.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b10:	d02b      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002b12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b16:	d820      	bhi.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b1c:	d012      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002b1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b22:	d81a      	bhi.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d022      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b2c:	d115      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b32:	3308      	adds	r3, #8
 8002b34:	2101      	movs	r1, #1
 8002b36:	4618      	mov	r0, r3
 8002b38:	f001 f9e6 	bl	8003f08 <RCCEx_PLL2_Config>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b42:	e015      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b48:	3328      	adds	r3, #40	; 0x28
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f001 fa8d 	bl	800406c <RCCEx_PLL3_Config>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b58:	e00a      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002b60:	e006      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b62:	bf00      	nop
 8002b64:	e004      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b66:	bf00      	nop
 8002b68:	e002      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b6a:	bf00      	nop
 8002b6c:	e000      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b70:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10b      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b78:	4bb6      	ldr	r3, [pc, #728]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002b80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b88:	4ab2      	ldr	r2, [pc, #712]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b8a:	430b      	orrs	r3, r1
 8002b8c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b8e:	e003      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b90:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002b94:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002b98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba0:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8002ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	d02a      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8002bb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d011      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc6:	d10a      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002bc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bcc:	3308      	adds	r3, #8
 8002bce:	2101      	movs	r1, #1
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f001 f999 	bl	8003f08 <RCCEx_PLL2_Config>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8002bdc:	e004      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002be4:	e000      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8002be6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002be8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10a      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002bf0:	4b98      	ldr	r3, [pc, #608]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8002bf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bfe:	4a95      	ldr	r2, [pc, #596]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c00:	430b      	orrs	r3, r1
 8002c02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c04:	e003      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c06:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c0a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c16:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002c24:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	d037      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002c2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c38:	d00e      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8002c3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c3e:	d816      	bhi.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x776>
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d018      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002c44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c48:	d111      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c4a:	4b82      	ldr	r3, [pc, #520]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	4a81      	ldr	r2, [pc, #516]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c56:	e00f      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c5c:	3308      	adds	r3, #8
 8002c5e:	2101      	movs	r1, #1
 8002c60:	4618      	mov	r0, r3
 8002c62:	f001 f951 	bl	8003f08 <RCCEx_PLL2_Config>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c6c:	e004      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002c74:	e000      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8002c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c78:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10a      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c80:	4b74      	ldr	r3, [pc, #464]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c84:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002c88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8e:	4a71      	ldr	r2, [pc, #452]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c90:	430b      	orrs	r3, r1
 8002c92:	6513      	str	r3, [r2, #80]	; 0x50
 8002c94:	e003      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c96:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c9a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002c9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca6:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002caa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002cb4:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	d03a      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002cbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d81d      	bhi.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8002cc8:	a201      	add	r2, pc, #4	; (adr r2, 8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cce:	bf00      	nop
 8002cd0:	08002d0d 	.word	0x08002d0d
 8002cd4:	08002ce1 	.word	0x08002ce1
 8002cd8:	08002cef 	.word	0x08002cef
 8002cdc:	08002d0d 	.word	0x08002d0d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ce0:	4b5c      	ldr	r3, [pc, #368]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	4a5b      	ldr	r2, [pc, #364]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002cec:	e00f      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002cee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cf2:	3308      	adds	r3, #8
 8002cf4:	2102      	movs	r1, #2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f001 f906 	bl	8003f08 <RCCEx_PLL2_Config>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d02:	e004      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002d0a:	e000      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8002d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d0e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10a      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d16:	4b4f      	ldr	r3, [pc, #316]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1a:	f023 0103 	bic.w	r1, r3, #3
 8002d1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d24:	4a4b      	ldr	r2, [pc, #300]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d26:	430b      	orrs	r3, r1
 8002d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d2a:	e003      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d2c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d30:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002d40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d44:	2300      	movs	r3, #0
 8002d46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d4a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f000 80a0 	beq.w	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d56:	4b40      	ldr	r3, [pc, #256]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a3f      	ldr	r2, [pc, #252]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d62:	f7fe f88b 	bl	8000e7c <HAL_GetTick>
 8002d66:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d6a:	e00b      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6c:	f7fe f886 	bl	8000e7c <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b64      	cmp	r3, #100	; 0x64
 8002d7a:	d903      	bls.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002d82:	e005      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d84:	4b34      	ldr	r3, [pc, #208]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0ed      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8002d90:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d17a      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002d98:	4b2e      	ldr	r3, [pc, #184]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002da0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002da4:	4053      	eors	r3, r2
 8002da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d015      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dae:	4b29      	ldr	r3, [pc, #164]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dba:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbe:	4a25      	ldr	r2, [pc, #148]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dc6:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	4a22      	ldr	r2, [pc, #136]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002dd2:	4a20      	ldr	r2, [pc, #128]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002dd4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002dda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dde:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002de6:	d118      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de8:	f7fe f848 	bl	8000e7c <HAL_GetTick>
 8002dec:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002df0:	e00d      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df2:	f7fe f843 	bl	8000e7c <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002dfc:	1ad2      	subs	r2, r2, r3
 8002dfe:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d903      	bls.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8002e0c:	e005      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e0e:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0eb      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8002e1a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d130      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e26:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e32:	d115      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8002e34:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002e3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e40:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002e44:	091a      	lsrs	r2, r3, #4
 8002e46:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	4a02      	ldr	r2, [pc, #8]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6113      	str	r3, [r2, #16]
 8002e50:	e00c      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x974>
 8002e52:	bf00      	nop
 8002e54:	58024400 	.word	0x58024400
 8002e58:	58024800 	.word	0x58024800
 8002e5c:	00ffffcf 	.word	0x00ffffcf
 8002e60:	4bd4      	ldr	r3, [pc, #848]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	4ad3      	ldr	r2, [pc, #844]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e66:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e6a:	6113      	str	r3, [r2, #16]
 8002e6c:	4bd1      	ldr	r3, [pc, #836]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e6e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002e70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7c:	4acd      	ldr	r2, [pc, #820]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	6713      	str	r3, [r2, #112]	; 0x70
 8002e82:	e008      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e84:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002e88:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8002e8c:	e003      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e8e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002e92:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9e:	f002 0301 	and.w	r3, r2, #1
 8002ea2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002eac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f000 808b 	beq.w	8002fce <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002eb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ec0:	2b28      	cmp	r3, #40	; 0x28
 8002ec2:	d86b      	bhi.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002ec4:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8002ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eca:	bf00      	nop
 8002ecc:	08002fa5 	.word	0x08002fa5
 8002ed0:	08002f9d 	.word	0x08002f9d
 8002ed4:	08002f9d 	.word	0x08002f9d
 8002ed8:	08002f9d 	.word	0x08002f9d
 8002edc:	08002f9d 	.word	0x08002f9d
 8002ee0:	08002f9d 	.word	0x08002f9d
 8002ee4:	08002f9d 	.word	0x08002f9d
 8002ee8:	08002f9d 	.word	0x08002f9d
 8002eec:	08002f71 	.word	0x08002f71
 8002ef0:	08002f9d 	.word	0x08002f9d
 8002ef4:	08002f9d 	.word	0x08002f9d
 8002ef8:	08002f9d 	.word	0x08002f9d
 8002efc:	08002f9d 	.word	0x08002f9d
 8002f00:	08002f9d 	.word	0x08002f9d
 8002f04:	08002f9d 	.word	0x08002f9d
 8002f08:	08002f9d 	.word	0x08002f9d
 8002f0c:	08002f87 	.word	0x08002f87
 8002f10:	08002f9d 	.word	0x08002f9d
 8002f14:	08002f9d 	.word	0x08002f9d
 8002f18:	08002f9d 	.word	0x08002f9d
 8002f1c:	08002f9d 	.word	0x08002f9d
 8002f20:	08002f9d 	.word	0x08002f9d
 8002f24:	08002f9d 	.word	0x08002f9d
 8002f28:	08002f9d 	.word	0x08002f9d
 8002f2c:	08002fa5 	.word	0x08002fa5
 8002f30:	08002f9d 	.word	0x08002f9d
 8002f34:	08002f9d 	.word	0x08002f9d
 8002f38:	08002f9d 	.word	0x08002f9d
 8002f3c:	08002f9d 	.word	0x08002f9d
 8002f40:	08002f9d 	.word	0x08002f9d
 8002f44:	08002f9d 	.word	0x08002f9d
 8002f48:	08002f9d 	.word	0x08002f9d
 8002f4c:	08002fa5 	.word	0x08002fa5
 8002f50:	08002f9d 	.word	0x08002f9d
 8002f54:	08002f9d 	.word	0x08002f9d
 8002f58:	08002f9d 	.word	0x08002f9d
 8002f5c:	08002f9d 	.word	0x08002f9d
 8002f60:	08002f9d 	.word	0x08002f9d
 8002f64:	08002f9d 	.word	0x08002f9d
 8002f68:	08002f9d 	.word	0x08002f9d
 8002f6c:	08002fa5 	.word	0x08002fa5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f74:	3308      	adds	r3, #8
 8002f76:	2101      	movs	r1, #1
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 ffc5 	bl	8003f08 <RCCEx_PLL2_Config>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f84:	e00f      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f8a:	3328      	adds	r3, #40	; 0x28
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f001 f86c 	bl	800406c <RCCEx_PLL3_Config>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f9a:	e004      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8002fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fa6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10b      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002fae:	4b81      	ldr	r3, [pc, #516]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002fb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fbe:	4a7d      	ldr	r2, [pc, #500]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	6553      	str	r3, [r2, #84]	; 0x54
 8002fc4:	e003      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002fca:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002fce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd6:	f002 0302 	and.w	r3, r2, #2
 8002fda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002fe4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4313      	orrs	r3, r2
 8002fec:	d042      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002fee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ff2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ff4:	2b05      	cmp	r3, #5
 8002ff6:	d825      	bhi.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8002ff8:	a201      	add	r2, pc, #4	; (adr r2, 8003000 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8002ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffe:	bf00      	nop
 8003000:	0800304d 	.word	0x0800304d
 8003004:	08003019 	.word	0x08003019
 8003008:	0800302f 	.word	0x0800302f
 800300c:	0800304d 	.word	0x0800304d
 8003010:	0800304d 	.word	0x0800304d
 8003014:	0800304d 	.word	0x0800304d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003018:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800301c:	3308      	adds	r3, #8
 800301e:	2101      	movs	r1, #1
 8003020:	4618      	mov	r0, r3
 8003022:	f000 ff71 	bl	8003f08 <RCCEx_PLL2_Config>
 8003026:	4603      	mov	r3, r0
 8003028:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800302c:	e00f      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800302e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003032:	3328      	adds	r3, #40	; 0x28
 8003034:	2101      	movs	r1, #1
 8003036:	4618      	mov	r0, r3
 8003038:	f001 f818 	bl	800406c <RCCEx_PLL3_Config>
 800303c:	4603      	mov	r3, r0
 800303e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003042:	e004      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800304a:	e000      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 800304c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800304e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10a      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003056:	4b57      	ldr	r3, [pc, #348]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305a:	f023 0107 	bic.w	r1, r3, #7
 800305e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003064:	4a53      	ldr	r2, [pc, #332]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003066:	430b      	orrs	r3, r1
 8003068:	6553      	str	r3, [r2, #84]	; 0x54
 800306a:	e003      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003070:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003074:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307c:	f002 0304 	and.w	r3, r2, #4
 8003080:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003084:	2300      	movs	r3, #0
 8003086:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800308a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800308e:	460b      	mov	r3, r1
 8003090:	4313      	orrs	r3, r2
 8003092:	d044      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003094:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003098:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800309c:	2b05      	cmp	r3, #5
 800309e:	d825      	bhi.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80030a0:	a201      	add	r2, pc, #4	; (adr r2, 80030a8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80030a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a6:	bf00      	nop
 80030a8:	080030f5 	.word	0x080030f5
 80030ac:	080030c1 	.word	0x080030c1
 80030b0:	080030d7 	.word	0x080030d7
 80030b4:	080030f5 	.word	0x080030f5
 80030b8:	080030f5 	.word	0x080030f5
 80030bc:	080030f5 	.word	0x080030f5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030c4:	3308      	adds	r3, #8
 80030c6:	2101      	movs	r1, #1
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 ff1d 	bl	8003f08 <RCCEx_PLL2_Config>
 80030ce:	4603      	mov	r3, r0
 80030d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030d4:	e00f      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030da:	3328      	adds	r3, #40	; 0x28
 80030dc:	2101      	movs	r1, #1
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 ffc4 	bl	800406c <RCCEx_PLL3_Config>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030ea:	e004      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80030f2:	e000      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 80030f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030f6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10b      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030fe:	4b2d      	ldr	r3, [pc, #180]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003102:	f023 0107 	bic.w	r1, r3, #7
 8003106:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800310a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800310e:	4a29      	ldr	r2, [pc, #164]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003110:	430b      	orrs	r3, r1
 8003112:	6593      	str	r3, [r2, #88]	; 0x58
 8003114:	e003      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003116:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800311a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800311e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003126:	f002 0320 	and.w	r3, r2, #32
 800312a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800312e:	2300      	movs	r3, #0
 8003130:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003134:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003138:	460b      	mov	r3, r1
 800313a:	4313      	orrs	r3, r2
 800313c:	d057      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800313e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003146:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800314a:	d035      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 800314c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003150:	d82c      	bhi.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003156:	d031      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8003158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315c:	d826      	bhi.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800315e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003162:	d02d      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8003164:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003168:	d820      	bhi.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800316a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800316e:	d012      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8003170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003174:	d81a      	bhi.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003176:	2b00      	cmp	r3, #0
 8003178:	d024      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800317a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800317e:	d115      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003180:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003184:	3308      	adds	r3, #8
 8003186:	2100      	movs	r1, #0
 8003188:	4618      	mov	r0, r3
 800318a:	f000 febd 	bl	8003f08 <RCCEx_PLL2_Config>
 800318e:	4603      	mov	r3, r0
 8003190:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003194:	e017      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003196:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800319a:	3328      	adds	r3, #40	; 0x28
 800319c:	2102      	movs	r1, #2
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 ff64 	bl	800406c <RCCEx_PLL3_Config>
 80031a4:	4603      	mov	r3, r0
 80031a6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80031aa:	e00c      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80031b2:	e008      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80031b4:	58024400 	.word	0x58024400
        break;
 80031b8:	bf00      	nop
 80031ba:	e004      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80031bc:	bf00      	nop
 80031be:	e002      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80031c0:	bf00      	nop
 80031c2:	e000      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80031c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031c6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10b      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ce:	4bc2      	ldr	r3, [pc, #776]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80031d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031de:	4abe      	ldr	r2, [pc, #760]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031e0:	430b      	orrs	r3, r1
 80031e2:	6553      	str	r3, [r2, #84]	; 0x54
 80031e4:	e003      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80031ea:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80031ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80031fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031fe:	2300      	movs	r3, #0
 8003200:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003204:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003208:	460b      	mov	r3, r1
 800320a:	4313      	orrs	r3, r2
 800320c:	d055      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800320e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003212:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003216:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800321a:	d033      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 800321c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003220:	d82c      	bhi.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003226:	d02f      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8003228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800322c:	d826      	bhi.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800322e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003232:	d02b      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8003234:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003238:	d820      	bhi.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800323a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800323e:	d012      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8003240:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003244:	d81a      	bhi.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003246:	2b00      	cmp	r3, #0
 8003248:	d022      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800324a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324e:	d115      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003250:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003254:	3308      	adds	r3, #8
 8003256:	2100      	movs	r1, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f000 fe55 	bl	8003f08 <RCCEx_PLL2_Config>
 800325e:	4603      	mov	r3, r0
 8003260:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003264:	e015      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003266:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800326a:	3328      	adds	r3, #40	; 0x28
 800326c:	2102      	movs	r1, #2
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fefc 	bl	800406c <RCCEx_PLL3_Config>
 8003274:	4603      	mov	r3, r0
 8003276:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800327a:	e00a      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003282:	e006      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003284:	bf00      	nop
 8003286:	e004      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003288:	bf00      	nop
 800328a:	e002      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800328c:	bf00      	nop
 800328e:	e000      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003292:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10b      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800329a:	4b8f      	ldr	r3, [pc, #572]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800329c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80032a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032aa:	4a8b      	ldr	r2, [pc, #556]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032ac:	430b      	orrs	r3, r1
 80032ae:	6593      	str	r3, [r2, #88]	; 0x58
 80032b0:	e003      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80032b6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80032ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c2:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80032c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032ca:	2300      	movs	r3, #0
 80032cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032d0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80032d4:	460b      	mov	r3, r1
 80032d6:	4313      	orrs	r3, r2
 80032d8:	d055      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80032da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032e2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80032e6:	d033      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80032e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80032ec:	d82c      	bhi.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80032ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f2:	d02f      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80032f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f8:	d826      	bhi.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80032fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80032fe:	d02b      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003300:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003304:	d820      	bhi.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003306:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800330a:	d012      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 800330c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003310:	d81a      	bhi.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003312:	2b00      	cmp	r3, #0
 8003314:	d022      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8003316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800331a:	d115      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800331c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003320:	3308      	adds	r3, #8
 8003322:	2100      	movs	r1, #0
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fdef 	bl	8003f08 <RCCEx_PLL2_Config>
 800332a:	4603      	mov	r3, r0
 800332c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003330:	e015      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003332:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003336:	3328      	adds	r3, #40	; 0x28
 8003338:	2102      	movs	r1, #2
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fe96 	bl	800406c <RCCEx_PLL3_Config>
 8003340:	4603      	mov	r3, r0
 8003342:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003346:	e00a      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800334e:	e006      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003350:	bf00      	nop
 8003352:	e004      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003354:	bf00      	nop
 8003356:	e002      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003358:	bf00      	nop
 800335a:	e000      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800335c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800335e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10b      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003366:	4b5c      	ldr	r3, [pc, #368]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336a:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800336e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003372:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003376:	4a58      	ldr	r2, [pc, #352]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003378:	430b      	orrs	r3, r1
 800337a:	6593      	str	r3, [r2, #88]	; 0x58
 800337c:	e003      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003382:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003386:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800338a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338e:	f002 0308 	and.w	r3, r2, #8
 8003392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003396:	2300      	movs	r3, #0
 8003398:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800339c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80033a0:	460b      	mov	r3, r1
 80033a2:	4313      	orrs	r3, r2
 80033a4:	d01e      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80033a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b2:	d10c      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033b8:	3328      	adds	r3, #40	; 0x28
 80033ba:	2102      	movs	r1, #2
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fe55 	bl	800406c <RCCEx_PLL3_Config>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80033ce:	4b42      	ldr	r3, [pc, #264]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033de:	4a3e      	ldr	r2, [pc, #248]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033e0:	430b      	orrs	r3, r1
 80033e2:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ec:	f002 0310 	and.w	r3, r2, #16
 80033f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033f4:	2300      	movs	r3, #0
 80033f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80033fa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80033fe:	460b      	mov	r3, r1
 8003400:	4313      	orrs	r3, r2
 8003402:	d01e      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003404:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003408:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800340c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003410:	d10c      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003412:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003416:	3328      	adds	r3, #40	; 0x28
 8003418:	2102      	movs	r1, #2
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fe26 	bl	800406c <RCCEx_PLL3_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800342c:	4b2a      	ldr	r3, [pc, #168]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800342e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003430:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003434:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003438:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800343c:	4a26      	ldr	r2, [pc, #152]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800343e:	430b      	orrs	r3, r1
 8003440:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003442:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800344e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003452:	2300      	movs	r3, #0
 8003454:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003458:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800345c:	460b      	mov	r3, r1
 800345e:	4313      	orrs	r3, r2
 8003460:	d040      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003462:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003466:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800346a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800346e:	d022      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8003470:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003474:	d81b      	bhi.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800347a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800347e:	d00b      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8003480:	e015      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003482:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003486:	3308      	adds	r3, #8
 8003488:	2100      	movs	r1, #0
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fd3c 	bl	8003f08 <RCCEx_PLL2_Config>
 8003490:	4603      	mov	r3, r0
 8003492:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003496:	e00f      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003498:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800349c:	3328      	adds	r3, #40	; 0x28
 800349e:	2102      	movs	r1, #2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fde3 	bl	800406c <RCCEx_PLL3_Config>
 80034a6:	4603      	mov	r3, r0
 80034a8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80034ac:	e004      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80034b4:	e000      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80034b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10d      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034c0:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80034c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80034d0:	4a01      	ldr	r2, [pc, #4]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034d2:	430b      	orrs	r3, r1
 80034d4:	6593      	str	r3, [r2, #88]	; 0x58
 80034d6:	e005      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80034d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034dc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80034e0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80034f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80034f2:	2300      	movs	r3, #0
 80034f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80034f6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80034fa:	460b      	mov	r3, r1
 80034fc:	4313      	orrs	r3, r2
 80034fe:	d03b      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003500:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003508:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800350c:	d01f      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800350e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003512:	d818      	bhi.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003514:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003518:	d003      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800351a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800351e:	d007      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003520:	e011      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003522:	4b64      	ldr	r3, [pc, #400]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	4a63      	ldr	r2, [pc, #396]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800352e:	e00f      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003530:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003534:	3328      	adds	r3, #40	; 0x28
 8003536:	2101      	movs	r1, #1
 8003538:	4618      	mov	r0, r3
 800353a:	f000 fd97 	bl	800406c <RCCEx_PLL3_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003544:	e004      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800354c:	e000      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800354e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003550:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10b      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003558:	4b56      	ldr	r3, [pc, #344]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800355a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003560:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003568:	4a52      	ldr	r2, [pc, #328]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800356a:	430b      	orrs	r3, r1
 800356c:	6553      	str	r3, [r2, #84]	; 0x54
 800356e:	e003      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003570:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003574:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003578:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003584:	673b      	str	r3, [r7, #112]	; 0x70
 8003586:	2300      	movs	r3, #0
 8003588:	677b      	str	r3, [r7, #116]	; 0x74
 800358a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800358e:	460b      	mov	r3, r1
 8003590:	4313      	orrs	r3, r2
 8003592:	d031      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003594:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800359e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a2:	d007      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80035a4:	e011      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035a6:	4b43      	ldr	r3, [pc, #268]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	4a42      	ldr	r2, [pc, #264]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80035ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80035b2:	e00e      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035b8:	3308      	adds	r3, #8
 80035ba:	2102      	movs	r1, #2
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fca3 	bl	8003f08 <RCCEx_PLL2_Config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80035c8:	e003      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80035d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035d2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10a      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80035da:	4b36      	ldr	r3, [pc, #216]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80035dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035de:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e8:	4a32      	ldr	r2, [pc, #200]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80035ea:	430b      	orrs	r3, r1
 80035ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035ee:	e003      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80035f4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003600:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003604:	66bb      	str	r3, [r7, #104]	; 0x68
 8003606:	2300      	movs	r3, #0
 8003608:	66fb      	str	r3, [r7, #108]	; 0x6c
 800360a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800360e:	460b      	mov	r3, r1
 8003610:	4313      	orrs	r3, r2
 8003612:	d00c      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003614:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003618:	3328      	adds	r3, #40	; 0x28
 800361a:	2102      	movs	r1, #2
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fd25 	bl	800406c <RCCEx_PLL3_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800362e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003636:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800363a:	663b      	str	r3, [r7, #96]	; 0x60
 800363c:	2300      	movs	r3, #0
 800363e:	667b      	str	r3, [r7, #100]	; 0x64
 8003640:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003644:	460b      	mov	r3, r1
 8003646:	4313      	orrs	r3, r2
 8003648:	d03a      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800364a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800364e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003652:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003656:	d018      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800365c:	d811      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800365e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003662:	d014      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003668:	d80b      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800366a:	2b00      	cmp	r3, #0
 800366c:	d011      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800366e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003672:	d106      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	4a0e      	ldr	r2, [pc, #56]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800367a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800367e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003680:	e008      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003688:	e004      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800368a:	bf00      	nop
 800368c:	e002      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800368e:	bf00      	nop
 8003690:	e000      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003694:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10d      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800369c:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800369e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ac:	4a01      	ldr	r2, [pc, #4]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80036ae:	430b      	orrs	r3, r1
 80036b0:	6553      	str	r3, [r2, #84]	; 0x54
 80036b2:	e005      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80036b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80036bc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80036cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80036ce:	2300      	movs	r3, #0
 80036d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80036d6:	460b      	mov	r3, r1
 80036d8:	4313      	orrs	r3, r2
 80036da:	d009      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036dc:	4baa      	ldr	r3, [pc, #680]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80036e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ea:	4aa7      	ldr	r2, [pc, #668]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80036f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80036fc:	653b      	str	r3, [r7, #80]	; 0x50
 80036fe:	2300      	movs	r3, #0
 8003700:	657b      	str	r3, [r7, #84]	; 0x54
 8003702:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003706:	460b      	mov	r3, r1
 8003708:	4313      	orrs	r3, r2
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800370c:	4b9e      	ldr	r3, [pc, #632]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003714:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003718:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800371c:	4a9a      	ldr	r2, [pc, #616]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800371e:	430b      	orrs	r3, r1
 8003720:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003722:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800372e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003730:	2300      	movs	r3, #0
 8003732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003734:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003738:	460b      	mov	r3, r1
 800373a:	4313      	orrs	r3, r2
 800373c:	d009      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800373e:	4b92      	ldr	r3, [pc, #584]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003742:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003746:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800374a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374c:	4a8e      	ldr	r2, [pc, #568]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800374e:	430b      	orrs	r3, r1
 8003750:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003752:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800375e:	643b      	str	r3, [r7, #64]	; 0x40
 8003760:	2300      	movs	r3, #0
 8003762:	647b      	str	r3, [r7, #68]	; 0x44
 8003764:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003768:	460b      	mov	r3, r1
 800376a:	4313      	orrs	r3, r2
 800376c:	d00e      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800376e:	4b86      	ldr	r3, [pc, #536]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	4a85      	ldr	r2, [pc, #532]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003774:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003778:	6113      	str	r3, [r2, #16]
 800377a:	4b83      	ldr	r3, [pc, #524]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800377c:	6919      	ldr	r1, [r3, #16]
 800377e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003782:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003786:	4a80      	ldr	r2, [pc, #512]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003788:	430b      	orrs	r3, r1
 800378a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800378c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003794:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003798:	63bb      	str	r3, [r7, #56]	; 0x38
 800379a:	2300      	movs	r3, #0
 800379c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800379e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80037a2:	460b      	mov	r3, r1
 80037a4:	4313      	orrs	r3, r2
 80037a6:	d009      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80037a8:	4b77      	ldr	r3, [pc, #476]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80037aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ac:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80037b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b6:	4a74      	ldr	r2, [pc, #464]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80037b8:	430b      	orrs	r3, r1
 80037ba:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80037c8:	633b      	str	r3, [r7, #48]	; 0x30
 80037ca:	2300      	movs	r3, #0
 80037cc:	637b      	str	r3, [r7, #52]	; 0x34
 80037ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80037d2:	460b      	mov	r3, r1
 80037d4:	4313      	orrs	r3, r2
 80037d6:	d00a      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037d8:	4b6b      	ldr	r3, [pc, #428]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80037da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037dc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80037e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e8:	4a67      	ldr	r2, [pc, #412]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80037ea:	430b      	orrs	r3, r1
 80037ec:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80037ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f6:	2100      	movs	r1, #0
 80037f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003800:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003804:	460b      	mov	r3, r1
 8003806:	4313      	orrs	r3, r2
 8003808:	d011      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800380a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800380e:	3308      	adds	r3, #8
 8003810:	2100      	movs	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fb78 	bl	8003f08 <RCCEx_PLL2_Config>
 8003818:	4603      	mov	r3, r0
 800381a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800381e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003826:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800382a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800382e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003836:	2100      	movs	r1, #0
 8003838:	6239      	str	r1, [r7, #32]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
 8003840:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003844:	460b      	mov	r3, r1
 8003846:	4313      	orrs	r3, r2
 8003848:	d011      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800384a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800384e:	3308      	adds	r3, #8
 8003850:	2101      	movs	r1, #1
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fb58 	bl	8003f08 <RCCEx_PLL2_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800385e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003866:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800386a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800386e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003876:	2100      	movs	r1, #0
 8003878:	61b9      	str	r1, [r7, #24]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003884:	460b      	mov	r3, r1
 8003886:	4313      	orrs	r3, r2
 8003888:	d011      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800388a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800388e:	3308      	adds	r3, #8
 8003890:	2102      	movs	r1, #2
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fb38 	bl	8003f08 <RCCEx_PLL2_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800389e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80038aa:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80038ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b6:	2100      	movs	r1, #0
 80038b8:	6139      	str	r1, [r7, #16]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80038c4:	460b      	mov	r3, r1
 80038c6:	4313      	orrs	r3, r2
 80038c8:	d011      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038ce:	3328      	adds	r3, #40	; 0x28
 80038d0:	2100      	movs	r1, #0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fbca 	bl	800406c <RCCEx_PLL3_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 80038de:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80038ea:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80038ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f6:	2100      	movs	r1, #0
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003904:	460b      	mov	r3, r1
 8003906:	4313      	orrs	r3, r2
 8003908:	d011      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800390a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800390e:	3328      	adds	r3, #40	; 0x28
 8003910:	2101      	movs	r1, #1
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fbaa 	bl	800406c <RCCEx_PLL3_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800391e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003926:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800392a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800392e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003936:	2100      	movs	r1, #0
 8003938:	6039      	str	r1, [r7, #0]
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	607b      	str	r3, [r7, #4]
 8003940:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003944:	460b      	mov	r3, r1
 8003946:	4313      	orrs	r3, r2
 8003948:	d011      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800394a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800394e:	3328      	adds	r3, #40	; 0x28
 8003950:	2102      	movs	r1, #2
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fb8a 	bl	800406c <RCCEx_PLL3_Config>
 8003958:	4603      	mov	r3, r0
 800395a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800395e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003966:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800396a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 800396e:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	e000      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
}
 800397c:	4618      	mov	r0, r3
 800397e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003982:	46bd      	mov	sp, r7
 8003984:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003988:	58024400 	.word	0x58024400

0800398c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003990:	f7fe fd56 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 8003994:	4602      	mov	r2, r0
 8003996:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	091b      	lsrs	r3, r3, #4
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	4904      	ldr	r1, [pc, #16]	; (80039b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80039a2:	5ccb      	ldrb	r3, [r1, r3]
 80039a4:	f003 031f 	and.w	r3, r3, #31
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	58024400 	.word	0x58024400
 80039b4:	08007e44 	.word	0x08007e44

080039b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b089      	sub	sp, #36	; 0x24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039c0:	4ba1      	ldr	r3, [pc, #644]	; (8003c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	f003 0303 	and.w	r3, r3, #3
 80039c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80039ca:	4b9f      	ldr	r3, [pc, #636]	; (8003c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	0b1b      	lsrs	r3, r3, #12
 80039d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80039d6:	4b9c      	ldr	r3, [pc, #624]	; (8003c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	091b      	lsrs	r3, r3, #4
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80039e2:	4b99      	ldr	r3, [pc, #612]	; (8003c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e6:	08db      	lsrs	r3, r3, #3
 80039e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	fb02 f303 	mul.w	r3, r2, r3
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 8111 	beq.w	8003c28 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	f000 8083 	beq.w	8003b14 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	f200 80a1 	bhi.w	8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d056      	beq.n	8003ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003a22:	e099      	b.n	8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a24:	4b88      	ldr	r3, [pc, #544]	; (8003c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d02d      	beq.n	8003a8c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a30:	4b85      	ldr	r3, [pc, #532]	; (8003c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	08db      	lsrs	r3, r3, #3
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	4a84      	ldr	r2, [pc, #528]	; (8003c4c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a40:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	ee07 3a90 	vmov	s15, r3
 8003a48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a5a:	4b7b      	ldr	r3, [pc, #492]	; (8003c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a62:	ee07 3a90 	vmov	s15, r3
 8003a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003c50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003a8a:	e087      	b.n	8003b9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	ee07 3a90 	vmov	s15, r3
 8003a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003c54 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a9e:	4b6a      	ldr	r3, [pc, #424]	; (8003c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa6:	ee07 3a90 	vmov	s15, r3
 8003aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aae:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ab2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003c50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ace:	e065      	b.n	8003b9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	ee07 3a90 	vmov	s15, r3
 8003ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ada:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ae2:	4b59      	ldr	r3, [pc, #356]	; (8003c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003af2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003af6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003c50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b12:	e043      	b.n	8003b9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b26:	4b48      	ldr	r3, [pc, #288]	; (8003c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b2e:	ee07 3a90 	vmov	s15, r3
 8003b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b36:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003c50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b56:	e021      	b.n	8003b9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	ee07 3a90 	vmov	s15, r3
 8003b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b6a:	4b37      	ldr	r3, [pc, #220]	; (8003c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b72:	ee07 3a90 	vmov	s15, r3
 8003b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003c50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b9a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003b9c:	4b2a      	ldr	r3, [pc, #168]	; (8003c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	0a5b      	lsrs	r3, r3, #9
 8003ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ba6:	ee07 3a90 	vmov	s15, r3
 8003baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bc2:	ee17 2a90 	vmov	r2, s15
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003bca:	4b1f      	ldr	r3, [pc, #124]	; (8003c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	0c1b      	lsrs	r3, r3, #16
 8003bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bd4:	ee07 3a90 	vmov	s15, r3
 8003bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003be0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003be4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bf0:	ee17 2a90 	vmov	r2, s15
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003bf8:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	0e1b      	lsrs	r3, r3, #24
 8003bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c12:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c1e:	ee17 2a90 	vmov	r2, s15
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c26:	e008      	b.n	8003c3a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	609a      	str	r2, [r3, #8]
}
 8003c3a:	bf00      	nop
 8003c3c:	3724      	adds	r7, #36	; 0x24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	58024400 	.word	0x58024400
 8003c4c:	03d09000 	.word	0x03d09000
 8003c50:	46000000 	.word	0x46000000
 8003c54:	4c742400 	.word	0x4c742400
 8003c58:	4a742400 	.word	0x4a742400
 8003c5c:	4bbebc20 	.word	0x4bbebc20

08003c60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b089      	sub	sp, #36	; 0x24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c68:	4ba1      	ldr	r3, [pc, #644]	; (8003ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	f003 0303 	and.w	r3, r3, #3
 8003c70:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003c72:	4b9f      	ldr	r3, [pc, #636]	; (8003ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c76:	0d1b      	lsrs	r3, r3, #20
 8003c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c7c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003c7e:	4b9c      	ldr	r3, [pc, #624]	; (8003ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	0a1b      	lsrs	r3, r3, #8
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003c8a:	4b99      	ldr	r3, [pc, #612]	; (8003ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8e:	08db      	lsrs	r3, r3, #3
 8003c90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	fb02 f303 	mul.w	r3, r2, r3
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8111 	beq.w	8003ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	f000 8083 	beq.w	8003dbc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	f200 80a1 	bhi.w	8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d056      	beq.n	8003d78 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003cca:	e099      	b.n	8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ccc:	4b88      	ldr	r3, [pc, #544]	; (8003ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d02d      	beq.n	8003d34 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cd8:	4b85      	ldr	r3, [pc, #532]	; (8003ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	08db      	lsrs	r3, r3, #3
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	4a84      	ldr	r2, [pc, #528]	; (8003ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	ee07 3a90 	vmov	s15, r3
 8003cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d02:	4b7b      	ldr	r3, [pc, #492]	; (8003ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d0a:	ee07 3a90 	vmov	s15, r3
 8003d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d16:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d32:	e087      	b.n	8003e44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	ee07 3a90 	vmov	s15, r3
 8003d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d46:	4b6a      	ldr	r3, [pc, #424]	; (8003ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4e:	ee07 3a90 	vmov	s15, r3
 8003d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d76:	e065      	b.n	8003e44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	ee07 3a90 	vmov	s15, r3
 8003d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d8a:	4b59      	ldr	r3, [pc, #356]	; (8003ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d92:	ee07 3a90 	vmov	s15, r3
 8003d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dba:	e043      	b.n	8003e44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	ee07 3a90 	vmov	s15, r3
 8003dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dce:	4b48      	ldr	r3, [pc, #288]	; (8003ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd6:	ee07 3a90 	vmov	s15, r3
 8003dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8003de2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dfe:	e021      	b.n	8003e44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	ee07 3a90 	vmov	s15, r3
 8003e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e12:	4b37      	ldr	r3, [pc, #220]	; (8003ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e1a:	ee07 3a90 	vmov	s15, r3
 8003e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e26:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e42:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003e44:	4b2a      	ldr	r3, [pc, #168]	; (8003ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	0a5b      	lsrs	r3, r3, #9
 8003e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e4e:	ee07 3a90 	vmov	s15, r3
 8003e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e6a:	ee17 2a90 	vmov	r2, s15
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003e72:	4b1f      	ldr	r3, [pc, #124]	; (8003ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	0c1b      	lsrs	r3, r3, #16
 8003e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e7c:	ee07 3a90 	vmov	s15, r3
 8003e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e98:	ee17 2a90 	vmov	r2, s15
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003ea0:	4b13      	ldr	r3, [pc, #76]	; (8003ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	0e1b      	lsrs	r3, r3, #24
 8003ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eaa:	ee07 3a90 	vmov	s15, r3
 8003eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003eb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003eba:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ebe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ec6:	ee17 2a90 	vmov	r2, s15
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003ece:	e008      	b.n	8003ee2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	609a      	str	r2, [r3, #8]
}
 8003ee2:	bf00      	nop
 8003ee4:	3724      	adds	r7, #36	; 0x24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	58024400 	.word	0x58024400
 8003ef4:	03d09000 	.word	0x03d09000
 8003ef8:	46000000 	.word	0x46000000
 8003efc:	4c742400 	.word	0x4c742400
 8003f00:	4a742400 	.word	0x4a742400
 8003f04:	4bbebc20 	.word	0x4bbebc20

08003f08 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f16:	4b53      	ldr	r3, [pc, #332]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d101      	bne.n	8003f26 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e099      	b.n	800405a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f26:	4b4f      	ldr	r3, [pc, #316]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a4e      	ldr	r2, [pc, #312]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 8003f2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f32:	f7fc ffa3 	bl	8000e7c <HAL_GetTick>
 8003f36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f38:	e008      	b.n	8003f4c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f3a:	f7fc ff9f 	bl	8000e7c <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e086      	b.n	800405a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f4c:	4b45      	ldr	r3, [pc, #276]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1f0      	bne.n	8003f3a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003f58:	4b42      	ldr	r3, [pc, #264]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	031b      	lsls	r3, r3, #12
 8003f66:	493f      	ldr	r1, [pc, #252]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	628b      	str	r3, [r1, #40]	; 0x28
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	3b01      	subs	r3, #1
 8003f72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	025b      	lsls	r3, r3, #9
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	041b      	lsls	r3, r3, #16
 8003f8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	3b01      	subs	r3, #1
 8003f96:	061b      	lsls	r3, r3, #24
 8003f98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f9c:	4931      	ldr	r1, [pc, #196]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003fa2:	4b30      	ldr	r3, [pc, #192]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	492d      	ldr	r1, [pc, #180]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003fb4:	4b2b      	ldr	r3, [pc, #172]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	f023 0220 	bic.w	r2, r3, #32
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	4928      	ldr	r1, [pc, #160]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003fc6:	4b27      	ldr	r3, [pc, #156]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	4a26      	ldr	r2, [pc, #152]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 8003fcc:	f023 0310 	bic.w	r3, r3, #16
 8003fd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003fd2:	4b24      	ldr	r3, [pc, #144]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 8003fd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fd6:	4b24      	ldr	r3, [pc, #144]	; (8004068 <RCCEx_PLL2_Config+0x160>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	69d2      	ldr	r2, [r2, #28]
 8003fde:	00d2      	lsls	r2, r2, #3
 8003fe0:	4920      	ldr	r1, [pc, #128]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003fe6:	4b1f      	ldr	r3, [pc, #124]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 8003fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fea:	4a1e      	ldr	r2, [pc, #120]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 8003fec:	f043 0310 	orr.w	r3, r3, #16
 8003ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d106      	bne.n	8004006 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003ff8:	4b1a      	ldr	r3, [pc, #104]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	4a19      	ldr	r2, [pc, #100]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 8003ffe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004002:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004004:	e00f      	b.n	8004026 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d106      	bne.n	800401a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800400c:	4b15      	ldr	r3, [pc, #84]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	4a14      	ldr	r2, [pc, #80]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 8004012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004016:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004018:	e005      	b.n	8004026 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800401a:	4b12      	ldr	r3, [pc, #72]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 800401c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401e:	4a11      	ldr	r2, [pc, #68]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 8004020:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004024:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004026:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a0e      	ldr	r2, [pc, #56]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 800402c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004030:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004032:	f7fc ff23 	bl	8000e7c <HAL_GetTick>
 8004036:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004038:	e008      	b.n	800404c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800403a:	f7fc ff1f 	bl	8000e7c <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e006      	b.n	800405a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800404c:	4b05      	ldr	r3, [pc, #20]	; (8004064 <RCCEx_PLL2_Config+0x15c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0f0      	beq.n	800403a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004058:	7bfb      	ldrb	r3, [r7, #15]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	58024400 	.word	0x58024400
 8004068:	ffff0007 	.word	0xffff0007

0800406c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800407a:	4b53      	ldr	r3, [pc, #332]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b03      	cmp	r3, #3
 8004084:	d101      	bne.n	800408a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e099      	b.n	80041be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800408a:	4b4f      	ldr	r3, [pc, #316]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a4e      	ldr	r2, [pc, #312]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 8004090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004094:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004096:	f7fc fef1 	bl	8000e7c <HAL_GetTick>
 800409a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800409c:	e008      	b.n	80040b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800409e:	f7fc feed 	bl	8000e7c <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e086      	b.n	80041be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040b0:	4b45      	ldr	r3, [pc, #276]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1f0      	bne.n	800409e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80040bc:	4b42      	ldr	r3, [pc, #264]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 80040be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	051b      	lsls	r3, r3, #20
 80040ca:	493f      	ldr	r1, [pc, #252]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	628b      	str	r3, [r1, #40]	; 0x28
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	3b01      	subs	r3, #1
 80040d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	3b01      	subs	r3, #1
 80040e0:	025b      	lsls	r3, r3, #9
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	041b      	lsls	r3, r3, #16
 80040ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	3b01      	subs	r3, #1
 80040fa:	061b      	lsls	r3, r3, #24
 80040fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004100:	4931      	ldr	r1, [pc, #196]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 8004102:	4313      	orrs	r3, r2
 8004104:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004106:	4b30      	ldr	r3, [pc, #192]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	492d      	ldr	r1, [pc, #180]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 8004114:	4313      	orrs	r3, r2
 8004116:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004118:	4b2b      	ldr	r3, [pc, #172]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	4928      	ldr	r1, [pc, #160]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 8004126:	4313      	orrs	r3, r2
 8004128:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800412a:	4b27      	ldr	r3, [pc, #156]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	4a26      	ldr	r2, [pc, #152]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 8004130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004134:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004136:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 8004138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800413a:	4b24      	ldr	r3, [pc, #144]	; (80041cc <RCCEx_PLL3_Config+0x160>)
 800413c:	4013      	ands	r3, r2
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	69d2      	ldr	r2, [r2, #28]
 8004142:	00d2      	lsls	r2, r2, #3
 8004144:	4920      	ldr	r1, [pc, #128]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 8004146:	4313      	orrs	r3, r2
 8004148:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800414a:	4b1f      	ldr	r3, [pc, #124]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	4a1e      	ldr	r2, [pc, #120]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 8004150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004154:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d106      	bne.n	800416a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800415c:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	4a19      	ldr	r2, [pc, #100]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 8004162:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004166:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004168:	e00f      	b.n	800418a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d106      	bne.n	800417e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004170:	4b15      	ldr	r3, [pc, #84]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	4a14      	ldr	r2, [pc, #80]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 8004176:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800417a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800417c:	e005      	b.n	800418a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800417e:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	4a11      	ldr	r2, [pc, #68]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 8004184:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004188:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800418a:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a0e      	ldr	r2, [pc, #56]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 8004190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004194:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004196:	f7fc fe71 	bl	8000e7c <HAL_GetTick>
 800419a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800419c:	e008      	b.n	80041b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800419e:	f7fc fe6d 	bl	8000e7c <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d901      	bls.n	80041b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e006      	b.n	80041be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041b0:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <RCCEx_PLL3_Config+0x15c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0f0      	beq.n	800419e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	58024400 	.word	0x58024400
 80041cc:	ffff0007 	.word	0xffff0007

080041d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e042      	b.n	8004268 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d106      	bne.n	80041fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7fc fd27 	bl	8000c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2224      	movs	r2, #36	; 0x24
 80041fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0201 	bic.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f8ba 	bl	800438c <UART_SetConfig>
 8004218:	4603      	mov	r3, r0
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e022      	b.n	8004268 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fe16 	bl	8004e5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800423e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800424e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fe9d 	bl	8004fa0 <UART_CheckIdleState>
 8004266:	4603      	mov	r3, r0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	; 0x28
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	2b20      	cmp	r3, #32
 8004288:	d17b      	bne.n	8004382 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <HAL_UART_Transmit+0x26>
 8004290:	88fb      	ldrh	r3, [r7, #6]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e074      	b.n	8004384 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2221      	movs	r2, #33	; 0x21
 80042a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042aa:	f7fc fde7 	bl	8000e7c <HAL_GetTick>
 80042ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	88fa      	ldrh	r2, [r7, #6]
 80042b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	88fa      	ldrh	r2, [r7, #6]
 80042bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c8:	d108      	bne.n	80042dc <HAL_UART_Transmit+0x6c>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d104      	bne.n	80042dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	61bb      	str	r3, [r7, #24]
 80042da:	e003      	b.n	80042e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042e4:	e030      	b.n	8004348 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2200      	movs	r2, #0
 80042ee:	2180      	movs	r1, #128	; 0x80
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 feff 	bl	80050f4 <UART_WaitOnFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2220      	movs	r2, #32
 8004300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e03d      	b.n	8004384 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10b      	bne.n	8004326 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800431c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	3302      	adds	r3, #2
 8004322:	61bb      	str	r3, [r7, #24]
 8004324:	e007      	b.n	8004336 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	781a      	ldrb	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	3301      	adds	r3, #1
 8004334:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800434e:	b29b      	uxth	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1c8      	bne.n	80042e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2200      	movs	r2, #0
 800435c:	2140      	movs	r1, #64	; 0x40
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 fec8 	bl	80050f4 <UART_WaitOnFlagUntilTimeout>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d005      	beq.n	8004376 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2220      	movs	r2, #32
 800436e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e006      	b.n	8004384 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	e000      	b.n	8004384 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004382:	2302      	movs	r3, #2
  }
}
 8004384:	4618      	mov	r0, r3
 8004386:	3720      	adds	r7, #32
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800438c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004390:	b092      	sub	sp, #72	; 0x48
 8004392:	af00      	add	r7, sp, #0
 8004394:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	431a      	orrs	r2, r3
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	4bbe      	ldr	r3, [pc, #760]	; (80046b4 <UART_SetConfig+0x328>)
 80043bc:	4013      	ands	r3, r2
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	6812      	ldr	r2, [r2, #0]
 80043c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043c4:	430b      	orrs	r3, r1
 80043c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4ab3      	ldr	r2, [pc, #716]	; (80046b8 <UART_SetConfig+0x32c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d004      	beq.n	80043f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043f4:	4313      	orrs	r3, r2
 80043f6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	4baf      	ldr	r3, [pc, #700]	; (80046bc <UART_SetConfig+0x330>)
 8004400:	4013      	ands	r3, r2
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	6812      	ldr	r2, [r2, #0]
 8004406:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004408:	430b      	orrs	r3, r1
 800440a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	f023 010f 	bic.w	r1, r3, #15
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4aa6      	ldr	r2, [pc, #664]	; (80046c0 <UART_SetConfig+0x334>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d177      	bne.n	800451c <UART_SetConfig+0x190>
 800442c:	4ba5      	ldr	r3, [pc, #660]	; (80046c4 <UART_SetConfig+0x338>)
 800442e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004430:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004434:	2b28      	cmp	r3, #40	; 0x28
 8004436:	d86d      	bhi.n	8004514 <UART_SetConfig+0x188>
 8004438:	a201      	add	r2, pc, #4	; (adr r2, 8004440 <UART_SetConfig+0xb4>)
 800443a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443e:	bf00      	nop
 8004440:	080044e5 	.word	0x080044e5
 8004444:	08004515 	.word	0x08004515
 8004448:	08004515 	.word	0x08004515
 800444c:	08004515 	.word	0x08004515
 8004450:	08004515 	.word	0x08004515
 8004454:	08004515 	.word	0x08004515
 8004458:	08004515 	.word	0x08004515
 800445c:	08004515 	.word	0x08004515
 8004460:	080044ed 	.word	0x080044ed
 8004464:	08004515 	.word	0x08004515
 8004468:	08004515 	.word	0x08004515
 800446c:	08004515 	.word	0x08004515
 8004470:	08004515 	.word	0x08004515
 8004474:	08004515 	.word	0x08004515
 8004478:	08004515 	.word	0x08004515
 800447c:	08004515 	.word	0x08004515
 8004480:	080044f5 	.word	0x080044f5
 8004484:	08004515 	.word	0x08004515
 8004488:	08004515 	.word	0x08004515
 800448c:	08004515 	.word	0x08004515
 8004490:	08004515 	.word	0x08004515
 8004494:	08004515 	.word	0x08004515
 8004498:	08004515 	.word	0x08004515
 800449c:	08004515 	.word	0x08004515
 80044a0:	080044fd 	.word	0x080044fd
 80044a4:	08004515 	.word	0x08004515
 80044a8:	08004515 	.word	0x08004515
 80044ac:	08004515 	.word	0x08004515
 80044b0:	08004515 	.word	0x08004515
 80044b4:	08004515 	.word	0x08004515
 80044b8:	08004515 	.word	0x08004515
 80044bc:	08004515 	.word	0x08004515
 80044c0:	08004505 	.word	0x08004505
 80044c4:	08004515 	.word	0x08004515
 80044c8:	08004515 	.word	0x08004515
 80044cc:	08004515 	.word	0x08004515
 80044d0:	08004515 	.word	0x08004515
 80044d4:	08004515 	.word	0x08004515
 80044d8:	08004515 	.word	0x08004515
 80044dc:	08004515 	.word	0x08004515
 80044e0:	0800450d 	.word	0x0800450d
 80044e4:	2301      	movs	r3, #1
 80044e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ea:	e222      	b.n	8004932 <UART_SetConfig+0x5a6>
 80044ec:	2304      	movs	r3, #4
 80044ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044f2:	e21e      	b.n	8004932 <UART_SetConfig+0x5a6>
 80044f4:	2308      	movs	r3, #8
 80044f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044fa:	e21a      	b.n	8004932 <UART_SetConfig+0x5a6>
 80044fc:	2310      	movs	r3, #16
 80044fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004502:	e216      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004504:	2320      	movs	r3, #32
 8004506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800450a:	e212      	b.n	8004932 <UART_SetConfig+0x5a6>
 800450c:	2340      	movs	r3, #64	; 0x40
 800450e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004512:	e20e      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004514:	2380      	movs	r3, #128	; 0x80
 8004516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800451a:	e20a      	b.n	8004932 <UART_SetConfig+0x5a6>
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a69      	ldr	r2, [pc, #420]	; (80046c8 <UART_SetConfig+0x33c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d130      	bne.n	8004588 <UART_SetConfig+0x1fc>
 8004526:	4b67      	ldr	r3, [pc, #412]	; (80046c4 <UART_SetConfig+0x338>)
 8004528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	2b05      	cmp	r3, #5
 8004530:	d826      	bhi.n	8004580 <UART_SetConfig+0x1f4>
 8004532:	a201      	add	r2, pc, #4	; (adr r2, 8004538 <UART_SetConfig+0x1ac>)
 8004534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004538:	08004551 	.word	0x08004551
 800453c:	08004559 	.word	0x08004559
 8004540:	08004561 	.word	0x08004561
 8004544:	08004569 	.word	0x08004569
 8004548:	08004571 	.word	0x08004571
 800454c:	08004579 	.word	0x08004579
 8004550:	2300      	movs	r3, #0
 8004552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004556:	e1ec      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004558:	2304      	movs	r3, #4
 800455a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800455e:	e1e8      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004560:	2308      	movs	r3, #8
 8004562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004566:	e1e4      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004568:	2310      	movs	r3, #16
 800456a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800456e:	e1e0      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004570:	2320      	movs	r3, #32
 8004572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004576:	e1dc      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004578:	2340      	movs	r3, #64	; 0x40
 800457a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800457e:	e1d8      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004580:	2380      	movs	r3, #128	; 0x80
 8004582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004586:	e1d4      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a4f      	ldr	r2, [pc, #316]	; (80046cc <UART_SetConfig+0x340>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d130      	bne.n	80045f4 <UART_SetConfig+0x268>
 8004592:	4b4c      	ldr	r3, [pc, #304]	; (80046c4 <UART_SetConfig+0x338>)
 8004594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	2b05      	cmp	r3, #5
 800459c:	d826      	bhi.n	80045ec <UART_SetConfig+0x260>
 800459e:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <UART_SetConfig+0x218>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	080045bd 	.word	0x080045bd
 80045a8:	080045c5 	.word	0x080045c5
 80045ac:	080045cd 	.word	0x080045cd
 80045b0:	080045d5 	.word	0x080045d5
 80045b4:	080045dd 	.word	0x080045dd
 80045b8:	080045e5 	.word	0x080045e5
 80045bc:	2300      	movs	r3, #0
 80045be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045c2:	e1b6      	b.n	8004932 <UART_SetConfig+0x5a6>
 80045c4:	2304      	movs	r3, #4
 80045c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ca:	e1b2      	b.n	8004932 <UART_SetConfig+0x5a6>
 80045cc:	2308      	movs	r3, #8
 80045ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045d2:	e1ae      	b.n	8004932 <UART_SetConfig+0x5a6>
 80045d4:	2310      	movs	r3, #16
 80045d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045da:	e1aa      	b.n	8004932 <UART_SetConfig+0x5a6>
 80045dc:	2320      	movs	r3, #32
 80045de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045e2:	e1a6      	b.n	8004932 <UART_SetConfig+0x5a6>
 80045e4:	2340      	movs	r3, #64	; 0x40
 80045e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ea:	e1a2      	b.n	8004932 <UART_SetConfig+0x5a6>
 80045ec:	2380      	movs	r3, #128	; 0x80
 80045ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045f2:	e19e      	b.n	8004932 <UART_SetConfig+0x5a6>
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a35      	ldr	r2, [pc, #212]	; (80046d0 <UART_SetConfig+0x344>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d130      	bne.n	8004660 <UART_SetConfig+0x2d4>
 80045fe:	4b31      	ldr	r3, [pc, #196]	; (80046c4 <UART_SetConfig+0x338>)
 8004600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	2b05      	cmp	r3, #5
 8004608:	d826      	bhi.n	8004658 <UART_SetConfig+0x2cc>
 800460a:	a201      	add	r2, pc, #4	; (adr r2, 8004610 <UART_SetConfig+0x284>)
 800460c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004610:	08004629 	.word	0x08004629
 8004614:	08004631 	.word	0x08004631
 8004618:	08004639 	.word	0x08004639
 800461c:	08004641 	.word	0x08004641
 8004620:	08004649 	.word	0x08004649
 8004624:	08004651 	.word	0x08004651
 8004628:	2300      	movs	r3, #0
 800462a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800462e:	e180      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004630:	2304      	movs	r3, #4
 8004632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004636:	e17c      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004638:	2308      	movs	r3, #8
 800463a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800463e:	e178      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004640:	2310      	movs	r3, #16
 8004642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004646:	e174      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004648:	2320      	movs	r3, #32
 800464a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800464e:	e170      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004650:	2340      	movs	r3, #64	; 0x40
 8004652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004656:	e16c      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004658:	2380      	movs	r3, #128	; 0x80
 800465a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800465e:	e168      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1b      	ldr	r2, [pc, #108]	; (80046d4 <UART_SetConfig+0x348>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d142      	bne.n	80046f0 <UART_SetConfig+0x364>
 800466a:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <UART_SetConfig+0x338>)
 800466c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	2b05      	cmp	r3, #5
 8004674:	d838      	bhi.n	80046e8 <UART_SetConfig+0x35c>
 8004676:	a201      	add	r2, pc, #4	; (adr r2, 800467c <UART_SetConfig+0x2f0>)
 8004678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467c:	08004695 	.word	0x08004695
 8004680:	0800469d 	.word	0x0800469d
 8004684:	080046a5 	.word	0x080046a5
 8004688:	080046ad 	.word	0x080046ad
 800468c:	080046d9 	.word	0x080046d9
 8004690:	080046e1 	.word	0x080046e1
 8004694:	2300      	movs	r3, #0
 8004696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800469a:	e14a      	b.n	8004932 <UART_SetConfig+0x5a6>
 800469c:	2304      	movs	r3, #4
 800469e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046a2:	e146      	b.n	8004932 <UART_SetConfig+0x5a6>
 80046a4:	2308      	movs	r3, #8
 80046a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046aa:	e142      	b.n	8004932 <UART_SetConfig+0x5a6>
 80046ac:	2310      	movs	r3, #16
 80046ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046b2:	e13e      	b.n	8004932 <UART_SetConfig+0x5a6>
 80046b4:	cfff69f3 	.word	0xcfff69f3
 80046b8:	58000c00 	.word	0x58000c00
 80046bc:	11fff4ff 	.word	0x11fff4ff
 80046c0:	40011000 	.word	0x40011000
 80046c4:	58024400 	.word	0x58024400
 80046c8:	40004400 	.word	0x40004400
 80046cc:	40004800 	.word	0x40004800
 80046d0:	40004c00 	.word	0x40004c00
 80046d4:	40005000 	.word	0x40005000
 80046d8:	2320      	movs	r3, #32
 80046da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046de:	e128      	b.n	8004932 <UART_SetConfig+0x5a6>
 80046e0:	2340      	movs	r3, #64	; 0x40
 80046e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046e6:	e124      	b.n	8004932 <UART_SetConfig+0x5a6>
 80046e8:	2380      	movs	r3, #128	; 0x80
 80046ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ee:	e120      	b.n	8004932 <UART_SetConfig+0x5a6>
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4acb      	ldr	r2, [pc, #812]	; (8004a24 <UART_SetConfig+0x698>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d176      	bne.n	80047e8 <UART_SetConfig+0x45c>
 80046fa:	4bcb      	ldr	r3, [pc, #812]	; (8004a28 <UART_SetConfig+0x69c>)
 80046fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004702:	2b28      	cmp	r3, #40	; 0x28
 8004704:	d86c      	bhi.n	80047e0 <UART_SetConfig+0x454>
 8004706:	a201      	add	r2, pc, #4	; (adr r2, 800470c <UART_SetConfig+0x380>)
 8004708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470c:	080047b1 	.word	0x080047b1
 8004710:	080047e1 	.word	0x080047e1
 8004714:	080047e1 	.word	0x080047e1
 8004718:	080047e1 	.word	0x080047e1
 800471c:	080047e1 	.word	0x080047e1
 8004720:	080047e1 	.word	0x080047e1
 8004724:	080047e1 	.word	0x080047e1
 8004728:	080047e1 	.word	0x080047e1
 800472c:	080047b9 	.word	0x080047b9
 8004730:	080047e1 	.word	0x080047e1
 8004734:	080047e1 	.word	0x080047e1
 8004738:	080047e1 	.word	0x080047e1
 800473c:	080047e1 	.word	0x080047e1
 8004740:	080047e1 	.word	0x080047e1
 8004744:	080047e1 	.word	0x080047e1
 8004748:	080047e1 	.word	0x080047e1
 800474c:	080047c1 	.word	0x080047c1
 8004750:	080047e1 	.word	0x080047e1
 8004754:	080047e1 	.word	0x080047e1
 8004758:	080047e1 	.word	0x080047e1
 800475c:	080047e1 	.word	0x080047e1
 8004760:	080047e1 	.word	0x080047e1
 8004764:	080047e1 	.word	0x080047e1
 8004768:	080047e1 	.word	0x080047e1
 800476c:	080047c9 	.word	0x080047c9
 8004770:	080047e1 	.word	0x080047e1
 8004774:	080047e1 	.word	0x080047e1
 8004778:	080047e1 	.word	0x080047e1
 800477c:	080047e1 	.word	0x080047e1
 8004780:	080047e1 	.word	0x080047e1
 8004784:	080047e1 	.word	0x080047e1
 8004788:	080047e1 	.word	0x080047e1
 800478c:	080047d1 	.word	0x080047d1
 8004790:	080047e1 	.word	0x080047e1
 8004794:	080047e1 	.word	0x080047e1
 8004798:	080047e1 	.word	0x080047e1
 800479c:	080047e1 	.word	0x080047e1
 80047a0:	080047e1 	.word	0x080047e1
 80047a4:	080047e1 	.word	0x080047e1
 80047a8:	080047e1 	.word	0x080047e1
 80047ac:	080047d9 	.word	0x080047d9
 80047b0:	2301      	movs	r3, #1
 80047b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047b6:	e0bc      	b.n	8004932 <UART_SetConfig+0x5a6>
 80047b8:	2304      	movs	r3, #4
 80047ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047be:	e0b8      	b.n	8004932 <UART_SetConfig+0x5a6>
 80047c0:	2308      	movs	r3, #8
 80047c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047c6:	e0b4      	b.n	8004932 <UART_SetConfig+0x5a6>
 80047c8:	2310      	movs	r3, #16
 80047ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ce:	e0b0      	b.n	8004932 <UART_SetConfig+0x5a6>
 80047d0:	2320      	movs	r3, #32
 80047d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047d6:	e0ac      	b.n	8004932 <UART_SetConfig+0x5a6>
 80047d8:	2340      	movs	r3, #64	; 0x40
 80047da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047de:	e0a8      	b.n	8004932 <UART_SetConfig+0x5a6>
 80047e0:	2380      	movs	r3, #128	; 0x80
 80047e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047e6:	e0a4      	b.n	8004932 <UART_SetConfig+0x5a6>
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a8f      	ldr	r2, [pc, #572]	; (8004a2c <UART_SetConfig+0x6a0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d130      	bne.n	8004854 <UART_SetConfig+0x4c8>
 80047f2:	4b8d      	ldr	r3, [pc, #564]	; (8004a28 <UART_SetConfig+0x69c>)
 80047f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	2b05      	cmp	r3, #5
 80047fc:	d826      	bhi.n	800484c <UART_SetConfig+0x4c0>
 80047fe:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <UART_SetConfig+0x478>)
 8004800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004804:	0800481d 	.word	0x0800481d
 8004808:	08004825 	.word	0x08004825
 800480c:	0800482d 	.word	0x0800482d
 8004810:	08004835 	.word	0x08004835
 8004814:	0800483d 	.word	0x0800483d
 8004818:	08004845 	.word	0x08004845
 800481c:	2300      	movs	r3, #0
 800481e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004822:	e086      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004824:	2304      	movs	r3, #4
 8004826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800482a:	e082      	b.n	8004932 <UART_SetConfig+0x5a6>
 800482c:	2308      	movs	r3, #8
 800482e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004832:	e07e      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004834:	2310      	movs	r3, #16
 8004836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800483a:	e07a      	b.n	8004932 <UART_SetConfig+0x5a6>
 800483c:	2320      	movs	r3, #32
 800483e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004842:	e076      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004844:	2340      	movs	r3, #64	; 0x40
 8004846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800484a:	e072      	b.n	8004932 <UART_SetConfig+0x5a6>
 800484c:	2380      	movs	r3, #128	; 0x80
 800484e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004852:	e06e      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a75      	ldr	r2, [pc, #468]	; (8004a30 <UART_SetConfig+0x6a4>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d130      	bne.n	80048c0 <UART_SetConfig+0x534>
 800485e:	4b72      	ldr	r3, [pc, #456]	; (8004a28 <UART_SetConfig+0x69c>)
 8004860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	2b05      	cmp	r3, #5
 8004868:	d826      	bhi.n	80048b8 <UART_SetConfig+0x52c>
 800486a:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <UART_SetConfig+0x4e4>)
 800486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004870:	08004889 	.word	0x08004889
 8004874:	08004891 	.word	0x08004891
 8004878:	08004899 	.word	0x08004899
 800487c:	080048a1 	.word	0x080048a1
 8004880:	080048a9 	.word	0x080048a9
 8004884:	080048b1 	.word	0x080048b1
 8004888:	2300      	movs	r3, #0
 800488a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800488e:	e050      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004890:	2304      	movs	r3, #4
 8004892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004896:	e04c      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004898:	2308      	movs	r3, #8
 800489a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800489e:	e048      	b.n	8004932 <UART_SetConfig+0x5a6>
 80048a0:	2310      	movs	r3, #16
 80048a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048a6:	e044      	b.n	8004932 <UART_SetConfig+0x5a6>
 80048a8:	2320      	movs	r3, #32
 80048aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048ae:	e040      	b.n	8004932 <UART_SetConfig+0x5a6>
 80048b0:	2340      	movs	r3, #64	; 0x40
 80048b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048b6:	e03c      	b.n	8004932 <UART_SetConfig+0x5a6>
 80048b8:	2380      	movs	r3, #128	; 0x80
 80048ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048be:	e038      	b.n	8004932 <UART_SetConfig+0x5a6>
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a5b      	ldr	r2, [pc, #364]	; (8004a34 <UART_SetConfig+0x6a8>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d130      	bne.n	800492c <UART_SetConfig+0x5a0>
 80048ca:	4b57      	ldr	r3, [pc, #348]	; (8004a28 <UART_SetConfig+0x69c>)
 80048cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	2b05      	cmp	r3, #5
 80048d4:	d826      	bhi.n	8004924 <UART_SetConfig+0x598>
 80048d6:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <UART_SetConfig+0x550>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	080048f5 	.word	0x080048f5
 80048e0:	080048fd 	.word	0x080048fd
 80048e4:	08004905 	.word	0x08004905
 80048e8:	0800490d 	.word	0x0800490d
 80048ec:	08004915 	.word	0x08004915
 80048f0:	0800491d 	.word	0x0800491d
 80048f4:	2302      	movs	r3, #2
 80048f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048fa:	e01a      	b.n	8004932 <UART_SetConfig+0x5a6>
 80048fc:	2304      	movs	r3, #4
 80048fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004902:	e016      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004904:	2308      	movs	r3, #8
 8004906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800490a:	e012      	b.n	8004932 <UART_SetConfig+0x5a6>
 800490c:	2310      	movs	r3, #16
 800490e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004912:	e00e      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004914:	2320      	movs	r3, #32
 8004916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800491a:	e00a      	b.n	8004932 <UART_SetConfig+0x5a6>
 800491c:	2340      	movs	r3, #64	; 0x40
 800491e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004922:	e006      	b.n	8004932 <UART_SetConfig+0x5a6>
 8004924:	2380      	movs	r3, #128	; 0x80
 8004926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800492a:	e002      	b.n	8004932 <UART_SetConfig+0x5a6>
 800492c:	2380      	movs	r3, #128	; 0x80
 800492e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a3f      	ldr	r2, [pc, #252]	; (8004a34 <UART_SetConfig+0x6a8>)
 8004938:	4293      	cmp	r3, r2
 800493a:	f040 80f8 	bne.w	8004b2e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800493e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004942:	2b20      	cmp	r3, #32
 8004944:	dc46      	bgt.n	80049d4 <UART_SetConfig+0x648>
 8004946:	2b02      	cmp	r3, #2
 8004948:	f2c0 8082 	blt.w	8004a50 <UART_SetConfig+0x6c4>
 800494c:	3b02      	subs	r3, #2
 800494e:	2b1e      	cmp	r3, #30
 8004950:	d87e      	bhi.n	8004a50 <UART_SetConfig+0x6c4>
 8004952:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <UART_SetConfig+0x5cc>)
 8004954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004958:	080049db 	.word	0x080049db
 800495c:	08004a51 	.word	0x08004a51
 8004960:	080049e3 	.word	0x080049e3
 8004964:	08004a51 	.word	0x08004a51
 8004968:	08004a51 	.word	0x08004a51
 800496c:	08004a51 	.word	0x08004a51
 8004970:	080049f3 	.word	0x080049f3
 8004974:	08004a51 	.word	0x08004a51
 8004978:	08004a51 	.word	0x08004a51
 800497c:	08004a51 	.word	0x08004a51
 8004980:	08004a51 	.word	0x08004a51
 8004984:	08004a51 	.word	0x08004a51
 8004988:	08004a51 	.word	0x08004a51
 800498c:	08004a51 	.word	0x08004a51
 8004990:	08004a03 	.word	0x08004a03
 8004994:	08004a51 	.word	0x08004a51
 8004998:	08004a51 	.word	0x08004a51
 800499c:	08004a51 	.word	0x08004a51
 80049a0:	08004a51 	.word	0x08004a51
 80049a4:	08004a51 	.word	0x08004a51
 80049a8:	08004a51 	.word	0x08004a51
 80049ac:	08004a51 	.word	0x08004a51
 80049b0:	08004a51 	.word	0x08004a51
 80049b4:	08004a51 	.word	0x08004a51
 80049b8:	08004a51 	.word	0x08004a51
 80049bc:	08004a51 	.word	0x08004a51
 80049c0:	08004a51 	.word	0x08004a51
 80049c4:	08004a51 	.word	0x08004a51
 80049c8:	08004a51 	.word	0x08004a51
 80049cc:	08004a51 	.word	0x08004a51
 80049d0:	08004a43 	.word	0x08004a43
 80049d4:	2b40      	cmp	r3, #64	; 0x40
 80049d6:	d037      	beq.n	8004a48 <UART_SetConfig+0x6bc>
 80049d8:	e03a      	b.n	8004a50 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80049da:	f7fe ffd7 	bl	800398c <HAL_RCCEx_GetD3PCLK1Freq>
 80049de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80049e0:	e03c      	b.n	8004a5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fe ffe6 	bl	80039b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049f0:	e034      	b.n	8004a5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049f2:	f107 0318 	add.w	r3, r7, #24
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff f932 	bl	8003c60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a00:	e02c      	b.n	8004a5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a02:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <UART_SetConfig+0x69c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d016      	beq.n	8004a3c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a0e:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <UART_SetConfig+0x69c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	08db      	lsrs	r3, r3, #3
 8004a14:	f003 0303 	and.w	r3, r3, #3
 8004a18:	4a07      	ldr	r2, [pc, #28]	; (8004a38 <UART_SetConfig+0x6ac>)
 8004a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a20:	e01c      	b.n	8004a5c <UART_SetConfig+0x6d0>
 8004a22:	bf00      	nop
 8004a24:	40011400 	.word	0x40011400
 8004a28:	58024400 	.word	0x58024400
 8004a2c:	40007800 	.word	0x40007800
 8004a30:	40007c00 	.word	0x40007c00
 8004a34:	58000c00 	.word	0x58000c00
 8004a38:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004a3c:	4b9d      	ldr	r3, [pc, #628]	; (8004cb4 <UART_SetConfig+0x928>)
 8004a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a40:	e00c      	b.n	8004a5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a42:	4b9d      	ldr	r3, [pc, #628]	; (8004cb8 <UART_SetConfig+0x92c>)
 8004a44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a46:	e009      	b.n	8004a5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a4e:	e005      	b.n	8004a5c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004a5a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 81de 	beq.w	8004e20 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	4a94      	ldr	r2, [pc, #592]	; (8004cbc <UART_SetConfig+0x930>)
 8004a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a72:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a76:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	4413      	add	r3, r2
 8004a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d305      	bcc.n	8004a94 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d903      	bls.n	8004a9c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004a9a:	e1c1      	b.n	8004e20 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	60bb      	str	r3, [r7, #8]
 8004aa2:	60fa      	str	r2, [r7, #12]
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	4a84      	ldr	r2, [pc, #528]	; (8004cbc <UART_SetConfig+0x930>)
 8004aaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	607a      	str	r2, [r7, #4]
 8004ab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004aba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004abe:	f7fb fc67 	bl	8000390 <__aeabi_uldivmod>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	4619      	mov	r1, r3
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	020b      	lsls	r3, r1, #8
 8004ad4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ad8:	0202      	lsls	r2, r0, #8
 8004ada:	6979      	ldr	r1, [r7, #20]
 8004adc:	6849      	ldr	r1, [r1, #4]
 8004ade:	0849      	lsrs	r1, r1, #1
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	460c      	mov	r4, r1
 8004ae4:	4605      	mov	r5, r0
 8004ae6:	eb12 0804 	adds.w	r8, r2, r4
 8004aea:	eb43 0905 	adc.w	r9, r3, r5
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	469a      	mov	sl, r3
 8004af6:	4693      	mov	fp, r2
 8004af8:	4652      	mov	r2, sl
 8004afa:	465b      	mov	r3, fp
 8004afc:	4640      	mov	r0, r8
 8004afe:	4649      	mov	r1, r9
 8004b00:	f7fb fc46 	bl	8000390 <__aeabi_uldivmod>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	4613      	mov	r3, r2
 8004b0a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b12:	d308      	bcc.n	8004b26 <UART_SetConfig+0x79a>
 8004b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b1a:	d204      	bcs.n	8004b26 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b22:	60da      	str	r2, [r3, #12]
 8004b24:	e17c      	b.n	8004e20 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004b2c:	e178      	b.n	8004e20 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b36:	f040 80c5 	bne.w	8004cc4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004b3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	dc48      	bgt.n	8004bd4 <UART_SetConfig+0x848>
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	db7b      	blt.n	8004c3e <UART_SetConfig+0x8b2>
 8004b46:	2b20      	cmp	r3, #32
 8004b48:	d879      	bhi.n	8004c3e <UART_SetConfig+0x8b2>
 8004b4a:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <UART_SetConfig+0x7c4>)
 8004b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b50:	08004bdb 	.word	0x08004bdb
 8004b54:	08004be3 	.word	0x08004be3
 8004b58:	08004c3f 	.word	0x08004c3f
 8004b5c:	08004c3f 	.word	0x08004c3f
 8004b60:	08004beb 	.word	0x08004beb
 8004b64:	08004c3f 	.word	0x08004c3f
 8004b68:	08004c3f 	.word	0x08004c3f
 8004b6c:	08004c3f 	.word	0x08004c3f
 8004b70:	08004bfb 	.word	0x08004bfb
 8004b74:	08004c3f 	.word	0x08004c3f
 8004b78:	08004c3f 	.word	0x08004c3f
 8004b7c:	08004c3f 	.word	0x08004c3f
 8004b80:	08004c3f 	.word	0x08004c3f
 8004b84:	08004c3f 	.word	0x08004c3f
 8004b88:	08004c3f 	.word	0x08004c3f
 8004b8c:	08004c3f 	.word	0x08004c3f
 8004b90:	08004c0b 	.word	0x08004c0b
 8004b94:	08004c3f 	.word	0x08004c3f
 8004b98:	08004c3f 	.word	0x08004c3f
 8004b9c:	08004c3f 	.word	0x08004c3f
 8004ba0:	08004c3f 	.word	0x08004c3f
 8004ba4:	08004c3f 	.word	0x08004c3f
 8004ba8:	08004c3f 	.word	0x08004c3f
 8004bac:	08004c3f 	.word	0x08004c3f
 8004bb0:	08004c3f 	.word	0x08004c3f
 8004bb4:	08004c3f 	.word	0x08004c3f
 8004bb8:	08004c3f 	.word	0x08004c3f
 8004bbc:	08004c3f 	.word	0x08004c3f
 8004bc0:	08004c3f 	.word	0x08004c3f
 8004bc4:	08004c3f 	.word	0x08004c3f
 8004bc8:	08004c3f 	.word	0x08004c3f
 8004bcc:	08004c3f 	.word	0x08004c3f
 8004bd0:	08004c31 	.word	0x08004c31
 8004bd4:	2b40      	cmp	r3, #64	; 0x40
 8004bd6:	d02e      	beq.n	8004c36 <UART_SetConfig+0x8aa>
 8004bd8:	e031      	b.n	8004c3e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bda:	f7fd fc61 	bl	80024a0 <HAL_RCC_GetPCLK1Freq>
 8004bde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004be0:	e033      	b.n	8004c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004be2:	f7fd fc73 	bl	80024cc <HAL_RCC_GetPCLK2Freq>
 8004be6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004be8:	e02f      	b.n	8004c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fe fee2 	bl	80039b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bf8:	e027      	b.n	8004c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bfa:	f107 0318 	add.w	r3, r7, #24
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7ff f82e 	bl	8003c60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c08:	e01f      	b.n	8004c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c0a:	4b2d      	ldr	r3, [pc, #180]	; (8004cc0 <UART_SetConfig+0x934>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d009      	beq.n	8004c2a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c16:	4b2a      	ldr	r3, [pc, #168]	; (8004cc0 <UART_SetConfig+0x934>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	08db      	lsrs	r3, r3, #3
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	4a24      	ldr	r2, [pc, #144]	; (8004cb4 <UART_SetConfig+0x928>)
 8004c22:	fa22 f303 	lsr.w	r3, r2, r3
 8004c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c28:	e00f      	b.n	8004c4a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004c2a:	4b22      	ldr	r3, [pc, #136]	; (8004cb4 <UART_SetConfig+0x928>)
 8004c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c2e:	e00c      	b.n	8004c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c30:	4b21      	ldr	r3, [pc, #132]	; (8004cb8 <UART_SetConfig+0x92c>)
 8004c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c34:	e009      	b.n	8004c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c3c:	e005      	b.n	8004c4a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004c48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80e7 	beq.w	8004e20 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	4a19      	ldr	r2, [pc, #100]	; (8004cbc <UART_SetConfig+0x930>)
 8004c58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c64:	005a      	lsls	r2, r3, #1
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	085b      	lsrs	r3, r3, #1
 8004c6c:	441a      	add	r2, r3
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c76:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7a:	2b0f      	cmp	r3, #15
 8004c7c:	d916      	bls.n	8004cac <UART_SetConfig+0x920>
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c84:	d212      	bcs.n	8004cac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	f023 030f 	bic.w	r3, r3, #15
 8004c8e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c92:	085b      	lsrs	r3, r3, #1
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004ca8:	60da      	str	r2, [r3, #12]
 8004caa:	e0b9      	b.n	8004e20 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004cb2:	e0b5      	b.n	8004e20 <UART_SetConfig+0xa94>
 8004cb4:	03d09000 	.word	0x03d09000
 8004cb8:	003d0900 	.word	0x003d0900
 8004cbc:	08007e54 	.word	0x08007e54
 8004cc0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cc4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	dc49      	bgt.n	8004d60 <UART_SetConfig+0x9d4>
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	db7c      	blt.n	8004dca <UART_SetConfig+0xa3e>
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d87a      	bhi.n	8004dca <UART_SetConfig+0xa3e>
 8004cd4:	a201      	add	r2, pc, #4	; (adr r2, 8004cdc <UART_SetConfig+0x950>)
 8004cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cda:	bf00      	nop
 8004cdc:	08004d67 	.word	0x08004d67
 8004ce0:	08004d6f 	.word	0x08004d6f
 8004ce4:	08004dcb 	.word	0x08004dcb
 8004ce8:	08004dcb 	.word	0x08004dcb
 8004cec:	08004d77 	.word	0x08004d77
 8004cf0:	08004dcb 	.word	0x08004dcb
 8004cf4:	08004dcb 	.word	0x08004dcb
 8004cf8:	08004dcb 	.word	0x08004dcb
 8004cfc:	08004d87 	.word	0x08004d87
 8004d00:	08004dcb 	.word	0x08004dcb
 8004d04:	08004dcb 	.word	0x08004dcb
 8004d08:	08004dcb 	.word	0x08004dcb
 8004d0c:	08004dcb 	.word	0x08004dcb
 8004d10:	08004dcb 	.word	0x08004dcb
 8004d14:	08004dcb 	.word	0x08004dcb
 8004d18:	08004dcb 	.word	0x08004dcb
 8004d1c:	08004d97 	.word	0x08004d97
 8004d20:	08004dcb 	.word	0x08004dcb
 8004d24:	08004dcb 	.word	0x08004dcb
 8004d28:	08004dcb 	.word	0x08004dcb
 8004d2c:	08004dcb 	.word	0x08004dcb
 8004d30:	08004dcb 	.word	0x08004dcb
 8004d34:	08004dcb 	.word	0x08004dcb
 8004d38:	08004dcb 	.word	0x08004dcb
 8004d3c:	08004dcb 	.word	0x08004dcb
 8004d40:	08004dcb 	.word	0x08004dcb
 8004d44:	08004dcb 	.word	0x08004dcb
 8004d48:	08004dcb 	.word	0x08004dcb
 8004d4c:	08004dcb 	.word	0x08004dcb
 8004d50:	08004dcb 	.word	0x08004dcb
 8004d54:	08004dcb 	.word	0x08004dcb
 8004d58:	08004dcb 	.word	0x08004dcb
 8004d5c:	08004dbd 	.word	0x08004dbd
 8004d60:	2b40      	cmp	r3, #64	; 0x40
 8004d62:	d02e      	beq.n	8004dc2 <UART_SetConfig+0xa36>
 8004d64:	e031      	b.n	8004dca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d66:	f7fd fb9b 	bl	80024a0 <HAL_RCC_GetPCLK1Freq>
 8004d6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004d6c:	e033      	b.n	8004dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d6e:	f7fd fbad 	bl	80024cc <HAL_RCC_GetPCLK2Freq>
 8004d72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004d74:	e02f      	b.n	8004dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fe fe1c 	bl	80039b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d84:	e027      	b.n	8004dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d86:	f107 0318 	add.w	r3, r7, #24
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fe ff68 	bl	8003c60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d94:	e01f      	b.n	8004dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d96:	4b2d      	ldr	r3, [pc, #180]	; (8004e4c <UART_SetConfig+0xac0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d009      	beq.n	8004db6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004da2:	4b2a      	ldr	r3, [pc, #168]	; (8004e4c <UART_SetConfig+0xac0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	08db      	lsrs	r3, r3, #3
 8004da8:	f003 0303 	and.w	r3, r3, #3
 8004dac:	4a28      	ldr	r2, [pc, #160]	; (8004e50 <UART_SetConfig+0xac4>)
 8004dae:	fa22 f303 	lsr.w	r3, r2, r3
 8004db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004db4:	e00f      	b.n	8004dd6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004db6:	4b26      	ldr	r3, [pc, #152]	; (8004e50 <UART_SetConfig+0xac4>)
 8004db8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dba:	e00c      	b.n	8004dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004dbc:	4b25      	ldr	r3, [pc, #148]	; (8004e54 <UART_SetConfig+0xac8>)
 8004dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dc0:	e009      	b.n	8004dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dc8:	e005      	b.n	8004dd6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004dd4:	bf00      	nop
    }

    if (pclk != 0U)
 8004dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d021      	beq.n	8004e20 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	4a1d      	ldr	r2, [pc, #116]	; (8004e58 <UART_SetConfig+0xacc>)
 8004de2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004de6:	461a      	mov	r2, r3
 8004de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dea:	fbb3 f2f2 	udiv	r2, r3, r2
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	085b      	lsrs	r3, r3, #1
 8004df4:	441a      	add	r2, r3
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e02:	2b0f      	cmp	r3, #15
 8004e04:	d909      	bls.n	8004e1a <UART_SetConfig+0xa8e>
 8004e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e0c:	d205      	bcs.n	8004e1a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60da      	str	r2, [r3, #12]
 8004e18:	e002      	b.n	8004e20 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2200      	movs	r2, #0
 8004e34:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004e3c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3748      	adds	r7, #72	; 0x48
 8004e44:	46bd      	mov	sp, r7
 8004e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e4a:	bf00      	nop
 8004e4c:	58024400 	.word	0x58024400
 8004e50:	03d09000 	.word	0x03d09000
 8004e54:	003d0900 	.word	0x003d0900
 8004e58:	08007e54 	.word	0x08007e54

08004e5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00a      	beq.n	8004e86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00a      	beq.n	8004eca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	f003 0308 	and.w	r3, r3, #8
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef0:	f003 0310 	and.w	r3, r3, #16
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00a      	beq.n	8004f0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00a      	beq.n	8004f30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01a      	beq.n	8004f72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f5a:	d10a      	bne.n	8004f72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00a      	beq.n	8004f94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	605a      	str	r2, [r3, #4]
  }
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b098      	sub	sp, #96	; 0x60
 8004fa4:	af02      	add	r7, sp, #8
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fb0:	f7fb ff64 	bl	8000e7c <HAL_GetTick>
 8004fb4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	d12f      	bne.n	8005024 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f88e 	bl	80050f4 <UART_WaitOnFlagUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d022      	beq.n	8005024 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe6:	e853 3f00 	ldrex	r3, [r3]
 8004fea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ff2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8004ffe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005000:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005004:	e841 2300 	strex	r3, r2, [r1]
 8005008:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800500a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1e6      	bne.n	8004fde <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2220      	movs	r2, #32
 8005014:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e063      	b.n	80050ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0304 	and.w	r3, r3, #4
 800502e:	2b04      	cmp	r3, #4
 8005030:	d149      	bne.n	80050c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005032:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800503a:	2200      	movs	r2, #0
 800503c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f857 	bl	80050f4 <UART_WaitOnFlagUntilTimeout>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d03c      	beq.n	80050c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	e853 3f00 	ldrex	r3, [r3]
 8005058:	623b      	str	r3, [r7, #32]
   return(result);
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005060:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800506a:	633b      	str	r3, [r7, #48]	; 0x30
 800506c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005072:	e841 2300 	strex	r3, r2, [r1]
 8005076:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1e6      	bne.n	800504c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3308      	adds	r3, #8
 8005084:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	e853 3f00 	ldrex	r3, [r3]
 800508c:	60fb      	str	r3, [r7, #12]
   return(result);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f023 0301 	bic.w	r3, r3, #1
 8005094:	64bb      	str	r3, [r7, #72]	; 0x48
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3308      	adds	r3, #8
 800509c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800509e:	61fa      	str	r2, [r7, #28]
 80050a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a2:	69b9      	ldr	r1, [r7, #24]
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	e841 2300 	strex	r3, r2, [r1]
 80050aa:	617b      	str	r3, [r7, #20]
   return(result);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1e5      	bne.n	800507e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e012      	b.n	80050ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3758      	adds	r7, #88	; 0x58
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	603b      	str	r3, [r7, #0]
 8005100:	4613      	mov	r3, r2
 8005102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005104:	e049      	b.n	800519a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510c:	d045      	beq.n	800519a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800510e:	f7fb feb5 	bl	8000e7c <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	429a      	cmp	r2, r3
 800511c:	d302      	bcc.n	8005124 <UART_WaitOnFlagUntilTimeout+0x30>
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e048      	b.n	80051ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	d031      	beq.n	800519a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b08      	cmp	r3, #8
 8005142:	d110      	bne.n	8005166 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2208      	movs	r2, #8
 800514a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 f839 	bl	80051c4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2208      	movs	r2, #8
 8005156:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e029      	b.n	80051ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005174:	d111      	bne.n	800519a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800517e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 f81f 	bl	80051c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e00f      	b.n	80051ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69da      	ldr	r2, [r3, #28]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4013      	ands	r3, r2
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	bf0c      	ite	eq
 80051aa:	2301      	moveq	r3, #1
 80051ac:	2300      	movne	r3, #0
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d0a6      	beq.n	8005106 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b095      	sub	sp, #84	; 0x54
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ea:	643b      	str	r3, [r7, #64]	; 0x40
 80051ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e6      	bne.n	80051cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3308      	adds	r3, #8
 8005204:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	e853 3f00 	ldrex	r3, [r3]
 800520c:	61fb      	str	r3, [r7, #28]
   return(result);
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	4b1e      	ldr	r3, [pc, #120]	; (800528c <UART_EndRxTransfer+0xc8>)
 8005212:	4013      	ands	r3, r2
 8005214:	64bb      	str	r3, [r7, #72]	; 0x48
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3308      	adds	r3, #8
 800521c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800521e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005220:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e5      	bne.n	80051fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005236:	2b01      	cmp	r3, #1
 8005238:	d118      	bne.n	800526c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	60bb      	str	r3, [r7, #8]
   return(result);
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f023 0310 	bic.w	r3, r3, #16
 800524e:	647b      	str	r3, [r7, #68]	; 0x44
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	461a      	mov	r2, r3
 8005256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005258:	61bb      	str	r3, [r7, #24]
 800525a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525c:	6979      	ldr	r1, [r7, #20]
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	e841 2300 	strex	r3, r2, [r1]
 8005264:	613b      	str	r3, [r7, #16]
   return(result);
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e6      	bne.n	800523a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005280:	bf00      	nop
 8005282:	3754      	adds	r7, #84	; 0x54
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	effffffe 	.word	0xeffffffe

08005290 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d101      	bne.n	80052a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80052a2:	2302      	movs	r3, #2
 80052a4:	e027      	b.n	80052f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2224      	movs	r2, #36	; 0x24
 80052b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0201 	bic.w	r2, r2, #1
 80052cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80052d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005316:	2302      	movs	r3, #2
 8005318:	e02d      	b.n	8005376 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2224      	movs	r2, #36	; 0x24
 8005326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 0201 	bic.w	r2, r2, #1
 8005340:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f850 	bl	80053fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005392:	2302      	movs	r3, #2
 8005394:	e02d      	b.n	80053f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2224      	movs	r2, #36	; 0x24
 80053a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0201 	bic.w	r2, r2, #1
 80053bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f812 	bl	80053fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
	...

080053fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005408:	2b00      	cmp	r3, #0
 800540a:	d108      	bne.n	800541e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800541c:	e031      	b.n	8005482 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800541e:	2310      	movs	r3, #16
 8005420:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005422:	2310      	movs	r3, #16
 8005424:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	0e5b      	lsrs	r3, r3, #25
 800542e:	b2db      	uxtb	r3, r3
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	0f5b      	lsrs	r3, r3, #29
 800543e:	b2db      	uxtb	r3, r3
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005446:	7bbb      	ldrb	r3, [r7, #14]
 8005448:	7b3a      	ldrb	r2, [r7, #12]
 800544a:	4911      	ldr	r1, [pc, #68]	; (8005490 <UARTEx_SetNbDataToProcess+0x94>)
 800544c:	5c8a      	ldrb	r2, [r1, r2]
 800544e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005452:	7b3a      	ldrb	r2, [r7, #12]
 8005454:	490f      	ldr	r1, [pc, #60]	; (8005494 <UARTEx_SetNbDataToProcess+0x98>)
 8005456:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005458:	fb93 f3f2 	sdiv	r3, r3, r2
 800545c:	b29a      	uxth	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	7b7a      	ldrb	r2, [r7, #13]
 8005468:	4909      	ldr	r1, [pc, #36]	; (8005490 <UARTEx_SetNbDataToProcess+0x94>)
 800546a:	5c8a      	ldrb	r2, [r1, r2]
 800546c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005470:	7b7a      	ldrb	r2, [r7, #13]
 8005472:	4908      	ldr	r1, [pc, #32]	; (8005494 <UARTEx_SetNbDataToProcess+0x98>)
 8005474:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005476:	fb93 f3f2 	sdiv	r3, r3, r2
 800547a:	b29a      	uxth	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005482:	bf00      	nop
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	08007e6c 	.word	0x08007e6c
 8005494:	08007e74 	.word	0x08007e74

08005498 <__errno>:
 8005498:	4b01      	ldr	r3, [pc, #4]	; (80054a0 <__errno+0x8>)
 800549a:	6818      	ldr	r0, [r3, #0]
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	24000010 	.word	0x24000010

080054a4 <__libc_init_array>:
 80054a4:	b570      	push	{r4, r5, r6, lr}
 80054a6:	4d0d      	ldr	r5, [pc, #52]	; (80054dc <__libc_init_array+0x38>)
 80054a8:	4c0d      	ldr	r4, [pc, #52]	; (80054e0 <__libc_init_array+0x3c>)
 80054aa:	1b64      	subs	r4, r4, r5
 80054ac:	10a4      	asrs	r4, r4, #2
 80054ae:	2600      	movs	r6, #0
 80054b0:	42a6      	cmp	r6, r4
 80054b2:	d109      	bne.n	80054c8 <__libc_init_array+0x24>
 80054b4:	4d0b      	ldr	r5, [pc, #44]	; (80054e4 <__libc_init_array+0x40>)
 80054b6:	4c0c      	ldr	r4, [pc, #48]	; (80054e8 <__libc_init_array+0x44>)
 80054b8:	f002 fcaa 	bl	8007e10 <_init>
 80054bc:	1b64      	subs	r4, r4, r5
 80054be:	10a4      	asrs	r4, r4, #2
 80054c0:	2600      	movs	r6, #0
 80054c2:	42a6      	cmp	r6, r4
 80054c4:	d105      	bne.n	80054d2 <__libc_init_array+0x2e>
 80054c6:	bd70      	pop	{r4, r5, r6, pc}
 80054c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054cc:	4798      	blx	r3
 80054ce:	3601      	adds	r6, #1
 80054d0:	e7ee      	b.n	80054b0 <__libc_init_array+0xc>
 80054d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d6:	4798      	blx	r3
 80054d8:	3601      	adds	r6, #1
 80054da:	e7f2      	b.n	80054c2 <__libc_init_array+0x1e>
 80054dc:	0800825c 	.word	0x0800825c
 80054e0:	0800825c 	.word	0x0800825c
 80054e4:	0800825c 	.word	0x0800825c
 80054e8:	08008260 	.word	0x08008260

080054ec <memset>:
 80054ec:	4402      	add	r2, r0
 80054ee:	4603      	mov	r3, r0
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d100      	bne.n	80054f6 <memset+0xa>
 80054f4:	4770      	bx	lr
 80054f6:	f803 1b01 	strb.w	r1, [r3], #1
 80054fa:	e7f9      	b.n	80054f0 <memset+0x4>

080054fc <__cvt>:
 80054fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054fe:	ed2d 8b02 	vpush	{d8}
 8005502:	eeb0 8b40 	vmov.f64	d8, d0
 8005506:	b085      	sub	sp, #20
 8005508:	4617      	mov	r7, r2
 800550a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800550c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800550e:	ee18 2a90 	vmov	r2, s17
 8005512:	f025 0520 	bic.w	r5, r5, #32
 8005516:	2a00      	cmp	r2, #0
 8005518:	bfb6      	itet	lt
 800551a:	222d      	movlt	r2, #45	; 0x2d
 800551c:	2200      	movge	r2, #0
 800551e:	eeb1 8b40 	vneglt.f64	d8, d0
 8005522:	2d46      	cmp	r5, #70	; 0x46
 8005524:	460c      	mov	r4, r1
 8005526:	701a      	strb	r2, [r3, #0]
 8005528:	d004      	beq.n	8005534 <__cvt+0x38>
 800552a:	2d45      	cmp	r5, #69	; 0x45
 800552c:	d100      	bne.n	8005530 <__cvt+0x34>
 800552e:	3401      	adds	r4, #1
 8005530:	2102      	movs	r1, #2
 8005532:	e000      	b.n	8005536 <__cvt+0x3a>
 8005534:	2103      	movs	r1, #3
 8005536:	ab03      	add	r3, sp, #12
 8005538:	9301      	str	r3, [sp, #4]
 800553a:	ab02      	add	r3, sp, #8
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	4622      	mov	r2, r4
 8005540:	4633      	mov	r3, r6
 8005542:	eeb0 0b48 	vmov.f64	d0, d8
 8005546:	f000 fcc3 	bl	8005ed0 <_dtoa_r>
 800554a:	2d47      	cmp	r5, #71	; 0x47
 800554c:	d101      	bne.n	8005552 <__cvt+0x56>
 800554e:	07fb      	lsls	r3, r7, #31
 8005550:	d51a      	bpl.n	8005588 <__cvt+0x8c>
 8005552:	2d46      	cmp	r5, #70	; 0x46
 8005554:	eb00 0204 	add.w	r2, r0, r4
 8005558:	d10c      	bne.n	8005574 <__cvt+0x78>
 800555a:	7803      	ldrb	r3, [r0, #0]
 800555c:	2b30      	cmp	r3, #48	; 0x30
 800555e:	d107      	bne.n	8005570 <__cvt+0x74>
 8005560:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005568:	bf1c      	itt	ne
 800556a:	f1c4 0401 	rsbne	r4, r4, #1
 800556e:	6034      	strne	r4, [r6, #0]
 8005570:	6833      	ldr	r3, [r6, #0]
 8005572:	441a      	add	r2, r3
 8005574:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800557c:	bf08      	it	eq
 800557e:	9203      	streq	r2, [sp, #12]
 8005580:	2130      	movs	r1, #48	; 0x30
 8005582:	9b03      	ldr	r3, [sp, #12]
 8005584:	4293      	cmp	r3, r2
 8005586:	d307      	bcc.n	8005598 <__cvt+0x9c>
 8005588:	9b03      	ldr	r3, [sp, #12]
 800558a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800558c:	1a1b      	subs	r3, r3, r0
 800558e:	6013      	str	r3, [r2, #0]
 8005590:	b005      	add	sp, #20
 8005592:	ecbd 8b02 	vpop	{d8}
 8005596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005598:	1c5c      	adds	r4, r3, #1
 800559a:	9403      	str	r4, [sp, #12]
 800559c:	7019      	strb	r1, [r3, #0]
 800559e:	e7f0      	b.n	8005582 <__cvt+0x86>

080055a0 <__exponent>:
 80055a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055a2:	4603      	mov	r3, r0
 80055a4:	2900      	cmp	r1, #0
 80055a6:	bfb8      	it	lt
 80055a8:	4249      	neglt	r1, r1
 80055aa:	f803 2b02 	strb.w	r2, [r3], #2
 80055ae:	bfb4      	ite	lt
 80055b0:	222d      	movlt	r2, #45	; 0x2d
 80055b2:	222b      	movge	r2, #43	; 0x2b
 80055b4:	2909      	cmp	r1, #9
 80055b6:	7042      	strb	r2, [r0, #1]
 80055b8:	dd2a      	ble.n	8005610 <__exponent+0x70>
 80055ba:	f10d 0407 	add.w	r4, sp, #7
 80055be:	46a4      	mov	ip, r4
 80055c0:	270a      	movs	r7, #10
 80055c2:	46a6      	mov	lr, r4
 80055c4:	460a      	mov	r2, r1
 80055c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80055ca:	fb07 1516 	mls	r5, r7, r6, r1
 80055ce:	3530      	adds	r5, #48	; 0x30
 80055d0:	2a63      	cmp	r2, #99	; 0x63
 80055d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80055d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80055da:	4631      	mov	r1, r6
 80055dc:	dcf1      	bgt.n	80055c2 <__exponent+0x22>
 80055de:	3130      	adds	r1, #48	; 0x30
 80055e0:	f1ae 0502 	sub.w	r5, lr, #2
 80055e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80055e8:	1c44      	adds	r4, r0, #1
 80055ea:	4629      	mov	r1, r5
 80055ec:	4561      	cmp	r1, ip
 80055ee:	d30a      	bcc.n	8005606 <__exponent+0x66>
 80055f0:	f10d 0209 	add.w	r2, sp, #9
 80055f4:	eba2 020e 	sub.w	r2, r2, lr
 80055f8:	4565      	cmp	r5, ip
 80055fa:	bf88      	it	hi
 80055fc:	2200      	movhi	r2, #0
 80055fe:	4413      	add	r3, r2
 8005600:	1a18      	subs	r0, r3, r0
 8005602:	b003      	add	sp, #12
 8005604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005606:	f811 2b01 	ldrb.w	r2, [r1], #1
 800560a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800560e:	e7ed      	b.n	80055ec <__exponent+0x4c>
 8005610:	2330      	movs	r3, #48	; 0x30
 8005612:	3130      	adds	r1, #48	; 0x30
 8005614:	7083      	strb	r3, [r0, #2]
 8005616:	70c1      	strb	r1, [r0, #3]
 8005618:	1d03      	adds	r3, r0, #4
 800561a:	e7f1      	b.n	8005600 <__exponent+0x60>
 800561c:	0000      	movs	r0, r0
	...

08005620 <_printf_float>:
 8005620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005624:	b08b      	sub	sp, #44	; 0x2c
 8005626:	460c      	mov	r4, r1
 8005628:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800562c:	4616      	mov	r6, r2
 800562e:	461f      	mov	r7, r3
 8005630:	4605      	mov	r5, r0
 8005632:	f001 fab1 	bl	8006b98 <_localeconv_r>
 8005636:	f8d0 b000 	ldr.w	fp, [r0]
 800563a:	4658      	mov	r0, fp
 800563c:	f7fa fe50 	bl	80002e0 <strlen>
 8005640:	2300      	movs	r3, #0
 8005642:	9308      	str	r3, [sp, #32]
 8005644:	f8d8 3000 	ldr.w	r3, [r8]
 8005648:	f894 9018 	ldrb.w	r9, [r4, #24]
 800564c:	6822      	ldr	r2, [r4, #0]
 800564e:	3307      	adds	r3, #7
 8005650:	f023 0307 	bic.w	r3, r3, #7
 8005654:	f103 0108 	add.w	r1, r3, #8
 8005658:	f8c8 1000 	str.w	r1, [r8]
 800565c:	4682      	mov	sl, r0
 800565e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005662:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8005666:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80058c8 <_printf_float+0x2a8>
 800566a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800566e:	eeb0 6bc0 	vabs.f64	d6, d0
 8005672:	eeb4 6b47 	vcmp.f64	d6, d7
 8005676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567a:	dd24      	ble.n	80056c6 <_printf_float+0xa6>
 800567c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005684:	d502      	bpl.n	800568c <_printf_float+0x6c>
 8005686:	232d      	movs	r3, #45	; 0x2d
 8005688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800568c:	4b90      	ldr	r3, [pc, #576]	; (80058d0 <_printf_float+0x2b0>)
 800568e:	4891      	ldr	r0, [pc, #580]	; (80058d4 <_printf_float+0x2b4>)
 8005690:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005694:	bf94      	ite	ls
 8005696:	4698      	movls	r8, r3
 8005698:	4680      	movhi	r8, r0
 800569a:	2303      	movs	r3, #3
 800569c:	6123      	str	r3, [r4, #16]
 800569e:	f022 0204 	bic.w	r2, r2, #4
 80056a2:	2300      	movs	r3, #0
 80056a4:	6022      	str	r2, [r4, #0]
 80056a6:	9304      	str	r3, [sp, #16]
 80056a8:	9700      	str	r7, [sp, #0]
 80056aa:	4633      	mov	r3, r6
 80056ac:	aa09      	add	r2, sp, #36	; 0x24
 80056ae:	4621      	mov	r1, r4
 80056b0:	4628      	mov	r0, r5
 80056b2:	f000 f9d3 	bl	8005a5c <_printf_common>
 80056b6:	3001      	adds	r0, #1
 80056b8:	f040 808a 	bne.w	80057d0 <_printf_float+0x1b0>
 80056bc:	f04f 30ff 	mov.w	r0, #4294967295
 80056c0:	b00b      	add	sp, #44	; 0x2c
 80056c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c6:	eeb4 0b40 	vcmp.f64	d0, d0
 80056ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ce:	d709      	bvc.n	80056e4 <_printf_float+0xc4>
 80056d0:	ee10 3a90 	vmov	r3, s1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	bfbc      	itt	lt
 80056d8:	232d      	movlt	r3, #45	; 0x2d
 80056da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80056de:	487e      	ldr	r0, [pc, #504]	; (80058d8 <_printf_float+0x2b8>)
 80056e0:	4b7e      	ldr	r3, [pc, #504]	; (80058dc <_printf_float+0x2bc>)
 80056e2:	e7d5      	b.n	8005690 <_printf_float+0x70>
 80056e4:	6863      	ldr	r3, [r4, #4]
 80056e6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80056ea:	9104      	str	r1, [sp, #16]
 80056ec:	1c59      	adds	r1, r3, #1
 80056ee:	d13c      	bne.n	800576a <_printf_float+0x14a>
 80056f0:	2306      	movs	r3, #6
 80056f2:	6063      	str	r3, [r4, #4]
 80056f4:	2300      	movs	r3, #0
 80056f6:	9303      	str	r3, [sp, #12]
 80056f8:	ab08      	add	r3, sp, #32
 80056fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80056fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005702:	ab07      	add	r3, sp, #28
 8005704:	6861      	ldr	r1, [r4, #4]
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	6022      	str	r2, [r4, #0]
 800570a:	f10d 031b 	add.w	r3, sp, #27
 800570e:	4628      	mov	r0, r5
 8005710:	f7ff fef4 	bl	80054fc <__cvt>
 8005714:	9b04      	ldr	r3, [sp, #16]
 8005716:	9907      	ldr	r1, [sp, #28]
 8005718:	2b47      	cmp	r3, #71	; 0x47
 800571a:	4680      	mov	r8, r0
 800571c:	d108      	bne.n	8005730 <_printf_float+0x110>
 800571e:	1cc8      	adds	r0, r1, #3
 8005720:	db02      	blt.n	8005728 <_printf_float+0x108>
 8005722:	6863      	ldr	r3, [r4, #4]
 8005724:	4299      	cmp	r1, r3
 8005726:	dd41      	ble.n	80057ac <_printf_float+0x18c>
 8005728:	f1a9 0902 	sub.w	r9, r9, #2
 800572c:	fa5f f989 	uxtb.w	r9, r9
 8005730:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005734:	d820      	bhi.n	8005778 <_printf_float+0x158>
 8005736:	3901      	subs	r1, #1
 8005738:	464a      	mov	r2, r9
 800573a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800573e:	9107      	str	r1, [sp, #28]
 8005740:	f7ff ff2e 	bl	80055a0 <__exponent>
 8005744:	9a08      	ldr	r2, [sp, #32]
 8005746:	9004      	str	r0, [sp, #16]
 8005748:	1813      	adds	r3, r2, r0
 800574a:	2a01      	cmp	r2, #1
 800574c:	6123      	str	r3, [r4, #16]
 800574e:	dc02      	bgt.n	8005756 <_printf_float+0x136>
 8005750:	6822      	ldr	r2, [r4, #0]
 8005752:	07d2      	lsls	r2, r2, #31
 8005754:	d501      	bpl.n	800575a <_printf_float+0x13a>
 8005756:	3301      	adds	r3, #1
 8005758:	6123      	str	r3, [r4, #16]
 800575a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0a2      	beq.n	80056a8 <_printf_float+0x88>
 8005762:	232d      	movs	r3, #45	; 0x2d
 8005764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005768:	e79e      	b.n	80056a8 <_printf_float+0x88>
 800576a:	9904      	ldr	r1, [sp, #16]
 800576c:	2947      	cmp	r1, #71	; 0x47
 800576e:	d1c1      	bne.n	80056f4 <_printf_float+0xd4>
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1bf      	bne.n	80056f4 <_printf_float+0xd4>
 8005774:	2301      	movs	r3, #1
 8005776:	e7bc      	b.n	80056f2 <_printf_float+0xd2>
 8005778:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800577c:	d118      	bne.n	80057b0 <_printf_float+0x190>
 800577e:	2900      	cmp	r1, #0
 8005780:	6863      	ldr	r3, [r4, #4]
 8005782:	dd0b      	ble.n	800579c <_printf_float+0x17c>
 8005784:	6121      	str	r1, [r4, #16]
 8005786:	b913      	cbnz	r3, 800578e <_printf_float+0x16e>
 8005788:	6822      	ldr	r2, [r4, #0]
 800578a:	07d0      	lsls	r0, r2, #31
 800578c:	d502      	bpl.n	8005794 <_printf_float+0x174>
 800578e:	3301      	adds	r3, #1
 8005790:	440b      	add	r3, r1
 8005792:	6123      	str	r3, [r4, #16]
 8005794:	2300      	movs	r3, #0
 8005796:	65a1      	str	r1, [r4, #88]	; 0x58
 8005798:	9304      	str	r3, [sp, #16]
 800579a:	e7de      	b.n	800575a <_printf_float+0x13a>
 800579c:	b913      	cbnz	r3, 80057a4 <_printf_float+0x184>
 800579e:	6822      	ldr	r2, [r4, #0]
 80057a0:	07d2      	lsls	r2, r2, #31
 80057a2:	d501      	bpl.n	80057a8 <_printf_float+0x188>
 80057a4:	3302      	adds	r3, #2
 80057a6:	e7f4      	b.n	8005792 <_printf_float+0x172>
 80057a8:	2301      	movs	r3, #1
 80057aa:	e7f2      	b.n	8005792 <_printf_float+0x172>
 80057ac:	f04f 0967 	mov.w	r9, #103	; 0x67
 80057b0:	9b08      	ldr	r3, [sp, #32]
 80057b2:	4299      	cmp	r1, r3
 80057b4:	db05      	blt.n	80057c2 <_printf_float+0x1a2>
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	6121      	str	r1, [r4, #16]
 80057ba:	07d8      	lsls	r0, r3, #31
 80057bc:	d5ea      	bpl.n	8005794 <_printf_float+0x174>
 80057be:	1c4b      	adds	r3, r1, #1
 80057c0:	e7e7      	b.n	8005792 <_printf_float+0x172>
 80057c2:	2900      	cmp	r1, #0
 80057c4:	bfd4      	ite	le
 80057c6:	f1c1 0202 	rsble	r2, r1, #2
 80057ca:	2201      	movgt	r2, #1
 80057cc:	4413      	add	r3, r2
 80057ce:	e7e0      	b.n	8005792 <_printf_float+0x172>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	055a      	lsls	r2, r3, #21
 80057d4:	d407      	bmi.n	80057e6 <_printf_float+0x1c6>
 80057d6:	6923      	ldr	r3, [r4, #16]
 80057d8:	4642      	mov	r2, r8
 80057da:	4631      	mov	r1, r6
 80057dc:	4628      	mov	r0, r5
 80057de:	47b8      	blx	r7
 80057e0:	3001      	adds	r0, #1
 80057e2:	d12a      	bne.n	800583a <_printf_float+0x21a>
 80057e4:	e76a      	b.n	80056bc <_printf_float+0x9c>
 80057e6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80057ea:	f240 80e2 	bls.w	80059b2 <_printf_float+0x392>
 80057ee:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80057f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80057f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057fa:	d133      	bne.n	8005864 <_printf_float+0x244>
 80057fc:	4a38      	ldr	r2, [pc, #224]	; (80058e0 <_printf_float+0x2c0>)
 80057fe:	2301      	movs	r3, #1
 8005800:	4631      	mov	r1, r6
 8005802:	4628      	mov	r0, r5
 8005804:	47b8      	blx	r7
 8005806:	3001      	adds	r0, #1
 8005808:	f43f af58 	beq.w	80056bc <_printf_float+0x9c>
 800580c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005810:	429a      	cmp	r2, r3
 8005812:	db02      	blt.n	800581a <_printf_float+0x1fa>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	07d8      	lsls	r0, r3, #31
 8005818:	d50f      	bpl.n	800583a <_printf_float+0x21a>
 800581a:	4653      	mov	r3, sl
 800581c:	465a      	mov	r2, fp
 800581e:	4631      	mov	r1, r6
 8005820:	4628      	mov	r0, r5
 8005822:	47b8      	blx	r7
 8005824:	3001      	adds	r0, #1
 8005826:	f43f af49 	beq.w	80056bc <_printf_float+0x9c>
 800582a:	f04f 0800 	mov.w	r8, #0
 800582e:	f104 091a 	add.w	r9, r4, #26
 8005832:	9b08      	ldr	r3, [sp, #32]
 8005834:	3b01      	subs	r3, #1
 8005836:	4543      	cmp	r3, r8
 8005838:	dc09      	bgt.n	800584e <_printf_float+0x22e>
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	079b      	lsls	r3, r3, #30
 800583e:	f100 8108 	bmi.w	8005a52 <_printf_float+0x432>
 8005842:	68e0      	ldr	r0, [r4, #12]
 8005844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005846:	4298      	cmp	r0, r3
 8005848:	bfb8      	it	lt
 800584a:	4618      	movlt	r0, r3
 800584c:	e738      	b.n	80056c0 <_printf_float+0xa0>
 800584e:	2301      	movs	r3, #1
 8005850:	464a      	mov	r2, r9
 8005852:	4631      	mov	r1, r6
 8005854:	4628      	mov	r0, r5
 8005856:	47b8      	blx	r7
 8005858:	3001      	adds	r0, #1
 800585a:	f43f af2f 	beq.w	80056bc <_printf_float+0x9c>
 800585e:	f108 0801 	add.w	r8, r8, #1
 8005862:	e7e6      	b.n	8005832 <_printf_float+0x212>
 8005864:	9b07      	ldr	r3, [sp, #28]
 8005866:	2b00      	cmp	r3, #0
 8005868:	dc3c      	bgt.n	80058e4 <_printf_float+0x2c4>
 800586a:	4a1d      	ldr	r2, [pc, #116]	; (80058e0 <_printf_float+0x2c0>)
 800586c:	2301      	movs	r3, #1
 800586e:	4631      	mov	r1, r6
 8005870:	4628      	mov	r0, r5
 8005872:	47b8      	blx	r7
 8005874:	3001      	adds	r0, #1
 8005876:	f43f af21 	beq.w	80056bc <_printf_float+0x9c>
 800587a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800587e:	4313      	orrs	r3, r2
 8005880:	d102      	bne.n	8005888 <_printf_float+0x268>
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	07d9      	lsls	r1, r3, #31
 8005886:	d5d8      	bpl.n	800583a <_printf_float+0x21a>
 8005888:	4653      	mov	r3, sl
 800588a:	465a      	mov	r2, fp
 800588c:	4631      	mov	r1, r6
 800588e:	4628      	mov	r0, r5
 8005890:	47b8      	blx	r7
 8005892:	3001      	adds	r0, #1
 8005894:	f43f af12 	beq.w	80056bc <_printf_float+0x9c>
 8005898:	f04f 0900 	mov.w	r9, #0
 800589c:	f104 0a1a 	add.w	sl, r4, #26
 80058a0:	9b07      	ldr	r3, [sp, #28]
 80058a2:	425b      	negs	r3, r3
 80058a4:	454b      	cmp	r3, r9
 80058a6:	dc01      	bgt.n	80058ac <_printf_float+0x28c>
 80058a8:	9b08      	ldr	r3, [sp, #32]
 80058aa:	e795      	b.n	80057d8 <_printf_float+0x1b8>
 80058ac:	2301      	movs	r3, #1
 80058ae:	4652      	mov	r2, sl
 80058b0:	4631      	mov	r1, r6
 80058b2:	4628      	mov	r0, r5
 80058b4:	47b8      	blx	r7
 80058b6:	3001      	adds	r0, #1
 80058b8:	f43f af00 	beq.w	80056bc <_printf_float+0x9c>
 80058bc:	f109 0901 	add.w	r9, r9, #1
 80058c0:	e7ee      	b.n	80058a0 <_printf_float+0x280>
 80058c2:	bf00      	nop
 80058c4:	f3af 8000 	nop.w
 80058c8:	ffffffff 	.word	0xffffffff
 80058cc:	7fefffff 	.word	0x7fefffff
 80058d0:	08007e80 	.word	0x08007e80
 80058d4:	08007e84 	.word	0x08007e84
 80058d8:	08007e8c 	.word	0x08007e8c
 80058dc:	08007e88 	.word	0x08007e88
 80058e0:	08007e90 	.word	0x08007e90
 80058e4:	9a08      	ldr	r2, [sp, #32]
 80058e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058e8:	429a      	cmp	r2, r3
 80058ea:	bfa8      	it	ge
 80058ec:	461a      	movge	r2, r3
 80058ee:	2a00      	cmp	r2, #0
 80058f0:	4691      	mov	r9, r2
 80058f2:	dc38      	bgt.n	8005966 <_printf_float+0x346>
 80058f4:	2300      	movs	r3, #0
 80058f6:	9305      	str	r3, [sp, #20]
 80058f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058fc:	f104 021a 	add.w	r2, r4, #26
 8005900:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005902:	9905      	ldr	r1, [sp, #20]
 8005904:	9304      	str	r3, [sp, #16]
 8005906:	eba3 0309 	sub.w	r3, r3, r9
 800590a:	428b      	cmp	r3, r1
 800590c:	dc33      	bgt.n	8005976 <_printf_float+0x356>
 800590e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005912:	429a      	cmp	r2, r3
 8005914:	db3c      	blt.n	8005990 <_printf_float+0x370>
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	07da      	lsls	r2, r3, #31
 800591a:	d439      	bmi.n	8005990 <_printf_float+0x370>
 800591c:	9b08      	ldr	r3, [sp, #32]
 800591e:	9a04      	ldr	r2, [sp, #16]
 8005920:	9907      	ldr	r1, [sp, #28]
 8005922:	1a9a      	subs	r2, r3, r2
 8005924:	eba3 0901 	sub.w	r9, r3, r1
 8005928:	4591      	cmp	r9, r2
 800592a:	bfa8      	it	ge
 800592c:	4691      	movge	r9, r2
 800592e:	f1b9 0f00 	cmp.w	r9, #0
 8005932:	dc35      	bgt.n	80059a0 <_printf_float+0x380>
 8005934:	f04f 0800 	mov.w	r8, #0
 8005938:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800593c:	f104 0a1a 	add.w	sl, r4, #26
 8005940:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005944:	1a9b      	subs	r3, r3, r2
 8005946:	eba3 0309 	sub.w	r3, r3, r9
 800594a:	4543      	cmp	r3, r8
 800594c:	f77f af75 	ble.w	800583a <_printf_float+0x21a>
 8005950:	2301      	movs	r3, #1
 8005952:	4652      	mov	r2, sl
 8005954:	4631      	mov	r1, r6
 8005956:	4628      	mov	r0, r5
 8005958:	47b8      	blx	r7
 800595a:	3001      	adds	r0, #1
 800595c:	f43f aeae 	beq.w	80056bc <_printf_float+0x9c>
 8005960:	f108 0801 	add.w	r8, r8, #1
 8005964:	e7ec      	b.n	8005940 <_printf_float+0x320>
 8005966:	4613      	mov	r3, r2
 8005968:	4631      	mov	r1, r6
 800596a:	4642      	mov	r2, r8
 800596c:	4628      	mov	r0, r5
 800596e:	47b8      	blx	r7
 8005970:	3001      	adds	r0, #1
 8005972:	d1bf      	bne.n	80058f4 <_printf_float+0x2d4>
 8005974:	e6a2      	b.n	80056bc <_printf_float+0x9c>
 8005976:	2301      	movs	r3, #1
 8005978:	4631      	mov	r1, r6
 800597a:	4628      	mov	r0, r5
 800597c:	9204      	str	r2, [sp, #16]
 800597e:	47b8      	blx	r7
 8005980:	3001      	adds	r0, #1
 8005982:	f43f ae9b 	beq.w	80056bc <_printf_float+0x9c>
 8005986:	9b05      	ldr	r3, [sp, #20]
 8005988:	9a04      	ldr	r2, [sp, #16]
 800598a:	3301      	adds	r3, #1
 800598c:	9305      	str	r3, [sp, #20]
 800598e:	e7b7      	b.n	8005900 <_printf_float+0x2e0>
 8005990:	4653      	mov	r3, sl
 8005992:	465a      	mov	r2, fp
 8005994:	4631      	mov	r1, r6
 8005996:	4628      	mov	r0, r5
 8005998:	47b8      	blx	r7
 800599a:	3001      	adds	r0, #1
 800599c:	d1be      	bne.n	800591c <_printf_float+0x2fc>
 800599e:	e68d      	b.n	80056bc <_printf_float+0x9c>
 80059a0:	9a04      	ldr	r2, [sp, #16]
 80059a2:	464b      	mov	r3, r9
 80059a4:	4442      	add	r2, r8
 80059a6:	4631      	mov	r1, r6
 80059a8:	4628      	mov	r0, r5
 80059aa:	47b8      	blx	r7
 80059ac:	3001      	adds	r0, #1
 80059ae:	d1c1      	bne.n	8005934 <_printf_float+0x314>
 80059b0:	e684      	b.n	80056bc <_printf_float+0x9c>
 80059b2:	9a08      	ldr	r2, [sp, #32]
 80059b4:	2a01      	cmp	r2, #1
 80059b6:	dc01      	bgt.n	80059bc <_printf_float+0x39c>
 80059b8:	07db      	lsls	r3, r3, #31
 80059ba:	d537      	bpl.n	8005a2c <_printf_float+0x40c>
 80059bc:	2301      	movs	r3, #1
 80059be:	4642      	mov	r2, r8
 80059c0:	4631      	mov	r1, r6
 80059c2:	4628      	mov	r0, r5
 80059c4:	47b8      	blx	r7
 80059c6:	3001      	adds	r0, #1
 80059c8:	f43f ae78 	beq.w	80056bc <_printf_float+0x9c>
 80059cc:	4653      	mov	r3, sl
 80059ce:	465a      	mov	r2, fp
 80059d0:	4631      	mov	r1, r6
 80059d2:	4628      	mov	r0, r5
 80059d4:	47b8      	blx	r7
 80059d6:	3001      	adds	r0, #1
 80059d8:	f43f ae70 	beq.w	80056bc <_printf_float+0x9c>
 80059dc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80059e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80059e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059e8:	d01b      	beq.n	8005a22 <_printf_float+0x402>
 80059ea:	9b08      	ldr	r3, [sp, #32]
 80059ec:	f108 0201 	add.w	r2, r8, #1
 80059f0:	3b01      	subs	r3, #1
 80059f2:	4631      	mov	r1, r6
 80059f4:	4628      	mov	r0, r5
 80059f6:	47b8      	blx	r7
 80059f8:	3001      	adds	r0, #1
 80059fa:	d10e      	bne.n	8005a1a <_printf_float+0x3fa>
 80059fc:	e65e      	b.n	80056bc <_printf_float+0x9c>
 80059fe:	2301      	movs	r3, #1
 8005a00:	464a      	mov	r2, r9
 8005a02:	4631      	mov	r1, r6
 8005a04:	4628      	mov	r0, r5
 8005a06:	47b8      	blx	r7
 8005a08:	3001      	adds	r0, #1
 8005a0a:	f43f ae57 	beq.w	80056bc <_printf_float+0x9c>
 8005a0e:	f108 0801 	add.w	r8, r8, #1
 8005a12:	9b08      	ldr	r3, [sp, #32]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	4543      	cmp	r3, r8
 8005a18:	dcf1      	bgt.n	80059fe <_printf_float+0x3de>
 8005a1a:	9b04      	ldr	r3, [sp, #16]
 8005a1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a20:	e6db      	b.n	80057da <_printf_float+0x1ba>
 8005a22:	f04f 0800 	mov.w	r8, #0
 8005a26:	f104 091a 	add.w	r9, r4, #26
 8005a2a:	e7f2      	b.n	8005a12 <_printf_float+0x3f2>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	4642      	mov	r2, r8
 8005a30:	e7df      	b.n	80059f2 <_printf_float+0x3d2>
 8005a32:	2301      	movs	r3, #1
 8005a34:	464a      	mov	r2, r9
 8005a36:	4631      	mov	r1, r6
 8005a38:	4628      	mov	r0, r5
 8005a3a:	47b8      	blx	r7
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	f43f ae3d 	beq.w	80056bc <_printf_float+0x9c>
 8005a42:	f108 0801 	add.w	r8, r8, #1
 8005a46:	68e3      	ldr	r3, [r4, #12]
 8005a48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a4a:	1a5b      	subs	r3, r3, r1
 8005a4c:	4543      	cmp	r3, r8
 8005a4e:	dcf0      	bgt.n	8005a32 <_printf_float+0x412>
 8005a50:	e6f7      	b.n	8005842 <_printf_float+0x222>
 8005a52:	f04f 0800 	mov.w	r8, #0
 8005a56:	f104 0919 	add.w	r9, r4, #25
 8005a5a:	e7f4      	b.n	8005a46 <_printf_float+0x426>

08005a5c <_printf_common>:
 8005a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a60:	4616      	mov	r6, r2
 8005a62:	4699      	mov	r9, r3
 8005a64:	688a      	ldr	r2, [r1, #8]
 8005a66:	690b      	ldr	r3, [r1, #16]
 8005a68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	bfb8      	it	lt
 8005a70:	4613      	movlt	r3, r2
 8005a72:	6033      	str	r3, [r6, #0]
 8005a74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a78:	4607      	mov	r7, r0
 8005a7a:	460c      	mov	r4, r1
 8005a7c:	b10a      	cbz	r2, 8005a82 <_printf_common+0x26>
 8005a7e:	3301      	adds	r3, #1
 8005a80:	6033      	str	r3, [r6, #0]
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	0699      	lsls	r1, r3, #26
 8005a86:	bf42      	ittt	mi
 8005a88:	6833      	ldrmi	r3, [r6, #0]
 8005a8a:	3302      	addmi	r3, #2
 8005a8c:	6033      	strmi	r3, [r6, #0]
 8005a8e:	6825      	ldr	r5, [r4, #0]
 8005a90:	f015 0506 	ands.w	r5, r5, #6
 8005a94:	d106      	bne.n	8005aa4 <_printf_common+0x48>
 8005a96:	f104 0a19 	add.w	sl, r4, #25
 8005a9a:	68e3      	ldr	r3, [r4, #12]
 8005a9c:	6832      	ldr	r2, [r6, #0]
 8005a9e:	1a9b      	subs	r3, r3, r2
 8005aa0:	42ab      	cmp	r3, r5
 8005aa2:	dc26      	bgt.n	8005af2 <_printf_common+0x96>
 8005aa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005aa8:	1e13      	subs	r3, r2, #0
 8005aaa:	6822      	ldr	r2, [r4, #0]
 8005aac:	bf18      	it	ne
 8005aae:	2301      	movne	r3, #1
 8005ab0:	0692      	lsls	r2, r2, #26
 8005ab2:	d42b      	bmi.n	8005b0c <_printf_common+0xb0>
 8005ab4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ab8:	4649      	mov	r1, r9
 8005aba:	4638      	mov	r0, r7
 8005abc:	47c0      	blx	r8
 8005abe:	3001      	adds	r0, #1
 8005ac0:	d01e      	beq.n	8005b00 <_printf_common+0xa4>
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	68e5      	ldr	r5, [r4, #12]
 8005ac6:	6832      	ldr	r2, [r6, #0]
 8005ac8:	f003 0306 	and.w	r3, r3, #6
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	bf08      	it	eq
 8005ad0:	1aad      	subeq	r5, r5, r2
 8005ad2:	68a3      	ldr	r3, [r4, #8]
 8005ad4:	6922      	ldr	r2, [r4, #16]
 8005ad6:	bf0c      	ite	eq
 8005ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005adc:	2500      	movne	r5, #0
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	bfc4      	itt	gt
 8005ae2:	1a9b      	subgt	r3, r3, r2
 8005ae4:	18ed      	addgt	r5, r5, r3
 8005ae6:	2600      	movs	r6, #0
 8005ae8:	341a      	adds	r4, #26
 8005aea:	42b5      	cmp	r5, r6
 8005aec:	d11a      	bne.n	8005b24 <_printf_common+0xc8>
 8005aee:	2000      	movs	r0, #0
 8005af0:	e008      	b.n	8005b04 <_printf_common+0xa8>
 8005af2:	2301      	movs	r3, #1
 8005af4:	4652      	mov	r2, sl
 8005af6:	4649      	mov	r1, r9
 8005af8:	4638      	mov	r0, r7
 8005afa:	47c0      	blx	r8
 8005afc:	3001      	adds	r0, #1
 8005afe:	d103      	bne.n	8005b08 <_printf_common+0xac>
 8005b00:	f04f 30ff 	mov.w	r0, #4294967295
 8005b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b08:	3501      	adds	r5, #1
 8005b0a:	e7c6      	b.n	8005a9a <_printf_common+0x3e>
 8005b0c:	18e1      	adds	r1, r4, r3
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	2030      	movs	r0, #48	; 0x30
 8005b12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b16:	4422      	add	r2, r4
 8005b18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b20:	3302      	adds	r3, #2
 8005b22:	e7c7      	b.n	8005ab4 <_printf_common+0x58>
 8005b24:	2301      	movs	r3, #1
 8005b26:	4622      	mov	r2, r4
 8005b28:	4649      	mov	r1, r9
 8005b2a:	4638      	mov	r0, r7
 8005b2c:	47c0      	blx	r8
 8005b2e:	3001      	adds	r0, #1
 8005b30:	d0e6      	beq.n	8005b00 <_printf_common+0xa4>
 8005b32:	3601      	adds	r6, #1
 8005b34:	e7d9      	b.n	8005aea <_printf_common+0x8e>
	...

08005b38 <_printf_i>:
 8005b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b3c:	7e0f      	ldrb	r7, [r1, #24]
 8005b3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b40:	2f78      	cmp	r7, #120	; 0x78
 8005b42:	4691      	mov	r9, r2
 8005b44:	4680      	mov	r8, r0
 8005b46:	460c      	mov	r4, r1
 8005b48:	469a      	mov	sl, r3
 8005b4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b4e:	d807      	bhi.n	8005b60 <_printf_i+0x28>
 8005b50:	2f62      	cmp	r7, #98	; 0x62
 8005b52:	d80a      	bhi.n	8005b6a <_printf_i+0x32>
 8005b54:	2f00      	cmp	r7, #0
 8005b56:	f000 80d8 	beq.w	8005d0a <_printf_i+0x1d2>
 8005b5a:	2f58      	cmp	r7, #88	; 0x58
 8005b5c:	f000 80a3 	beq.w	8005ca6 <_printf_i+0x16e>
 8005b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b68:	e03a      	b.n	8005be0 <_printf_i+0xa8>
 8005b6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b6e:	2b15      	cmp	r3, #21
 8005b70:	d8f6      	bhi.n	8005b60 <_printf_i+0x28>
 8005b72:	a101      	add	r1, pc, #4	; (adr r1, 8005b78 <_printf_i+0x40>)
 8005b74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b78:	08005bd1 	.word	0x08005bd1
 8005b7c:	08005be5 	.word	0x08005be5
 8005b80:	08005b61 	.word	0x08005b61
 8005b84:	08005b61 	.word	0x08005b61
 8005b88:	08005b61 	.word	0x08005b61
 8005b8c:	08005b61 	.word	0x08005b61
 8005b90:	08005be5 	.word	0x08005be5
 8005b94:	08005b61 	.word	0x08005b61
 8005b98:	08005b61 	.word	0x08005b61
 8005b9c:	08005b61 	.word	0x08005b61
 8005ba0:	08005b61 	.word	0x08005b61
 8005ba4:	08005cf1 	.word	0x08005cf1
 8005ba8:	08005c15 	.word	0x08005c15
 8005bac:	08005cd3 	.word	0x08005cd3
 8005bb0:	08005b61 	.word	0x08005b61
 8005bb4:	08005b61 	.word	0x08005b61
 8005bb8:	08005d13 	.word	0x08005d13
 8005bbc:	08005b61 	.word	0x08005b61
 8005bc0:	08005c15 	.word	0x08005c15
 8005bc4:	08005b61 	.word	0x08005b61
 8005bc8:	08005b61 	.word	0x08005b61
 8005bcc:	08005cdb 	.word	0x08005cdb
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	1d1a      	adds	r2, r3, #4
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	602a      	str	r2, [r5, #0]
 8005bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005be0:	2301      	movs	r3, #1
 8005be2:	e0a3      	b.n	8005d2c <_printf_i+0x1f4>
 8005be4:	6820      	ldr	r0, [r4, #0]
 8005be6:	6829      	ldr	r1, [r5, #0]
 8005be8:	0606      	lsls	r6, r0, #24
 8005bea:	f101 0304 	add.w	r3, r1, #4
 8005bee:	d50a      	bpl.n	8005c06 <_printf_i+0xce>
 8005bf0:	680e      	ldr	r6, [r1, #0]
 8005bf2:	602b      	str	r3, [r5, #0]
 8005bf4:	2e00      	cmp	r6, #0
 8005bf6:	da03      	bge.n	8005c00 <_printf_i+0xc8>
 8005bf8:	232d      	movs	r3, #45	; 0x2d
 8005bfa:	4276      	negs	r6, r6
 8005bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c00:	485e      	ldr	r0, [pc, #376]	; (8005d7c <_printf_i+0x244>)
 8005c02:	230a      	movs	r3, #10
 8005c04:	e019      	b.n	8005c3a <_printf_i+0x102>
 8005c06:	680e      	ldr	r6, [r1, #0]
 8005c08:	602b      	str	r3, [r5, #0]
 8005c0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c0e:	bf18      	it	ne
 8005c10:	b236      	sxthne	r6, r6
 8005c12:	e7ef      	b.n	8005bf4 <_printf_i+0xbc>
 8005c14:	682b      	ldr	r3, [r5, #0]
 8005c16:	6820      	ldr	r0, [r4, #0]
 8005c18:	1d19      	adds	r1, r3, #4
 8005c1a:	6029      	str	r1, [r5, #0]
 8005c1c:	0601      	lsls	r1, r0, #24
 8005c1e:	d501      	bpl.n	8005c24 <_printf_i+0xec>
 8005c20:	681e      	ldr	r6, [r3, #0]
 8005c22:	e002      	b.n	8005c2a <_printf_i+0xf2>
 8005c24:	0646      	lsls	r6, r0, #25
 8005c26:	d5fb      	bpl.n	8005c20 <_printf_i+0xe8>
 8005c28:	881e      	ldrh	r6, [r3, #0]
 8005c2a:	4854      	ldr	r0, [pc, #336]	; (8005d7c <_printf_i+0x244>)
 8005c2c:	2f6f      	cmp	r7, #111	; 0x6f
 8005c2e:	bf0c      	ite	eq
 8005c30:	2308      	moveq	r3, #8
 8005c32:	230a      	movne	r3, #10
 8005c34:	2100      	movs	r1, #0
 8005c36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c3a:	6865      	ldr	r5, [r4, #4]
 8005c3c:	60a5      	str	r5, [r4, #8]
 8005c3e:	2d00      	cmp	r5, #0
 8005c40:	bfa2      	ittt	ge
 8005c42:	6821      	ldrge	r1, [r4, #0]
 8005c44:	f021 0104 	bicge.w	r1, r1, #4
 8005c48:	6021      	strge	r1, [r4, #0]
 8005c4a:	b90e      	cbnz	r6, 8005c50 <_printf_i+0x118>
 8005c4c:	2d00      	cmp	r5, #0
 8005c4e:	d04d      	beq.n	8005cec <_printf_i+0x1b4>
 8005c50:	4615      	mov	r5, r2
 8005c52:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c56:	fb03 6711 	mls	r7, r3, r1, r6
 8005c5a:	5dc7      	ldrb	r7, [r0, r7]
 8005c5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c60:	4637      	mov	r7, r6
 8005c62:	42bb      	cmp	r3, r7
 8005c64:	460e      	mov	r6, r1
 8005c66:	d9f4      	bls.n	8005c52 <_printf_i+0x11a>
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d10b      	bne.n	8005c84 <_printf_i+0x14c>
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	07de      	lsls	r6, r3, #31
 8005c70:	d508      	bpl.n	8005c84 <_printf_i+0x14c>
 8005c72:	6923      	ldr	r3, [r4, #16]
 8005c74:	6861      	ldr	r1, [r4, #4]
 8005c76:	4299      	cmp	r1, r3
 8005c78:	bfde      	ittt	le
 8005c7a:	2330      	movle	r3, #48	; 0x30
 8005c7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c84:	1b52      	subs	r2, r2, r5
 8005c86:	6122      	str	r2, [r4, #16]
 8005c88:	f8cd a000 	str.w	sl, [sp]
 8005c8c:	464b      	mov	r3, r9
 8005c8e:	aa03      	add	r2, sp, #12
 8005c90:	4621      	mov	r1, r4
 8005c92:	4640      	mov	r0, r8
 8005c94:	f7ff fee2 	bl	8005a5c <_printf_common>
 8005c98:	3001      	adds	r0, #1
 8005c9a:	d14c      	bne.n	8005d36 <_printf_i+0x1fe>
 8005c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca0:	b004      	add	sp, #16
 8005ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca6:	4835      	ldr	r0, [pc, #212]	; (8005d7c <_printf_i+0x244>)
 8005ca8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005cac:	6829      	ldr	r1, [r5, #0]
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cb4:	6029      	str	r1, [r5, #0]
 8005cb6:	061d      	lsls	r5, r3, #24
 8005cb8:	d514      	bpl.n	8005ce4 <_printf_i+0x1ac>
 8005cba:	07df      	lsls	r7, r3, #31
 8005cbc:	bf44      	itt	mi
 8005cbe:	f043 0320 	orrmi.w	r3, r3, #32
 8005cc2:	6023      	strmi	r3, [r4, #0]
 8005cc4:	b91e      	cbnz	r6, 8005cce <_printf_i+0x196>
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	f023 0320 	bic.w	r3, r3, #32
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	2310      	movs	r3, #16
 8005cd0:	e7b0      	b.n	8005c34 <_printf_i+0xfc>
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	f043 0320 	orr.w	r3, r3, #32
 8005cd8:	6023      	str	r3, [r4, #0]
 8005cda:	2378      	movs	r3, #120	; 0x78
 8005cdc:	4828      	ldr	r0, [pc, #160]	; (8005d80 <_printf_i+0x248>)
 8005cde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ce2:	e7e3      	b.n	8005cac <_printf_i+0x174>
 8005ce4:	0659      	lsls	r1, r3, #25
 8005ce6:	bf48      	it	mi
 8005ce8:	b2b6      	uxthmi	r6, r6
 8005cea:	e7e6      	b.n	8005cba <_printf_i+0x182>
 8005cec:	4615      	mov	r5, r2
 8005cee:	e7bb      	b.n	8005c68 <_printf_i+0x130>
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	6826      	ldr	r6, [r4, #0]
 8005cf4:	6961      	ldr	r1, [r4, #20]
 8005cf6:	1d18      	adds	r0, r3, #4
 8005cf8:	6028      	str	r0, [r5, #0]
 8005cfa:	0635      	lsls	r5, r6, #24
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	d501      	bpl.n	8005d04 <_printf_i+0x1cc>
 8005d00:	6019      	str	r1, [r3, #0]
 8005d02:	e002      	b.n	8005d0a <_printf_i+0x1d2>
 8005d04:	0670      	lsls	r0, r6, #25
 8005d06:	d5fb      	bpl.n	8005d00 <_printf_i+0x1c8>
 8005d08:	8019      	strh	r1, [r3, #0]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	6123      	str	r3, [r4, #16]
 8005d0e:	4615      	mov	r5, r2
 8005d10:	e7ba      	b.n	8005c88 <_printf_i+0x150>
 8005d12:	682b      	ldr	r3, [r5, #0]
 8005d14:	1d1a      	adds	r2, r3, #4
 8005d16:	602a      	str	r2, [r5, #0]
 8005d18:	681d      	ldr	r5, [r3, #0]
 8005d1a:	6862      	ldr	r2, [r4, #4]
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f7fa fae6 	bl	80002f0 <memchr>
 8005d24:	b108      	cbz	r0, 8005d2a <_printf_i+0x1f2>
 8005d26:	1b40      	subs	r0, r0, r5
 8005d28:	6060      	str	r0, [r4, #4]
 8005d2a:	6863      	ldr	r3, [r4, #4]
 8005d2c:	6123      	str	r3, [r4, #16]
 8005d2e:	2300      	movs	r3, #0
 8005d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d34:	e7a8      	b.n	8005c88 <_printf_i+0x150>
 8005d36:	6923      	ldr	r3, [r4, #16]
 8005d38:	462a      	mov	r2, r5
 8005d3a:	4649      	mov	r1, r9
 8005d3c:	4640      	mov	r0, r8
 8005d3e:	47d0      	blx	sl
 8005d40:	3001      	adds	r0, #1
 8005d42:	d0ab      	beq.n	8005c9c <_printf_i+0x164>
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	079b      	lsls	r3, r3, #30
 8005d48:	d413      	bmi.n	8005d72 <_printf_i+0x23a>
 8005d4a:	68e0      	ldr	r0, [r4, #12]
 8005d4c:	9b03      	ldr	r3, [sp, #12]
 8005d4e:	4298      	cmp	r0, r3
 8005d50:	bfb8      	it	lt
 8005d52:	4618      	movlt	r0, r3
 8005d54:	e7a4      	b.n	8005ca0 <_printf_i+0x168>
 8005d56:	2301      	movs	r3, #1
 8005d58:	4632      	mov	r2, r6
 8005d5a:	4649      	mov	r1, r9
 8005d5c:	4640      	mov	r0, r8
 8005d5e:	47d0      	blx	sl
 8005d60:	3001      	adds	r0, #1
 8005d62:	d09b      	beq.n	8005c9c <_printf_i+0x164>
 8005d64:	3501      	adds	r5, #1
 8005d66:	68e3      	ldr	r3, [r4, #12]
 8005d68:	9903      	ldr	r1, [sp, #12]
 8005d6a:	1a5b      	subs	r3, r3, r1
 8005d6c:	42ab      	cmp	r3, r5
 8005d6e:	dcf2      	bgt.n	8005d56 <_printf_i+0x21e>
 8005d70:	e7eb      	b.n	8005d4a <_printf_i+0x212>
 8005d72:	2500      	movs	r5, #0
 8005d74:	f104 0619 	add.w	r6, r4, #25
 8005d78:	e7f5      	b.n	8005d66 <_printf_i+0x22e>
 8005d7a:	bf00      	nop
 8005d7c:	08007e92 	.word	0x08007e92
 8005d80:	08007ea3 	.word	0x08007ea3

08005d84 <iprintf>:
 8005d84:	b40f      	push	{r0, r1, r2, r3}
 8005d86:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <iprintf+0x2c>)
 8005d88:	b513      	push	{r0, r1, r4, lr}
 8005d8a:	681c      	ldr	r4, [r3, #0]
 8005d8c:	b124      	cbz	r4, 8005d98 <iprintf+0x14>
 8005d8e:	69a3      	ldr	r3, [r4, #24]
 8005d90:	b913      	cbnz	r3, 8005d98 <iprintf+0x14>
 8005d92:	4620      	mov	r0, r4
 8005d94:	f000 fe62 	bl	8006a5c <__sinit>
 8005d98:	ab05      	add	r3, sp, #20
 8005d9a:	9a04      	ldr	r2, [sp, #16]
 8005d9c:	68a1      	ldr	r1, [r4, #8]
 8005d9e:	9301      	str	r3, [sp, #4]
 8005da0:	4620      	mov	r0, r4
 8005da2:	f001 fbbb 	bl	800751c <_vfiprintf_r>
 8005da6:	b002      	add	sp, #8
 8005da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dac:	b004      	add	sp, #16
 8005dae:	4770      	bx	lr
 8005db0:	24000010 	.word	0x24000010

08005db4 <quorem>:
 8005db4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db8:	6903      	ldr	r3, [r0, #16]
 8005dba:	690c      	ldr	r4, [r1, #16]
 8005dbc:	42a3      	cmp	r3, r4
 8005dbe:	4607      	mov	r7, r0
 8005dc0:	f2c0 8081 	blt.w	8005ec6 <quorem+0x112>
 8005dc4:	3c01      	subs	r4, #1
 8005dc6:	f101 0814 	add.w	r8, r1, #20
 8005dca:	f100 0514 	add.w	r5, r0, #20
 8005dce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dd2:	9301      	str	r3, [sp, #4]
 8005dd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005dd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	429a      	cmp	r2, r3
 8005de0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005de4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005de8:	fbb2 f6f3 	udiv	r6, r2, r3
 8005dec:	d331      	bcc.n	8005e52 <quorem+0x9e>
 8005dee:	f04f 0e00 	mov.w	lr, #0
 8005df2:	4640      	mov	r0, r8
 8005df4:	46ac      	mov	ip, r5
 8005df6:	46f2      	mov	sl, lr
 8005df8:	f850 2b04 	ldr.w	r2, [r0], #4
 8005dfc:	b293      	uxth	r3, r2
 8005dfe:	fb06 e303 	mla	r3, r6, r3, lr
 8005e02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	ebaa 0303 	sub.w	r3, sl, r3
 8005e0c:	f8dc a000 	ldr.w	sl, [ip]
 8005e10:	0c12      	lsrs	r2, r2, #16
 8005e12:	fa13 f38a 	uxtah	r3, r3, sl
 8005e16:	fb06 e202 	mla	r2, r6, r2, lr
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	9b00      	ldr	r3, [sp, #0]
 8005e1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e22:	b292      	uxth	r2, r2
 8005e24:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e2c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005e30:	4581      	cmp	r9, r0
 8005e32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e36:	f84c 3b04 	str.w	r3, [ip], #4
 8005e3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e3e:	d2db      	bcs.n	8005df8 <quorem+0x44>
 8005e40:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e44:	b92b      	cbnz	r3, 8005e52 <quorem+0x9e>
 8005e46:	9b01      	ldr	r3, [sp, #4]
 8005e48:	3b04      	subs	r3, #4
 8005e4a:	429d      	cmp	r5, r3
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	d32e      	bcc.n	8005eae <quorem+0xfa>
 8005e50:	613c      	str	r4, [r7, #16]
 8005e52:	4638      	mov	r0, r7
 8005e54:	f001 f940 	bl	80070d8 <__mcmp>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	db24      	blt.n	8005ea6 <quorem+0xf2>
 8005e5c:	3601      	adds	r6, #1
 8005e5e:	4628      	mov	r0, r5
 8005e60:	f04f 0c00 	mov.w	ip, #0
 8005e64:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e68:	f8d0 e000 	ldr.w	lr, [r0]
 8005e6c:	b293      	uxth	r3, r2
 8005e6e:	ebac 0303 	sub.w	r3, ip, r3
 8005e72:	0c12      	lsrs	r2, r2, #16
 8005e74:	fa13 f38e 	uxtah	r3, r3, lr
 8005e78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e86:	45c1      	cmp	r9, r8
 8005e88:	f840 3b04 	str.w	r3, [r0], #4
 8005e8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e90:	d2e8      	bcs.n	8005e64 <quorem+0xb0>
 8005e92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e9a:	b922      	cbnz	r2, 8005ea6 <quorem+0xf2>
 8005e9c:	3b04      	subs	r3, #4
 8005e9e:	429d      	cmp	r5, r3
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	d30a      	bcc.n	8005eba <quorem+0x106>
 8005ea4:	613c      	str	r4, [r7, #16]
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	b003      	add	sp, #12
 8005eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	3b04      	subs	r3, #4
 8005eb2:	2a00      	cmp	r2, #0
 8005eb4:	d1cc      	bne.n	8005e50 <quorem+0x9c>
 8005eb6:	3c01      	subs	r4, #1
 8005eb8:	e7c7      	b.n	8005e4a <quorem+0x96>
 8005eba:	6812      	ldr	r2, [r2, #0]
 8005ebc:	3b04      	subs	r3, #4
 8005ebe:	2a00      	cmp	r2, #0
 8005ec0:	d1f0      	bne.n	8005ea4 <quorem+0xf0>
 8005ec2:	3c01      	subs	r4, #1
 8005ec4:	e7eb      	b.n	8005e9e <quorem+0xea>
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	e7ee      	b.n	8005ea8 <quorem+0xf4>
 8005eca:	0000      	movs	r0, r0
 8005ecc:	0000      	movs	r0, r0
	...

08005ed0 <_dtoa_r>:
 8005ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed4:	ed2d 8b02 	vpush	{d8}
 8005ed8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005eda:	b091      	sub	sp, #68	; 0x44
 8005edc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005ee0:	ec59 8b10 	vmov	r8, r9, d0
 8005ee4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8005ee6:	9106      	str	r1, [sp, #24]
 8005ee8:	4606      	mov	r6, r0
 8005eea:	9208      	str	r2, [sp, #32]
 8005eec:	930c      	str	r3, [sp, #48]	; 0x30
 8005eee:	b975      	cbnz	r5, 8005f0e <_dtoa_r+0x3e>
 8005ef0:	2010      	movs	r0, #16
 8005ef2:	f000 fe59 	bl	8006ba8 <malloc>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	6270      	str	r0, [r6, #36]	; 0x24
 8005efa:	b920      	cbnz	r0, 8005f06 <_dtoa_r+0x36>
 8005efc:	4baa      	ldr	r3, [pc, #680]	; (80061a8 <_dtoa_r+0x2d8>)
 8005efe:	21ea      	movs	r1, #234	; 0xea
 8005f00:	48aa      	ldr	r0, [pc, #680]	; (80061ac <_dtoa_r+0x2dc>)
 8005f02:	f001 fd61 	bl	80079c8 <__assert_func>
 8005f06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f0a:	6005      	str	r5, [r0, #0]
 8005f0c:	60c5      	str	r5, [r0, #12]
 8005f0e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005f10:	6819      	ldr	r1, [r3, #0]
 8005f12:	b151      	cbz	r1, 8005f2a <_dtoa_r+0x5a>
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	604a      	str	r2, [r1, #4]
 8005f18:	2301      	movs	r3, #1
 8005f1a:	4093      	lsls	r3, r2
 8005f1c:	608b      	str	r3, [r1, #8]
 8005f1e:	4630      	mov	r0, r6
 8005f20:	f000 fe98 	bl	8006c54 <_Bfree>
 8005f24:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	f1b9 0300 	subs.w	r3, r9, #0
 8005f2e:	bfbb      	ittet	lt
 8005f30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f34:	9303      	strlt	r3, [sp, #12]
 8005f36:	2300      	movge	r3, #0
 8005f38:	2201      	movlt	r2, #1
 8005f3a:	bfac      	ite	ge
 8005f3c:	6023      	strge	r3, [r4, #0]
 8005f3e:	6022      	strlt	r2, [r4, #0]
 8005f40:	4b9b      	ldr	r3, [pc, #620]	; (80061b0 <_dtoa_r+0x2e0>)
 8005f42:	9c03      	ldr	r4, [sp, #12]
 8005f44:	43a3      	bics	r3, r4
 8005f46:	d11c      	bne.n	8005f82 <_dtoa_r+0xb2>
 8005f48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005f54:	ea53 0308 	orrs.w	r3, r3, r8
 8005f58:	f000 84fd 	beq.w	8006956 <_dtoa_r+0xa86>
 8005f5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005f5e:	b963      	cbnz	r3, 8005f7a <_dtoa_r+0xaa>
 8005f60:	4b94      	ldr	r3, [pc, #592]	; (80061b4 <_dtoa_r+0x2e4>)
 8005f62:	e01f      	b.n	8005fa4 <_dtoa_r+0xd4>
 8005f64:	4b94      	ldr	r3, [pc, #592]	; (80061b8 <_dtoa_r+0x2e8>)
 8005f66:	9301      	str	r3, [sp, #4]
 8005f68:	3308      	adds	r3, #8
 8005f6a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	9801      	ldr	r0, [sp, #4]
 8005f70:	b011      	add	sp, #68	; 0x44
 8005f72:	ecbd 8b02 	vpop	{d8}
 8005f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f7a:	4b8e      	ldr	r3, [pc, #568]	; (80061b4 <_dtoa_r+0x2e4>)
 8005f7c:	9301      	str	r3, [sp, #4]
 8005f7e:	3303      	adds	r3, #3
 8005f80:	e7f3      	b.n	8005f6a <_dtoa_r+0x9a>
 8005f82:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005f86:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f8e:	d10b      	bne.n	8005fa8 <_dtoa_r+0xd8>
 8005f90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f92:	2301      	movs	r3, #1
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 84d9 	beq.w	8006950 <_dtoa_r+0xa80>
 8005f9e:	4887      	ldr	r0, [pc, #540]	; (80061bc <_dtoa_r+0x2ec>)
 8005fa0:	6018      	str	r0, [r3, #0]
 8005fa2:	1e43      	subs	r3, r0, #1
 8005fa4:	9301      	str	r3, [sp, #4]
 8005fa6:	e7e2      	b.n	8005f6e <_dtoa_r+0x9e>
 8005fa8:	a90f      	add	r1, sp, #60	; 0x3c
 8005faa:	aa0e      	add	r2, sp, #56	; 0x38
 8005fac:	4630      	mov	r0, r6
 8005fae:	eeb0 0b48 	vmov.f64	d0, d8
 8005fb2:	f001 f937 	bl	8007224 <__d2b>
 8005fb6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8005fba:	4605      	mov	r5, r0
 8005fbc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005fbe:	2900      	cmp	r1, #0
 8005fc0:	d046      	beq.n	8006050 <_dtoa_r+0x180>
 8005fc2:	ee18 4a90 	vmov	r4, s17
 8005fc6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005fca:	ec53 2b18 	vmov	r2, r3, d8
 8005fce:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8005fd2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005fd6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005fda:	2400      	movs	r4, #0
 8005fdc:	ec43 2b16 	vmov	d6, r2, r3
 8005fe0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8005fe4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8006190 <_dtoa_r+0x2c0>
 8005fe8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005fec:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8006198 <_dtoa_r+0x2c8>
 8005ff0:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005ff4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80061a0 <_dtoa_r+0x2d0>
 8005ff8:	ee07 1a90 	vmov	s15, r1
 8005ffc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006000:	eeb0 7b46 	vmov.f64	d7, d6
 8006004:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006008:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800600c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006014:	ee16 ba90 	vmov	fp, s13
 8006018:	940a      	str	r4, [sp, #40]	; 0x28
 800601a:	d508      	bpl.n	800602e <_dtoa_r+0x15e>
 800601c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006020:	eeb4 6b47 	vcmp.f64	d6, d7
 8006024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006028:	bf18      	it	ne
 800602a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800602e:	f1bb 0f16 	cmp.w	fp, #22
 8006032:	d82f      	bhi.n	8006094 <_dtoa_r+0x1c4>
 8006034:	4b62      	ldr	r3, [pc, #392]	; (80061c0 <_dtoa_r+0x2f0>)
 8006036:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800603a:	ed93 7b00 	vldr	d7, [r3]
 800603e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006046:	d501      	bpl.n	800604c <_dtoa_r+0x17c>
 8006048:	f10b 3bff 	add.w	fp, fp, #4294967295
 800604c:	2300      	movs	r3, #0
 800604e:	e022      	b.n	8006096 <_dtoa_r+0x1c6>
 8006050:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006052:	4401      	add	r1, r0
 8006054:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8006058:	2b20      	cmp	r3, #32
 800605a:	bfc1      	itttt	gt
 800605c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006060:	fa04 f303 	lslgt.w	r3, r4, r3
 8006064:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8006068:	fa28 f804 	lsrgt.w	r8, r8, r4
 800606c:	bfd6      	itet	le
 800606e:	f1c3 0320 	rsble	r3, r3, #32
 8006072:	ea43 0808 	orrgt.w	r8, r3, r8
 8006076:	fa08 f803 	lslle.w	r8, r8, r3
 800607a:	ee07 8a90 	vmov	s15, r8
 800607e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006082:	3901      	subs	r1, #1
 8006084:	ee17 4a90 	vmov	r4, s15
 8006088:	ec53 2b17 	vmov	r2, r3, d7
 800608c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8006090:	2401      	movs	r4, #1
 8006092:	e7a3      	b.n	8005fdc <_dtoa_r+0x10c>
 8006094:	2301      	movs	r3, #1
 8006096:	930b      	str	r3, [sp, #44]	; 0x2c
 8006098:	1a43      	subs	r3, r0, r1
 800609a:	1e5a      	subs	r2, r3, #1
 800609c:	bf45      	ittet	mi
 800609e:	f1c3 0301 	rsbmi	r3, r3, #1
 80060a2:	9304      	strmi	r3, [sp, #16]
 80060a4:	2300      	movpl	r3, #0
 80060a6:	2300      	movmi	r3, #0
 80060a8:	9205      	str	r2, [sp, #20]
 80060aa:	bf54      	ite	pl
 80060ac:	9304      	strpl	r3, [sp, #16]
 80060ae:	9305      	strmi	r3, [sp, #20]
 80060b0:	f1bb 0f00 	cmp.w	fp, #0
 80060b4:	db18      	blt.n	80060e8 <_dtoa_r+0x218>
 80060b6:	9b05      	ldr	r3, [sp, #20]
 80060b8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80060bc:	445b      	add	r3, fp
 80060be:	9305      	str	r3, [sp, #20]
 80060c0:	2300      	movs	r3, #0
 80060c2:	9a06      	ldr	r2, [sp, #24]
 80060c4:	2a09      	cmp	r2, #9
 80060c6:	d849      	bhi.n	800615c <_dtoa_r+0x28c>
 80060c8:	2a05      	cmp	r2, #5
 80060ca:	bfc4      	itt	gt
 80060cc:	3a04      	subgt	r2, #4
 80060ce:	9206      	strgt	r2, [sp, #24]
 80060d0:	9a06      	ldr	r2, [sp, #24]
 80060d2:	f1a2 0202 	sub.w	r2, r2, #2
 80060d6:	bfcc      	ite	gt
 80060d8:	2400      	movgt	r4, #0
 80060da:	2401      	movle	r4, #1
 80060dc:	2a03      	cmp	r2, #3
 80060de:	d848      	bhi.n	8006172 <_dtoa_r+0x2a2>
 80060e0:	e8df f002 	tbb	[pc, r2]
 80060e4:	3a2c2e0b 	.word	0x3a2c2e0b
 80060e8:	9b04      	ldr	r3, [sp, #16]
 80060ea:	2200      	movs	r2, #0
 80060ec:	eba3 030b 	sub.w	r3, r3, fp
 80060f0:	9304      	str	r3, [sp, #16]
 80060f2:	9209      	str	r2, [sp, #36]	; 0x24
 80060f4:	f1cb 0300 	rsb	r3, fp, #0
 80060f8:	e7e3      	b.n	80060c2 <_dtoa_r+0x1f2>
 80060fa:	2200      	movs	r2, #0
 80060fc:	9207      	str	r2, [sp, #28]
 80060fe:	9a08      	ldr	r2, [sp, #32]
 8006100:	2a00      	cmp	r2, #0
 8006102:	dc39      	bgt.n	8006178 <_dtoa_r+0x2a8>
 8006104:	f04f 0a01 	mov.w	sl, #1
 8006108:	46d1      	mov	r9, sl
 800610a:	4652      	mov	r2, sl
 800610c:	f8cd a020 	str.w	sl, [sp, #32]
 8006110:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8006112:	2100      	movs	r1, #0
 8006114:	6079      	str	r1, [r7, #4]
 8006116:	2004      	movs	r0, #4
 8006118:	f100 0c14 	add.w	ip, r0, #20
 800611c:	4594      	cmp	ip, r2
 800611e:	6879      	ldr	r1, [r7, #4]
 8006120:	d92f      	bls.n	8006182 <_dtoa_r+0x2b2>
 8006122:	4630      	mov	r0, r6
 8006124:	930d      	str	r3, [sp, #52]	; 0x34
 8006126:	f000 fd55 	bl	8006bd4 <_Balloc>
 800612a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800612c:	9001      	str	r0, [sp, #4]
 800612e:	4602      	mov	r2, r0
 8006130:	2800      	cmp	r0, #0
 8006132:	d149      	bne.n	80061c8 <_dtoa_r+0x2f8>
 8006134:	4b23      	ldr	r3, [pc, #140]	; (80061c4 <_dtoa_r+0x2f4>)
 8006136:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800613a:	e6e1      	b.n	8005f00 <_dtoa_r+0x30>
 800613c:	2201      	movs	r2, #1
 800613e:	e7dd      	b.n	80060fc <_dtoa_r+0x22c>
 8006140:	2200      	movs	r2, #0
 8006142:	9207      	str	r2, [sp, #28]
 8006144:	9a08      	ldr	r2, [sp, #32]
 8006146:	eb0b 0a02 	add.w	sl, fp, r2
 800614a:	f10a 0901 	add.w	r9, sl, #1
 800614e:	464a      	mov	r2, r9
 8006150:	2a01      	cmp	r2, #1
 8006152:	bfb8      	it	lt
 8006154:	2201      	movlt	r2, #1
 8006156:	e7db      	b.n	8006110 <_dtoa_r+0x240>
 8006158:	2201      	movs	r2, #1
 800615a:	e7f2      	b.n	8006142 <_dtoa_r+0x272>
 800615c:	2401      	movs	r4, #1
 800615e:	2200      	movs	r2, #0
 8006160:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8006164:	f04f 3aff 	mov.w	sl, #4294967295
 8006168:	2100      	movs	r1, #0
 800616a:	46d1      	mov	r9, sl
 800616c:	2212      	movs	r2, #18
 800616e:	9108      	str	r1, [sp, #32]
 8006170:	e7ce      	b.n	8006110 <_dtoa_r+0x240>
 8006172:	2201      	movs	r2, #1
 8006174:	9207      	str	r2, [sp, #28]
 8006176:	e7f5      	b.n	8006164 <_dtoa_r+0x294>
 8006178:	f8dd a020 	ldr.w	sl, [sp, #32]
 800617c:	46d1      	mov	r9, sl
 800617e:	4652      	mov	r2, sl
 8006180:	e7c6      	b.n	8006110 <_dtoa_r+0x240>
 8006182:	3101      	adds	r1, #1
 8006184:	6079      	str	r1, [r7, #4]
 8006186:	0040      	lsls	r0, r0, #1
 8006188:	e7c6      	b.n	8006118 <_dtoa_r+0x248>
 800618a:	bf00      	nop
 800618c:	f3af 8000 	nop.w
 8006190:	636f4361 	.word	0x636f4361
 8006194:	3fd287a7 	.word	0x3fd287a7
 8006198:	8b60c8b3 	.word	0x8b60c8b3
 800619c:	3fc68a28 	.word	0x3fc68a28
 80061a0:	509f79fb 	.word	0x509f79fb
 80061a4:	3fd34413 	.word	0x3fd34413
 80061a8:	08007ec1 	.word	0x08007ec1
 80061ac:	08007ed8 	.word	0x08007ed8
 80061b0:	7ff00000 	.word	0x7ff00000
 80061b4:	08007ebd 	.word	0x08007ebd
 80061b8:	08007eb4 	.word	0x08007eb4
 80061bc:	08007e91 	.word	0x08007e91
 80061c0:	08008028 	.word	0x08008028
 80061c4:	08007f33 	.word	0x08007f33
 80061c8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80061ca:	9901      	ldr	r1, [sp, #4]
 80061cc:	6011      	str	r1, [r2, #0]
 80061ce:	f1b9 0f0e 	cmp.w	r9, #14
 80061d2:	d86c      	bhi.n	80062ae <_dtoa_r+0x3de>
 80061d4:	2c00      	cmp	r4, #0
 80061d6:	d06a      	beq.n	80062ae <_dtoa_r+0x3de>
 80061d8:	f1bb 0f00 	cmp.w	fp, #0
 80061dc:	f340 80a0 	ble.w	8006320 <_dtoa_r+0x450>
 80061e0:	49c1      	ldr	r1, [pc, #772]	; (80064e8 <_dtoa_r+0x618>)
 80061e2:	f00b 020f 	and.w	r2, fp, #15
 80061e6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80061ea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80061ee:	ed92 7b00 	vldr	d7, [r2]
 80061f2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80061f6:	f000 8087 	beq.w	8006308 <_dtoa_r+0x438>
 80061fa:	4abc      	ldr	r2, [pc, #752]	; (80064ec <_dtoa_r+0x61c>)
 80061fc:	ed92 6b08 	vldr	d6, [r2, #32]
 8006200:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8006204:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006208:	f001 010f 	and.w	r1, r1, #15
 800620c:	2203      	movs	r2, #3
 800620e:	48b7      	ldr	r0, [pc, #732]	; (80064ec <_dtoa_r+0x61c>)
 8006210:	2900      	cmp	r1, #0
 8006212:	d17b      	bne.n	800630c <_dtoa_r+0x43c>
 8006214:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006218:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800621c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006220:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006222:	2900      	cmp	r1, #0
 8006224:	f000 80a2 	beq.w	800636c <_dtoa_r+0x49c>
 8006228:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800622c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006230:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006238:	f140 8098 	bpl.w	800636c <_dtoa_r+0x49c>
 800623c:	f1b9 0f00 	cmp.w	r9, #0
 8006240:	f000 8094 	beq.w	800636c <_dtoa_r+0x49c>
 8006244:	f1ba 0f00 	cmp.w	sl, #0
 8006248:	dd2f      	ble.n	80062aa <_dtoa_r+0x3da>
 800624a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800624e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006252:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006256:	f10b 37ff 	add.w	r7, fp, #4294967295
 800625a:	3201      	adds	r2, #1
 800625c:	4650      	mov	r0, sl
 800625e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006262:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006266:	ee07 2a90 	vmov	s15, r2
 800626a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800626e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006272:	ee15 4a90 	vmov	r4, s11
 8006276:	ec52 1b15 	vmov	r1, r2, d5
 800627a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800627e:	2800      	cmp	r0, #0
 8006280:	d177      	bne.n	8006372 <_dtoa_r+0x4a2>
 8006282:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006286:	ee36 6b47 	vsub.f64	d6, d6, d7
 800628a:	ec42 1b17 	vmov	d7, r1, r2
 800628e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006296:	f300 8263 	bgt.w	8006760 <_dtoa_r+0x890>
 800629a:	eeb1 7b47 	vneg.f64	d7, d7
 800629e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80062a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062a6:	f100 8258 	bmi.w	800675a <_dtoa_r+0x88a>
 80062aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80062ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062b0:	2a00      	cmp	r2, #0
 80062b2:	f2c0 811d 	blt.w	80064f0 <_dtoa_r+0x620>
 80062b6:	f1bb 0f0e 	cmp.w	fp, #14
 80062ba:	f300 8119 	bgt.w	80064f0 <_dtoa_r+0x620>
 80062be:	4b8a      	ldr	r3, [pc, #552]	; (80064e8 <_dtoa_r+0x618>)
 80062c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80062c4:	ed93 6b00 	vldr	d6, [r3]
 80062c8:	9b08      	ldr	r3, [sp, #32]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f280 80b7 	bge.w	800643e <_dtoa_r+0x56e>
 80062d0:	f1b9 0f00 	cmp.w	r9, #0
 80062d4:	f300 80b3 	bgt.w	800643e <_dtoa_r+0x56e>
 80062d8:	f040 823f 	bne.w	800675a <_dtoa_r+0x88a>
 80062dc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80062e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80062e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80062e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80062ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062f0:	464c      	mov	r4, r9
 80062f2:	464f      	mov	r7, r9
 80062f4:	f280 8215 	bge.w	8006722 <_dtoa_r+0x852>
 80062f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80062fc:	2331      	movs	r3, #49	; 0x31
 80062fe:	f808 3b01 	strb.w	r3, [r8], #1
 8006302:	f10b 0b01 	add.w	fp, fp, #1
 8006306:	e211      	b.n	800672c <_dtoa_r+0x85c>
 8006308:	2202      	movs	r2, #2
 800630a:	e780      	b.n	800620e <_dtoa_r+0x33e>
 800630c:	07cc      	lsls	r4, r1, #31
 800630e:	d504      	bpl.n	800631a <_dtoa_r+0x44a>
 8006310:	ed90 6b00 	vldr	d6, [r0]
 8006314:	3201      	adds	r2, #1
 8006316:	ee27 7b06 	vmul.f64	d7, d7, d6
 800631a:	1049      	asrs	r1, r1, #1
 800631c:	3008      	adds	r0, #8
 800631e:	e777      	b.n	8006210 <_dtoa_r+0x340>
 8006320:	d022      	beq.n	8006368 <_dtoa_r+0x498>
 8006322:	f1cb 0100 	rsb	r1, fp, #0
 8006326:	4a70      	ldr	r2, [pc, #448]	; (80064e8 <_dtoa_r+0x618>)
 8006328:	f001 000f 	and.w	r0, r1, #15
 800632c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006330:	ed92 7b00 	vldr	d7, [r2]
 8006334:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006338:	ed8d 7b02 	vstr	d7, [sp, #8]
 800633c:	486b      	ldr	r0, [pc, #428]	; (80064ec <_dtoa_r+0x61c>)
 800633e:	1109      	asrs	r1, r1, #4
 8006340:	2400      	movs	r4, #0
 8006342:	2202      	movs	r2, #2
 8006344:	b929      	cbnz	r1, 8006352 <_dtoa_r+0x482>
 8006346:	2c00      	cmp	r4, #0
 8006348:	f43f af6a 	beq.w	8006220 <_dtoa_r+0x350>
 800634c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006350:	e766      	b.n	8006220 <_dtoa_r+0x350>
 8006352:	07cf      	lsls	r7, r1, #31
 8006354:	d505      	bpl.n	8006362 <_dtoa_r+0x492>
 8006356:	ed90 6b00 	vldr	d6, [r0]
 800635a:	3201      	adds	r2, #1
 800635c:	2401      	movs	r4, #1
 800635e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006362:	1049      	asrs	r1, r1, #1
 8006364:	3008      	adds	r0, #8
 8006366:	e7ed      	b.n	8006344 <_dtoa_r+0x474>
 8006368:	2202      	movs	r2, #2
 800636a:	e759      	b.n	8006220 <_dtoa_r+0x350>
 800636c:	465f      	mov	r7, fp
 800636e:	4648      	mov	r0, r9
 8006370:	e775      	b.n	800625e <_dtoa_r+0x38e>
 8006372:	ec42 1b17 	vmov	d7, r1, r2
 8006376:	4a5c      	ldr	r2, [pc, #368]	; (80064e8 <_dtoa_r+0x618>)
 8006378:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800637c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8006380:	9a01      	ldr	r2, [sp, #4]
 8006382:	1814      	adds	r4, r2, r0
 8006384:	9a07      	ldr	r2, [sp, #28]
 8006386:	b352      	cbz	r2, 80063de <_dtoa_r+0x50e>
 8006388:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800638c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8006390:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006394:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006398:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800639c:	ee35 7b47 	vsub.f64	d7, d5, d7
 80063a0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80063a4:	ee14 2a90 	vmov	r2, s9
 80063a8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80063ac:	3230      	adds	r2, #48	; 0x30
 80063ae:	ee36 6b45 	vsub.f64	d6, d6, d5
 80063b2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80063b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ba:	f808 2b01 	strb.w	r2, [r8], #1
 80063be:	d439      	bmi.n	8006434 <_dtoa_r+0x564>
 80063c0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80063c4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80063c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063cc:	d472      	bmi.n	80064b4 <_dtoa_r+0x5e4>
 80063ce:	45a0      	cmp	r8, r4
 80063d0:	f43f af6b 	beq.w	80062aa <_dtoa_r+0x3da>
 80063d4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80063d8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80063dc:	e7e0      	b.n	80063a0 <_dtoa_r+0x4d0>
 80063de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80063e2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80063e6:	4621      	mov	r1, r4
 80063e8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80063ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80063f0:	ee14 2a90 	vmov	r2, s9
 80063f4:	3230      	adds	r2, #48	; 0x30
 80063f6:	f808 2b01 	strb.w	r2, [r8], #1
 80063fa:	45a0      	cmp	r8, r4
 80063fc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006400:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006404:	d118      	bne.n	8006438 <_dtoa_r+0x568>
 8006406:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800640a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800640e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006416:	dc4d      	bgt.n	80064b4 <_dtoa_r+0x5e4>
 8006418:	ee35 7b47 	vsub.f64	d7, d5, d7
 800641c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006424:	f57f af41 	bpl.w	80062aa <_dtoa_r+0x3da>
 8006428:	4688      	mov	r8, r1
 800642a:	3901      	subs	r1, #1
 800642c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8006430:	2b30      	cmp	r3, #48	; 0x30
 8006432:	d0f9      	beq.n	8006428 <_dtoa_r+0x558>
 8006434:	46bb      	mov	fp, r7
 8006436:	e02a      	b.n	800648e <_dtoa_r+0x5be>
 8006438:	ee26 6b03 	vmul.f64	d6, d6, d3
 800643c:	e7d6      	b.n	80063ec <_dtoa_r+0x51c>
 800643e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006442:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006446:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800644a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800644e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006452:	ee15 3a10 	vmov	r3, s10
 8006456:	3330      	adds	r3, #48	; 0x30
 8006458:	f808 3b01 	strb.w	r3, [r8], #1
 800645c:	9b01      	ldr	r3, [sp, #4]
 800645e:	eba8 0303 	sub.w	r3, r8, r3
 8006462:	4599      	cmp	r9, r3
 8006464:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006468:	eea3 7b46 	vfms.f64	d7, d3, d6
 800646c:	d133      	bne.n	80064d6 <_dtoa_r+0x606>
 800646e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006472:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800647a:	dc1a      	bgt.n	80064b2 <_dtoa_r+0x5e2>
 800647c:	eeb4 7b46 	vcmp.f64	d7, d6
 8006480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006484:	d103      	bne.n	800648e <_dtoa_r+0x5be>
 8006486:	ee15 3a10 	vmov	r3, s10
 800648a:	07d9      	lsls	r1, r3, #31
 800648c:	d411      	bmi.n	80064b2 <_dtoa_r+0x5e2>
 800648e:	4629      	mov	r1, r5
 8006490:	4630      	mov	r0, r6
 8006492:	f000 fbdf 	bl	8006c54 <_Bfree>
 8006496:	2300      	movs	r3, #0
 8006498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800649a:	f888 3000 	strb.w	r3, [r8]
 800649e:	f10b 0301 	add.w	r3, fp, #1
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f43f ad61 	beq.w	8005f6e <_dtoa_r+0x9e>
 80064ac:	f8c3 8000 	str.w	r8, [r3]
 80064b0:	e55d      	b.n	8005f6e <_dtoa_r+0x9e>
 80064b2:	465f      	mov	r7, fp
 80064b4:	4643      	mov	r3, r8
 80064b6:	4698      	mov	r8, r3
 80064b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064bc:	2a39      	cmp	r2, #57	; 0x39
 80064be:	d106      	bne.n	80064ce <_dtoa_r+0x5fe>
 80064c0:	9a01      	ldr	r2, [sp, #4]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d1f7      	bne.n	80064b6 <_dtoa_r+0x5e6>
 80064c6:	9901      	ldr	r1, [sp, #4]
 80064c8:	2230      	movs	r2, #48	; 0x30
 80064ca:	3701      	adds	r7, #1
 80064cc:	700a      	strb	r2, [r1, #0]
 80064ce:	781a      	ldrb	r2, [r3, #0]
 80064d0:	3201      	adds	r2, #1
 80064d2:	701a      	strb	r2, [r3, #0]
 80064d4:	e7ae      	b.n	8006434 <_dtoa_r+0x564>
 80064d6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80064da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80064de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064e2:	d1b2      	bne.n	800644a <_dtoa_r+0x57a>
 80064e4:	e7d3      	b.n	800648e <_dtoa_r+0x5be>
 80064e6:	bf00      	nop
 80064e8:	08008028 	.word	0x08008028
 80064ec:	08008000 	.word	0x08008000
 80064f0:	9907      	ldr	r1, [sp, #28]
 80064f2:	2900      	cmp	r1, #0
 80064f4:	f000 80d0 	beq.w	8006698 <_dtoa_r+0x7c8>
 80064f8:	9906      	ldr	r1, [sp, #24]
 80064fa:	2901      	cmp	r1, #1
 80064fc:	f300 80b4 	bgt.w	8006668 <_dtoa_r+0x798>
 8006500:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006502:	2900      	cmp	r1, #0
 8006504:	f000 80ac 	beq.w	8006660 <_dtoa_r+0x790>
 8006508:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800650c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006510:	461c      	mov	r4, r3
 8006512:	930a      	str	r3, [sp, #40]	; 0x28
 8006514:	9b04      	ldr	r3, [sp, #16]
 8006516:	4413      	add	r3, r2
 8006518:	9304      	str	r3, [sp, #16]
 800651a:	9b05      	ldr	r3, [sp, #20]
 800651c:	2101      	movs	r1, #1
 800651e:	4413      	add	r3, r2
 8006520:	4630      	mov	r0, r6
 8006522:	9305      	str	r3, [sp, #20]
 8006524:	f000 fc4e 	bl	8006dc4 <__i2b>
 8006528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800652a:	4607      	mov	r7, r0
 800652c:	f1b8 0f00 	cmp.w	r8, #0
 8006530:	dd0d      	ble.n	800654e <_dtoa_r+0x67e>
 8006532:	9a05      	ldr	r2, [sp, #20]
 8006534:	2a00      	cmp	r2, #0
 8006536:	dd0a      	ble.n	800654e <_dtoa_r+0x67e>
 8006538:	4542      	cmp	r2, r8
 800653a:	9904      	ldr	r1, [sp, #16]
 800653c:	bfa8      	it	ge
 800653e:	4642      	movge	r2, r8
 8006540:	1a89      	subs	r1, r1, r2
 8006542:	9104      	str	r1, [sp, #16]
 8006544:	9905      	ldr	r1, [sp, #20]
 8006546:	eba8 0802 	sub.w	r8, r8, r2
 800654a:	1a8a      	subs	r2, r1, r2
 800654c:	9205      	str	r2, [sp, #20]
 800654e:	b303      	cbz	r3, 8006592 <_dtoa_r+0x6c2>
 8006550:	9a07      	ldr	r2, [sp, #28]
 8006552:	2a00      	cmp	r2, #0
 8006554:	f000 80a5 	beq.w	80066a2 <_dtoa_r+0x7d2>
 8006558:	2c00      	cmp	r4, #0
 800655a:	dd13      	ble.n	8006584 <_dtoa_r+0x6b4>
 800655c:	4639      	mov	r1, r7
 800655e:	4622      	mov	r2, r4
 8006560:	4630      	mov	r0, r6
 8006562:	930d      	str	r3, [sp, #52]	; 0x34
 8006564:	f000 fcee 	bl	8006f44 <__pow5mult>
 8006568:	462a      	mov	r2, r5
 800656a:	4601      	mov	r1, r0
 800656c:	4607      	mov	r7, r0
 800656e:	4630      	mov	r0, r6
 8006570:	f000 fc3e 	bl	8006df0 <__multiply>
 8006574:	4629      	mov	r1, r5
 8006576:	900a      	str	r0, [sp, #40]	; 0x28
 8006578:	4630      	mov	r0, r6
 800657a:	f000 fb6b 	bl	8006c54 <_Bfree>
 800657e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006580:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006582:	4615      	mov	r5, r2
 8006584:	1b1a      	subs	r2, r3, r4
 8006586:	d004      	beq.n	8006592 <_dtoa_r+0x6c2>
 8006588:	4629      	mov	r1, r5
 800658a:	4630      	mov	r0, r6
 800658c:	f000 fcda 	bl	8006f44 <__pow5mult>
 8006590:	4605      	mov	r5, r0
 8006592:	2101      	movs	r1, #1
 8006594:	4630      	mov	r0, r6
 8006596:	f000 fc15 	bl	8006dc4 <__i2b>
 800659a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800659c:	2b00      	cmp	r3, #0
 800659e:	4604      	mov	r4, r0
 80065a0:	f340 8081 	ble.w	80066a6 <_dtoa_r+0x7d6>
 80065a4:	461a      	mov	r2, r3
 80065a6:	4601      	mov	r1, r0
 80065a8:	4630      	mov	r0, r6
 80065aa:	f000 fccb 	bl	8006f44 <__pow5mult>
 80065ae:	9b06      	ldr	r3, [sp, #24]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	4604      	mov	r4, r0
 80065b4:	dd7a      	ble.n	80066ac <_dtoa_r+0x7dc>
 80065b6:	2300      	movs	r3, #0
 80065b8:	930a      	str	r3, [sp, #40]	; 0x28
 80065ba:	6922      	ldr	r2, [r4, #16]
 80065bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80065c0:	6910      	ldr	r0, [r2, #16]
 80065c2:	f000 fbaf 	bl	8006d24 <__hi0bits>
 80065c6:	f1c0 0020 	rsb	r0, r0, #32
 80065ca:	9b05      	ldr	r3, [sp, #20]
 80065cc:	4418      	add	r0, r3
 80065ce:	f010 001f 	ands.w	r0, r0, #31
 80065d2:	f000 808c 	beq.w	80066ee <_dtoa_r+0x81e>
 80065d6:	f1c0 0220 	rsb	r2, r0, #32
 80065da:	2a04      	cmp	r2, #4
 80065dc:	f340 8085 	ble.w	80066ea <_dtoa_r+0x81a>
 80065e0:	f1c0 001c 	rsb	r0, r0, #28
 80065e4:	9b04      	ldr	r3, [sp, #16]
 80065e6:	4403      	add	r3, r0
 80065e8:	9304      	str	r3, [sp, #16]
 80065ea:	9b05      	ldr	r3, [sp, #20]
 80065ec:	4403      	add	r3, r0
 80065ee:	4480      	add	r8, r0
 80065f0:	9305      	str	r3, [sp, #20]
 80065f2:	9b04      	ldr	r3, [sp, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	dd05      	ble.n	8006604 <_dtoa_r+0x734>
 80065f8:	4629      	mov	r1, r5
 80065fa:	461a      	mov	r2, r3
 80065fc:	4630      	mov	r0, r6
 80065fe:	f000 fcfb 	bl	8006ff8 <__lshift>
 8006602:	4605      	mov	r5, r0
 8006604:	9b05      	ldr	r3, [sp, #20]
 8006606:	2b00      	cmp	r3, #0
 8006608:	dd05      	ble.n	8006616 <_dtoa_r+0x746>
 800660a:	4621      	mov	r1, r4
 800660c:	461a      	mov	r2, r3
 800660e:	4630      	mov	r0, r6
 8006610:	f000 fcf2 	bl	8006ff8 <__lshift>
 8006614:	4604      	mov	r4, r0
 8006616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006618:	2b00      	cmp	r3, #0
 800661a:	d06a      	beq.n	80066f2 <_dtoa_r+0x822>
 800661c:	4621      	mov	r1, r4
 800661e:	4628      	mov	r0, r5
 8006620:	f000 fd5a 	bl	80070d8 <__mcmp>
 8006624:	2800      	cmp	r0, #0
 8006626:	da64      	bge.n	80066f2 <_dtoa_r+0x822>
 8006628:	2300      	movs	r3, #0
 800662a:	4629      	mov	r1, r5
 800662c:	220a      	movs	r2, #10
 800662e:	4630      	mov	r0, r6
 8006630:	f000 fb32 	bl	8006c98 <__multadd>
 8006634:	9b07      	ldr	r3, [sp, #28]
 8006636:	f10b 3bff 	add.w	fp, fp, #4294967295
 800663a:	4605      	mov	r5, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 8191 	beq.w	8006964 <_dtoa_r+0xa94>
 8006642:	4639      	mov	r1, r7
 8006644:	2300      	movs	r3, #0
 8006646:	220a      	movs	r2, #10
 8006648:	4630      	mov	r0, r6
 800664a:	f000 fb25 	bl	8006c98 <__multadd>
 800664e:	f1ba 0f00 	cmp.w	sl, #0
 8006652:	4607      	mov	r7, r0
 8006654:	f300 808d 	bgt.w	8006772 <_dtoa_r+0x8a2>
 8006658:	9b06      	ldr	r3, [sp, #24]
 800665a:	2b02      	cmp	r3, #2
 800665c:	dc50      	bgt.n	8006700 <_dtoa_r+0x830>
 800665e:	e088      	b.n	8006772 <_dtoa_r+0x8a2>
 8006660:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006662:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006666:	e751      	b.n	800650c <_dtoa_r+0x63c>
 8006668:	f109 34ff 	add.w	r4, r9, #4294967295
 800666c:	42a3      	cmp	r3, r4
 800666e:	bfbf      	itttt	lt
 8006670:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8006672:	1ae3      	sublt	r3, r4, r3
 8006674:	18d2      	addlt	r2, r2, r3
 8006676:	9209      	strlt	r2, [sp, #36]	; 0x24
 8006678:	bfb6      	itet	lt
 800667a:	4623      	movlt	r3, r4
 800667c:	1b1c      	subge	r4, r3, r4
 800667e:	2400      	movlt	r4, #0
 8006680:	f1b9 0f00 	cmp.w	r9, #0
 8006684:	bfb5      	itete	lt
 8006686:	9a04      	ldrlt	r2, [sp, #16]
 8006688:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800668c:	eba2 0809 	sublt.w	r8, r2, r9
 8006690:	464a      	movge	r2, r9
 8006692:	bfb8      	it	lt
 8006694:	2200      	movlt	r2, #0
 8006696:	e73c      	b.n	8006512 <_dtoa_r+0x642>
 8006698:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800669c:	9f07      	ldr	r7, [sp, #28]
 800669e:	461c      	mov	r4, r3
 80066a0:	e744      	b.n	800652c <_dtoa_r+0x65c>
 80066a2:	461a      	mov	r2, r3
 80066a4:	e770      	b.n	8006588 <_dtoa_r+0x6b8>
 80066a6:	9b06      	ldr	r3, [sp, #24]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	dc18      	bgt.n	80066de <_dtoa_r+0x80e>
 80066ac:	9b02      	ldr	r3, [sp, #8]
 80066ae:	b9b3      	cbnz	r3, 80066de <_dtoa_r+0x80e>
 80066b0:	9b03      	ldr	r3, [sp, #12]
 80066b2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80066b6:	b9a2      	cbnz	r2, 80066e2 <_dtoa_r+0x812>
 80066b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80066bc:	0d12      	lsrs	r2, r2, #20
 80066be:	0512      	lsls	r2, r2, #20
 80066c0:	b18a      	cbz	r2, 80066e6 <_dtoa_r+0x816>
 80066c2:	9b04      	ldr	r3, [sp, #16]
 80066c4:	3301      	adds	r3, #1
 80066c6:	9304      	str	r3, [sp, #16]
 80066c8:	9b05      	ldr	r3, [sp, #20]
 80066ca:	3301      	adds	r3, #1
 80066cc:	9305      	str	r3, [sp, #20]
 80066ce:	2301      	movs	r3, #1
 80066d0:	930a      	str	r3, [sp, #40]	; 0x28
 80066d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f47f af70 	bne.w	80065ba <_dtoa_r+0x6ea>
 80066da:	2001      	movs	r0, #1
 80066dc:	e775      	b.n	80065ca <_dtoa_r+0x6fa>
 80066de:	2300      	movs	r3, #0
 80066e0:	e7f6      	b.n	80066d0 <_dtoa_r+0x800>
 80066e2:	9b02      	ldr	r3, [sp, #8]
 80066e4:	e7f4      	b.n	80066d0 <_dtoa_r+0x800>
 80066e6:	920a      	str	r2, [sp, #40]	; 0x28
 80066e8:	e7f3      	b.n	80066d2 <_dtoa_r+0x802>
 80066ea:	d082      	beq.n	80065f2 <_dtoa_r+0x722>
 80066ec:	4610      	mov	r0, r2
 80066ee:	301c      	adds	r0, #28
 80066f0:	e778      	b.n	80065e4 <_dtoa_r+0x714>
 80066f2:	f1b9 0f00 	cmp.w	r9, #0
 80066f6:	dc37      	bgt.n	8006768 <_dtoa_r+0x898>
 80066f8:	9b06      	ldr	r3, [sp, #24]
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	dd34      	ble.n	8006768 <_dtoa_r+0x898>
 80066fe:	46ca      	mov	sl, r9
 8006700:	f1ba 0f00 	cmp.w	sl, #0
 8006704:	d10d      	bne.n	8006722 <_dtoa_r+0x852>
 8006706:	4621      	mov	r1, r4
 8006708:	4653      	mov	r3, sl
 800670a:	2205      	movs	r2, #5
 800670c:	4630      	mov	r0, r6
 800670e:	f000 fac3 	bl	8006c98 <__multadd>
 8006712:	4601      	mov	r1, r0
 8006714:	4604      	mov	r4, r0
 8006716:	4628      	mov	r0, r5
 8006718:	f000 fcde 	bl	80070d8 <__mcmp>
 800671c:	2800      	cmp	r0, #0
 800671e:	f73f adeb 	bgt.w	80062f8 <_dtoa_r+0x428>
 8006722:	9b08      	ldr	r3, [sp, #32]
 8006724:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006728:	ea6f 0b03 	mvn.w	fp, r3
 800672c:	f04f 0900 	mov.w	r9, #0
 8006730:	4621      	mov	r1, r4
 8006732:	4630      	mov	r0, r6
 8006734:	f000 fa8e 	bl	8006c54 <_Bfree>
 8006738:	2f00      	cmp	r7, #0
 800673a:	f43f aea8 	beq.w	800648e <_dtoa_r+0x5be>
 800673e:	f1b9 0f00 	cmp.w	r9, #0
 8006742:	d005      	beq.n	8006750 <_dtoa_r+0x880>
 8006744:	45b9      	cmp	r9, r7
 8006746:	d003      	beq.n	8006750 <_dtoa_r+0x880>
 8006748:	4649      	mov	r1, r9
 800674a:	4630      	mov	r0, r6
 800674c:	f000 fa82 	bl	8006c54 <_Bfree>
 8006750:	4639      	mov	r1, r7
 8006752:	4630      	mov	r0, r6
 8006754:	f000 fa7e 	bl	8006c54 <_Bfree>
 8006758:	e699      	b.n	800648e <_dtoa_r+0x5be>
 800675a:	2400      	movs	r4, #0
 800675c:	4627      	mov	r7, r4
 800675e:	e7e0      	b.n	8006722 <_dtoa_r+0x852>
 8006760:	46bb      	mov	fp, r7
 8006762:	4604      	mov	r4, r0
 8006764:	4607      	mov	r7, r0
 8006766:	e5c7      	b.n	80062f8 <_dtoa_r+0x428>
 8006768:	9b07      	ldr	r3, [sp, #28]
 800676a:	46ca      	mov	sl, r9
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 8100 	beq.w	8006972 <_dtoa_r+0xaa2>
 8006772:	f1b8 0f00 	cmp.w	r8, #0
 8006776:	dd05      	ble.n	8006784 <_dtoa_r+0x8b4>
 8006778:	4639      	mov	r1, r7
 800677a:	4642      	mov	r2, r8
 800677c:	4630      	mov	r0, r6
 800677e:	f000 fc3b 	bl	8006ff8 <__lshift>
 8006782:	4607      	mov	r7, r0
 8006784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006786:	2b00      	cmp	r3, #0
 8006788:	d05d      	beq.n	8006846 <_dtoa_r+0x976>
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	4630      	mov	r0, r6
 800678e:	f000 fa21 	bl	8006bd4 <_Balloc>
 8006792:	4680      	mov	r8, r0
 8006794:	b928      	cbnz	r0, 80067a2 <_dtoa_r+0x8d2>
 8006796:	4b82      	ldr	r3, [pc, #520]	; (80069a0 <_dtoa_r+0xad0>)
 8006798:	4602      	mov	r2, r0
 800679a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800679e:	f7ff bbaf 	b.w	8005f00 <_dtoa_r+0x30>
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	3202      	adds	r2, #2
 80067a6:	0092      	lsls	r2, r2, #2
 80067a8:	f107 010c 	add.w	r1, r7, #12
 80067ac:	300c      	adds	r0, #12
 80067ae:	f000 fa03 	bl	8006bb8 <memcpy>
 80067b2:	2201      	movs	r2, #1
 80067b4:	4641      	mov	r1, r8
 80067b6:	4630      	mov	r0, r6
 80067b8:	f000 fc1e 	bl	8006ff8 <__lshift>
 80067bc:	9b01      	ldr	r3, [sp, #4]
 80067be:	3301      	adds	r3, #1
 80067c0:	9304      	str	r3, [sp, #16]
 80067c2:	9b01      	ldr	r3, [sp, #4]
 80067c4:	4453      	add	r3, sl
 80067c6:	9308      	str	r3, [sp, #32]
 80067c8:	9b02      	ldr	r3, [sp, #8]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	46b9      	mov	r9, r7
 80067d0:	9307      	str	r3, [sp, #28]
 80067d2:	4607      	mov	r7, r0
 80067d4:	9b04      	ldr	r3, [sp, #16]
 80067d6:	4621      	mov	r1, r4
 80067d8:	3b01      	subs	r3, #1
 80067da:	4628      	mov	r0, r5
 80067dc:	9302      	str	r3, [sp, #8]
 80067de:	f7ff fae9 	bl	8005db4 <quorem>
 80067e2:	4603      	mov	r3, r0
 80067e4:	3330      	adds	r3, #48	; 0x30
 80067e6:	9005      	str	r0, [sp, #20]
 80067e8:	4649      	mov	r1, r9
 80067ea:	4628      	mov	r0, r5
 80067ec:	9309      	str	r3, [sp, #36]	; 0x24
 80067ee:	f000 fc73 	bl	80070d8 <__mcmp>
 80067f2:	463a      	mov	r2, r7
 80067f4:	4682      	mov	sl, r0
 80067f6:	4621      	mov	r1, r4
 80067f8:	4630      	mov	r0, r6
 80067fa:	f000 fc89 	bl	8007110 <__mdiff>
 80067fe:	68c2      	ldr	r2, [r0, #12]
 8006800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006802:	4680      	mov	r8, r0
 8006804:	bb0a      	cbnz	r2, 800684a <_dtoa_r+0x97a>
 8006806:	4601      	mov	r1, r0
 8006808:	4628      	mov	r0, r5
 800680a:	f000 fc65 	bl	80070d8 <__mcmp>
 800680e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006810:	4602      	mov	r2, r0
 8006812:	4641      	mov	r1, r8
 8006814:	4630      	mov	r0, r6
 8006816:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800681a:	f000 fa1b 	bl	8006c54 <_Bfree>
 800681e:	9b06      	ldr	r3, [sp, #24]
 8006820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006822:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006826:	ea43 0102 	orr.w	r1, r3, r2
 800682a:	9b07      	ldr	r3, [sp, #28]
 800682c:	430b      	orrs	r3, r1
 800682e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006830:	d10d      	bne.n	800684e <_dtoa_r+0x97e>
 8006832:	2b39      	cmp	r3, #57	; 0x39
 8006834:	d029      	beq.n	800688a <_dtoa_r+0x9ba>
 8006836:	f1ba 0f00 	cmp.w	sl, #0
 800683a:	dd01      	ble.n	8006840 <_dtoa_r+0x970>
 800683c:	9b05      	ldr	r3, [sp, #20]
 800683e:	3331      	adds	r3, #49	; 0x31
 8006840:	9a02      	ldr	r2, [sp, #8]
 8006842:	7013      	strb	r3, [r2, #0]
 8006844:	e774      	b.n	8006730 <_dtoa_r+0x860>
 8006846:	4638      	mov	r0, r7
 8006848:	e7b8      	b.n	80067bc <_dtoa_r+0x8ec>
 800684a:	2201      	movs	r2, #1
 800684c:	e7e1      	b.n	8006812 <_dtoa_r+0x942>
 800684e:	f1ba 0f00 	cmp.w	sl, #0
 8006852:	db06      	blt.n	8006862 <_dtoa_r+0x992>
 8006854:	9906      	ldr	r1, [sp, #24]
 8006856:	ea41 0a0a 	orr.w	sl, r1, sl
 800685a:	9907      	ldr	r1, [sp, #28]
 800685c:	ea5a 0101 	orrs.w	r1, sl, r1
 8006860:	d120      	bne.n	80068a4 <_dtoa_r+0x9d4>
 8006862:	2a00      	cmp	r2, #0
 8006864:	ddec      	ble.n	8006840 <_dtoa_r+0x970>
 8006866:	4629      	mov	r1, r5
 8006868:	2201      	movs	r2, #1
 800686a:	4630      	mov	r0, r6
 800686c:	9304      	str	r3, [sp, #16]
 800686e:	f000 fbc3 	bl	8006ff8 <__lshift>
 8006872:	4621      	mov	r1, r4
 8006874:	4605      	mov	r5, r0
 8006876:	f000 fc2f 	bl	80070d8 <__mcmp>
 800687a:	2800      	cmp	r0, #0
 800687c:	9b04      	ldr	r3, [sp, #16]
 800687e:	dc02      	bgt.n	8006886 <_dtoa_r+0x9b6>
 8006880:	d1de      	bne.n	8006840 <_dtoa_r+0x970>
 8006882:	07da      	lsls	r2, r3, #31
 8006884:	d5dc      	bpl.n	8006840 <_dtoa_r+0x970>
 8006886:	2b39      	cmp	r3, #57	; 0x39
 8006888:	d1d8      	bne.n	800683c <_dtoa_r+0x96c>
 800688a:	9a02      	ldr	r2, [sp, #8]
 800688c:	2339      	movs	r3, #57	; 0x39
 800688e:	7013      	strb	r3, [r2, #0]
 8006890:	4643      	mov	r3, r8
 8006892:	4698      	mov	r8, r3
 8006894:	3b01      	subs	r3, #1
 8006896:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800689a:	2a39      	cmp	r2, #57	; 0x39
 800689c:	d051      	beq.n	8006942 <_dtoa_r+0xa72>
 800689e:	3201      	adds	r2, #1
 80068a0:	701a      	strb	r2, [r3, #0]
 80068a2:	e745      	b.n	8006730 <_dtoa_r+0x860>
 80068a4:	2a00      	cmp	r2, #0
 80068a6:	dd03      	ble.n	80068b0 <_dtoa_r+0x9e0>
 80068a8:	2b39      	cmp	r3, #57	; 0x39
 80068aa:	d0ee      	beq.n	800688a <_dtoa_r+0x9ba>
 80068ac:	3301      	adds	r3, #1
 80068ae:	e7c7      	b.n	8006840 <_dtoa_r+0x970>
 80068b0:	9a04      	ldr	r2, [sp, #16]
 80068b2:	9908      	ldr	r1, [sp, #32]
 80068b4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80068b8:	428a      	cmp	r2, r1
 80068ba:	d02b      	beq.n	8006914 <_dtoa_r+0xa44>
 80068bc:	4629      	mov	r1, r5
 80068be:	2300      	movs	r3, #0
 80068c0:	220a      	movs	r2, #10
 80068c2:	4630      	mov	r0, r6
 80068c4:	f000 f9e8 	bl	8006c98 <__multadd>
 80068c8:	45b9      	cmp	r9, r7
 80068ca:	4605      	mov	r5, r0
 80068cc:	f04f 0300 	mov.w	r3, #0
 80068d0:	f04f 020a 	mov.w	r2, #10
 80068d4:	4649      	mov	r1, r9
 80068d6:	4630      	mov	r0, r6
 80068d8:	d107      	bne.n	80068ea <_dtoa_r+0xa1a>
 80068da:	f000 f9dd 	bl	8006c98 <__multadd>
 80068de:	4681      	mov	r9, r0
 80068e0:	4607      	mov	r7, r0
 80068e2:	9b04      	ldr	r3, [sp, #16]
 80068e4:	3301      	adds	r3, #1
 80068e6:	9304      	str	r3, [sp, #16]
 80068e8:	e774      	b.n	80067d4 <_dtoa_r+0x904>
 80068ea:	f000 f9d5 	bl	8006c98 <__multadd>
 80068ee:	4639      	mov	r1, r7
 80068f0:	4681      	mov	r9, r0
 80068f2:	2300      	movs	r3, #0
 80068f4:	220a      	movs	r2, #10
 80068f6:	4630      	mov	r0, r6
 80068f8:	f000 f9ce 	bl	8006c98 <__multadd>
 80068fc:	4607      	mov	r7, r0
 80068fe:	e7f0      	b.n	80068e2 <_dtoa_r+0xa12>
 8006900:	f1ba 0f00 	cmp.w	sl, #0
 8006904:	9a01      	ldr	r2, [sp, #4]
 8006906:	bfcc      	ite	gt
 8006908:	46d0      	movgt	r8, sl
 800690a:	f04f 0801 	movle.w	r8, #1
 800690e:	4490      	add	r8, r2
 8006910:	f04f 0900 	mov.w	r9, #0
 8006914:	4629      	mov	r1, r5
 8006916:	2201      	movs	r2, #1
 8006918:	4630      	mov	r0, r6
 800691a:	9302      	str	r3, [sp, #8]
 800691c:	f000 fb6c 	bl	8006ff8 <__lshift>
 8006920:	4621      	mov	r1, r4
 8006922:	4605      	mov	r5, r0
 8006924:	f000 fbd8 	bl	80070d8 <__mcmp>
 8006928:	2800      	cmp	r0, #0
 800692a:	dcb1      	bgt.n	8006890 <_dtoa_r+0x9c0>
 800692c:	d102      	bne.n	8006934 <_dtoa_r+0xa64>
 800692e:	9b02      	ldr	r3, [sp, #8]
 8006930:	07db      	lsls	r3, r3, #31
 8006932:	d4ad      	bmi.n	8006890 <_dtoa_r+0x9c0>
 8006934:	4643      	mov	r3, r8
 8006936:	4698      	mov	r8, r3
 8006938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800693c:	2a30      	cmp	r2, #48	; 0x30
 800693e:	d0fa      	beq.n	8006936 <_dtoa_r+0xa66>
 8006940:	e6f6      	b.n	8006730 <_dtoa_r+0x860>
 8006942:	9a01      	ldr	r2, [sp, #4]
 8006944:	429a      	cmp	r2, r3
 8006946:	d1a4      	bne.n	8006892 <_dtoa_r+0x9c2>
 8006948:	f10b 0b01 	add.w	fp, fp, #1
 800694c:	2331      	movs	r3, #49	; 0x31
 800694e:	e778      	b.n	8006842 <_dtoa_r+0x972>
 8006950:	4b14      	ldr	r3, [pc, #80]	; (80069a4 <_dtoa_r+0xad4>)
 8006952:	f7ff bb27 	b.w	8005fa4 <_dtoa_r+0xd4>
 8006956:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006958:	2b00      	cmp	r3, #0
 800695a:	f47f ab03 	bne.w	8005f64 <_dtoa_r+0x94>
 800695e:	4b12      	ldr	r3, [pc, #72]	; (80069a8 <_dtoa_r+0xad8>)
 8006960:	f7ff bb20 	b.w	8005fa4 <_dtoa_r+0xd4>
 8006964:	f1ba 0f00 	cmp.w	sl, #0
 8006968:	dc03      	bgt.n	8006972 <_dtoa_r+0xaa2>
 800696a:	9b06      	ldr	r3, [sp, #24]
 800696c:	2b02      	cmp	r3, #2
 800696e:	f73f aec7 	bgt.w	8006700 <_dtoa_r+0x830>
 8006972:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006976:	4621      	mov	r1, r4
 8006978:	4628      	mov	r0, r5
 800697a:	f7ff fa1b 	bl	8005db4 <quorem>
 800697e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006982:	f808 3b01 	strb.w	r3, [r8], #1
 8006986:	9a01      	ldr	r2, [sp, #4]
 8006988:	eba8 0202 	sub.w	r2, r8, r2
 800698c:	4592      	cmp	sl, r2
 800698e:	ddb7      	ble.n	8006900 <_dtoa_r+0xa30>
 8006990:	4629      	mov	r1, r5
 8006992:	2300      	movs	r3, #0
 8006994:	220a      	movs	r2, #10
 8006996:	4630      	mov	r0, r6
 8006998:	f000 f97e 	bl	8006c98 <__multadd>
 800699c:	4605      	mov	r5, r0
 800699e:	e7ea      	b.n	8006976 <_dtoa_r+0xaa6>
 80069a0:	08007f33 	.word	0x08007f33
 80069a4:	08007e90 	.word	0x08007e90
 80069a8:	08007eb4 	.word	0x08007eb4

080069ac <std>:
 80069ac:	2300      	movs	r3, #0
 80069ae:	b510      	push	{r4, lr}
 80069b0:	4604      	mov	r4, r0
 80069b2:	e9c0 3300 	strd	r3, r3, [r0]
 80069b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069ba:	6083      	str	r3, [r0, #8]
 80069bc:	8181      	strh	r1, [r0, #12]
 80069be:	6643      	str	r3, [r0, #100]	; 0x64
 80069c0:	81c2      	strh	r2, [r0, #14]
 80069c2:	6183      	str	r3, [r0, #24]
 80069c4:	4619      	mov	r1, r3
 80069c6:	2208      	movs	r2, #8
 80069c8:	305c      	adds	r0, #92	; 0x5c
 80069ca:	f7fe fd8f 	bl	80054ec <memset>
 80069ce:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <std+0x38>)
 80069d0:	6263      	str	r3, [r4, #36]	; 0x24
 80069d2:	4b05      	ldr	r3, [pc, #20]	; (80069e8 <std+0x3c>)
 80069d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80069d6:	4b05      	ldr	r3, [pc, #20]	; (80069ec <std+0x40>)
 80069d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069da:	4b05      	ldr	r3, [pc, #20]	; (80069f0 <std+0x44>)
 80069dc:	6224      	str	r4, [r4, #32]
 80069de:	6323      	str	r3, [r4, #48]	; 0x30
 80069e0:	bd10      	pop	{r4, pc}
 80069e2:	bf00      	nop
 80069e4:	0800779d 	.word	0x0800779d
 80069e8:	080077bf 	.word	0x080077bf
 80069ec:	080077f7 	.word	0x080077f7
 80069f0:	0800781b 	.word	0x0800781b

080069f4 <_cleanup_r>:
 80069f4:	4901      	ldr	r1, [pc, #4]	; (80069fc <_cleanup_r+0x8>)
 80069f6:	f000 b8af 	b.w	8006b58 <_fwalk_reent>
 80069fa:	bf00      	nop
 80069fc:	08007b31 	.word	0x08007b31

08006a00 <__sfmoreglue>:
 8006a00:	b570      	push	{r4, r5, r6, lr}
 8006a02:	2268      	movs	r2, #104	; 0x68
 8006a04:	1e4d      	subs	r5, r1, #1
 8006a06:	4355      	muls	r5, r2
 8006a08:	460e      	mov	r6, r1
 8006a0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a0e:	f000 fce7 	bl	80073e0 <_malloc_r>
 8006a12:	4604      	mov	r4, r0
 8006a14:	b140      	cbz	r0, 8006a28 <__sfmoreglue+0x28>
 8006a16:	2100      	movs	r1, #0
 8006a18:	e9c0 1600 	strd	r1, r6, [r0]
 8006a1c:	300c      	adds	r0, #12
 8006a1e:	60a0      	str	r0, [r4, #8]
 8006a20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a24:	f7fe fd62 	bl	80054ec <memset>
 8006a28:	4620      	mov	r0, r4
 8006a2a:	bd70      	pop	{r4, r5, r6, pc}

08006a2c <__sfp_lock_acquire>:
 8006a2c:	4801      	ldr	r0, [pc, #4]	; (8006a34 <__sfp_lock_acquire+0x8>)
 8006a2e:	f000 b8b8 	b.w	8006ba2 <__retarget_lock_acquire_recursive>
 8006a32:	bf00      	nop
 8006a34:	24000299 	.word	0x24000299

08006a38 <__sfp_lock_release>:
 8006a38:	4801      	ldr	r0, [pc, #4]	; (8006a40 <__sfp_lock_release+0x8>)
 8006a3a:	f000 b8b3 	b.w	8006ba4 <__retarget_lock_release_recursive>
 8006a3e:	bf00      	nop
 8006a40:	24000299 	.word	0x24000299

08006a44 <__sinit_lock_acquire>:
 8006a44:	4801      	ldr	r0, [pc, #4]	; (8006a4c <__sinit_lock_acquire+0x8>)
 8006a46:	f000 b8ac 	b.w	8006ba2 <__retarget_lock_acquire_recursive>
 8006a4a:	bf00      	nop
 8006a4c:	2400029a 	.word	0x2400029a

08006a50 <__sinit_lock_release>:
 8006a50:	4801      	ldr	r0, [pc, #4]	; (8006a58 <__sinit_lock_release+0x8>)
 8006a52:	f000 b8a7 	b.w	8006ba4 <__retarget_lock_release_recursive>
 8006a56:	bf00      	nop
 8006a58:	2400029a 	.word	0x2400029a

08006a5c <__sinit>:
 8006a5c:	b510      	push	{r4, lr}
 8006a5e:	4604      	mov	r4, r0
 8006a60:	f7ff fff0 	bl	8006a44 <__sinit_lock_acquire>
 8006a64:	69a3      	ldr	r3, [r4, #24]
 8006a66:	b11b      	cbz	r3, 8006a70 <__sinit+0x14>
 8006a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a6c:	f7ff bff0 	b.w	8006a50 <__sinit_lock_release>
 8006a70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a74:	6523      	str	r3, [r4, #80]	; 0x50
 8006a76:	4b13      	ldr	r3, [pc, #76]	; (8006ac4 <__sinit+0x68>)
 8006a78:	4a13      	ldr	r2, [pc, #76]	; (8006ac8 <__sinit+0x6c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a7e:	42a3      	cmp	r3, r4
 8006a80:	bf04      	itt	eq
 8006a82:	2301      	moveq	r3, #1
 8006a84:	61a3      	streq	r3, [r4, #24]
 8006a86:	4620      	mov	r0, r4
 8006a88:	f000 f820 	bl	8006acc <__sfp>
 8006a8c:	6060      	str	r0, [r4, #4]
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f000 f81c 	bl	8006acc <__sfp>
 8006a94:	60a0      	str	r0, [r4, #8]
 8006a96:	4620      	mov	r0, r4
 8006a98:	f000 f818 	bl	8006acc <__sfp>
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	60e0      	str	r0, [r4, #12]
 8006aa0:	2104      	movs	r1, #4
 8006aa2:	6860      	ldr	r0, [r4, #4]
 8006aa4:	f7ff ff82 	bl	80069ac <std>
 8006aa8:	68a0      	ldr	r0, [r4, #8]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	2109      	movs	r1, #9
 8006aae:	f7ff ff7d 	bl	80069ac <std>
 8006ab2:	68e0      	ldr	r0, [r4, #12]
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	2112      	movs	r1, #18
 8006ab8:	f7ff ff78 	bl	80069ac <std>
 8006abc:	2301      	movs	r3, #1
 8006abe:	61a3      	str	r3, [r4, #24]
 8006ac0:	e7d2      	b.n	8006a68 <__sinit+0xc>
 8006ac2:	bf00      	nop
 8006ac4:	08007e7c 	.word	0x08007e7c
 8006ac8:	080069f5 	.word	0x080069f5

08006acc <__sfp>:
 8006acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ace:	4607      	mov	r7, r0
 8006ad0:	f7ff ffac 	bl	8006a2c <__sfp_lock_acquire>
 8006ad4:	4b1e      	ldr	r3, [pc, #120]	; (8006b50 <__sfp+0x84>)
 8006ad6:	681e      	ldr	r6, [r3, #0]
 8006ad8:	69b3      	ldr	r3, [r6, #24]
 8006ada:	b913      	cbnz	r3, 8006ae2 <__sfp+0x16>
 8006adc:	4630      	mov	r0, r6
 8006ade:	f7ff ffbd 	bl	8006a5c <__sinit>
 8006ae2:	3648      	adds	r6, #72	; 0x48
 8006ae4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	d503      	bpl.n	8006af4 <__sfp+0x28>
 8006aec:	6833      	ldr	r3, [r6, #0]
 8006aee:	b30b      	cbz	r3, 8006b34 <__sfp+0x68>
 8006af0:	6836      	ldr	r6, [r6, #0]
 8006af2:	e7f7      	b.n	8006ae4 <__sfp+0x18>
 8006af4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006af8:	b9d5      	cbnz	r5, 8006b30 <__sfp+0x64>
 8006afa:	4b16      	ldr	r3, [pc, #88]	; (8006b54 <__sfp+0x88>)
 8006afc:	60e3      	str	r3, [r4, #12]
 8006afe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b02:	6665      	str	r5, [r4, #100]	; 0x64
 8006b04:	f000 f84c 	bl	8006ba0 <__retarget_lock_init_recursive>
 8006b08:	f7ff ff96 	bl	8006a38 <__sfp_lock_release>
 8006b0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b14:	6025      	str	r5, [r4, #0]
 8006b16:	61a5      	str	r5, [r4, #24]
 8006b18:	2208      	movs	r2, #8
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b20:	f7fe fce4 	bl	80054ec <memset>
 8006b24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b30:	3468      	adds	r4, #104	; 0x68
 8006b32:	e7d9      	b.n	8006ae8 <__sfp+0x1c>
 8006b34:	2104      	movs	r1, #4
 8006b36:	4638      	mov	r0, r7
 8006b38:	f7ff ff62 	bl	8006a00 <__sfmoreglue>
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	6030      	str	r0, [r6, #0]
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d1d5      	bne.n	8006af0 <__sfp+0x24>
 8006b44:	f7ff ff78 	bl	8006a38 <__sfp_lock_release>
 8006b48:	230c      	movs	r3, #12
 8006b4a:	603b      	str	r3, [r7, #0]
 8006b4c:	e7ee      	b.n	8006b2c <__sfp+0x60>
 8006b4e:	bf00      	nop
 8006b50:	08007e7c 	.word	0x08007e7c
 8006b54:	ffff0001 	.word	0xffff0001

08006b58 <_fwalk_reent>:
 8006b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	4688      	mov	r8, r1
 8006b60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b64:	2700      	movs	r7, #0
 8006b66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b6a:	f1b9 0901 	subs.w	r9, r9, #1
 8006b6e:	d505      	bpl.n	8006b7c <_fwalk_reent+0x24>
 8006b70:	6824      	ldr	r4, [r4, #0]
 8006b72:	2c00      	cmp	r4, #0
 8006b74:	d1f7      	bne.n	8006b66 <_fwalk_reent+0xe>
 8006b76:	4638      	mov	r0, r7
 8006b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b7c:	89ab      	ldrh	r3, [r5, #12]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d907      	bls.n	8006b92 <_fwalk_reent+0x3a>
 8006b82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b86:	3301      	adds	r3, #1
 8006b88:	d003      	beq.n	8006b92 <_fwalk_reent+0x3a>
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	47c0      	blx	r8
 8006b90:	4307      	orrs	r7, r0
 8006b92:	3568      	adds	r5, #104	; 0x68
 8006b94:	e7e9      	b.n	8006b6a <_fwalk_reent+0x12>
	...

08006b98 <_localeconv_r>:
 8006b98:	4800      	ldr	r0, [pc, #0]	; (8006b9c <_localeconv_r+0x4>)
 8006b9a:	4770      	bx	lr
 8006b9c:	24000164 	.word	0x24000164

08006ba0 <__retarget_lock_init_recursive>:
 8006ba0:	4770      	bx	lr

08006ba2 <__retarget_lock_acquire_recursive>:
 8006ba2:	4770      	bx	lr

08006ba4 <__retarget_lock_release_recursive>:
 8006ba4:	4770      	bx	lr
	...

08006ba8 <malloc>:
 8006ba8:	4b02      	ldr	r3, [pc, #8]	; (8006bb4 <malloc+0xc>)
 8006baa:	4601      	mov	r1, r0
 8006bac:	6818      	ldr	r0, [r3, #0]
 8006bae:	f000 bc17 	b.w	80073e0 <_malloc_r>
 8006bb2:	bf00      	nop
 8006bb4:	24000010 	.word	0x24000010

08006bb8 <memcpy>:
 8006bb8:	440a      	add	r2, r1
 8006bba:	4291      	cmp	r1, r2
 8006bbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bc0:	d100      	bne.n	8006bc4 <memcpy+0xc>
 8006bc2:	4770      	bx	lr
 8006bc4:	b510      	push	{r4, lr}
 8006bc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bce:	4291      	cmp	r1, r2
 8006bd0:	d1f9      	bne.n	8006bc6 <memcpy+0xe>
 8006bd2:	bd10      	pop	{r4, pc}

08006bd4 <_Balloc>:
 8006bd4:	b570      	push	{r4, r5, r6, lr}
 8006bd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006bd8:	4604      	mov	r4, r0
 8006bda:	460d      	mov	r5, r1
 8006bdc:	b976      	cbnz	r6, 8006bfc <_Balloc+0x28>
 8006bde:	2010      	movs	r0, #16
 8006be0:	f7ff ffe2 	bl	8006ba8 <malloc>
 8006be4:	4602      	mov	r2, r0
 8006be6:	6260      	str	r0, [r4, #36]	; 0x24
 8006be8:	b920      	cbnz	r0, 8006bf4 <_Balloc+0x20>
 8006bea:	4b18      	ldr	r3, [pc, #96]	; (8006c4c <_Balloc+0x78>)
 8006bec:	4818      	ldr	r0, [pc, #96]	; (8006c50 <_Balloc+0x7c>)
 8006bee:	2166      	movs	r1, #102	; 0x66
 8006bf0:	f000 feea 	bl	80079c8 <__assert_func>
 8006bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bf8:	6006      	str	r6, [r0, #0]
 8006bfa:	60c6      	str	r6, [r0, #12]
 8006bfc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006bfe:	68f3      	ldr	r3, [r6, #12]
 8006c00:	b183      	cbz	r3, 8006c24 <_Balloc+0x50>
 8006c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c0a:	b9b8      	cbnz	r0, 8006c3c <_Balloc+0x68>
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	fa01 f605 	lsl.w	r6, r1, r5
 8006c12:	1d72      	adds	r2, r6, #5
 8006c14:	0092      	lsls	r2, r2, #2
 8006c16:	4620      	mov	r0, r4
 8006c18:	f000 fb60 	bl	80072dc <_calloc_r>
 8006c1c:	b160      	cbz	r0, 8006c38 <_Balloc+0x64>
 8006c1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c22:	e00e      	b.n	8006c42 <_Balloc+0x6e>
 8006c24:	2221      	movs	r2, #33	; 0x21
 8006c26:	2104      	movs	r1, #4
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f000 fb57 	bl	80072dc <_calloc_r>
 8006c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c30:	60f0      	str	r0, [r6, #12]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e4      	bne.n	8006c02 <_Balloc+0x2e>
 8006c38:	2000      	movs	r0, #0
 8006c3a:	bd70      	pop	{r4, r5, r6, pc}
 8006c3c:	6802      	ldr	r2, [r0, #0]
 8006c3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c42:	2300      	movs	r3, #0
 8006c44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c48:	e7f7      	b.n	8006c3a <_Balloc+0x66>
 8006c4a:	bf00      	nop
 8006c4c:	08007ec1 	.word	0x08007ec1
 8006c50:	08007fa4 	.word	0x08007fa4

08006c54 <_Bfree>:
 8006c54:	b570      	push	{r4, r5, r6, lr}
 8006c56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c58:	4605      	mov	r5, r0
 8006c5a:	460c      	mov	r4, r1
 8006c5c:	b976      	cbnz	r6, 8006c7c <_Bfree+0x28>
 8006c5e:	2010      	movs	r0, #16
 8006c60:	f7ff ffa2 	bl	8006ba8 <malloc>
 8006c64:	4602      	mov	r2, r0
 8006c66:	6268      	str	r0, [r5, #36]	; 0x24
 8006c68:	b920      	cbnz	r0, 8006c74 <_Bfree+0x20>
 8006c6a:	4b09      	ldr	r3, [pc, #36]	; (8006c90 <_Bfree+0x3c>)
 8006c6c:	4809      	ldr	r0, [pc, #36]	; (8006c94 <_Bfree+0x40>)
 8006c6e:	218a      	movs	r1, #138	; 0x8a
 8006c70:	f000 feaa 	bl	80079c8 <__assert_func>
 8006c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c78:	6006      	str	r6, [r0, #0]
 8006c7a:	60c6      	str	r6, [r0, #12]
 8006c7c:	b13c      	cbz	r4, 8006c8e <_Bfree+0x3a>
 8006c7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c80:	6862      	ldr	r2, [r4, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c88:	6021      	str	r1, [r4, #0]
 8006c8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c8e:	bd70      	pop	{r4, r5, r6, pc}
 8006c90:	08007ec1 	.word	0x08007ec1
 8006c94:	08007fa4 	.word	0x08007fa4

08006c98 <__multadd>:
 8006c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c9c:	690d      	ldr	r5, [r1, #16]
 8006c9e:	4607      	mov	r7, r0
 8006ca0:	460c      	mov	r4, r1
 8006ca2:	461e      	mov	r6, r3
 8006ca4:	f101 0c14 	add.w	ip, r1, #20
 8006ca8:	2000      	movs	r0, #0
 8006caa:	f8dc 3000 	ldr.w	r3, [ip]
 8006cae:	b299      	uxth	r1, r3
 8006cb0:	fb02 6101 	mla	r1, r2, r1, r6
 8006cb4:	0c1e      	lsrs	r6, r3, #16
 8006cb6:	0c0b      	lsrs	r3, r1, #16
 8006cb8:	fb02 3306 	mla	r3, r2, r6, r3
 8006cbc:	b289      	uxth	r1, r1
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006cc4:	4285      	cmp	r5, r0
 8006cc6:	f84c 1b04 	str.w	r1, [ip], #4
 8006cca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006cce:	dcec      	bgt.n	8006caa <__multadd+0x12>
 8006cd0:	b30e      	cbz	r6, 8006d16 <__multadd+0x7e>
 8006cd2:	68a3      	ldr	r3, [r4, #8]
 8006cd4:	42ab      	cmp	r3, r5
 8006cd6:	dc19      	bgt.n	8006d0c <__multadd+0x74>
 8006cd8:	6861      	ldr	r1, [r4, #4]
 8006cda:	4638      	mov	r0, r7
 8006cdc:	3101      	adds	r1, #1
 8006cde:	f7ff ff79 	bl	8006bd4 <_Balloc>
 8006ce2:	4680      	mov	r8, r0
 8006ce4:	b928      	cbnz	r0, 8006cf2 <__multadd+0x5a>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	4b0c      	ldr	r3, [pc, #48]	; (8006d1c <__multadd+0x84>)
 8006cea:	480d      	ldr	r0, [pc, #52]	; (8006d20 <__multadd+0x88>)
 8006cec:	21b5      	movs	r1, #181	; 0xb5
 8006cee:	f000 fe6b 	bl	80079c8 <__assert_func>
 8006cf2:	6922      	ldr	r2, [r4, #16]
 8006cf4:	3202      	adds	r2, #2
 8006cf6:	f104 010c 	add.w	r1, r4, #12
 8006cfa:	0092      	lsls	r2, r2, #2
 8006cfc:	300c      	adds	r0, #12
 8006cfe:	f7ff ff5b 	bl	8006bb8 <memcpy>
 8006d02:	4621      	mov	r1, r4
 8006d04:	4638      	mov	r0, r7
 8006d06:	f7ff ffa5 	bl	8006c54 <_Bfree>
 8006d0a:	4644      	mov	r4, r8
 8006d0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d10:	3501      	adds	r5, #1
 8006d12:	615e      	str	r6, [r3, #20]
 8006d14:	6125      	str	r5, [r4, #16]
 8006d16:	4620      	mov	r0, r4
 8006d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d1c:	08007f33 	.word	0x08007f33
 8006d20:	08007fa4 	.word	0x08007fa4

08006d24 <__hi0bits>:
 8006d24:	0c03      	lsrs	r3, r0, #16
 8006d26:	041b      	lsls	r3, r3, #16
 8006d28:	b9d3      	cbnz	r3, 8006d60 <__hi0bits+0x3c>
 8006d2a:	0400      	lsls	r0, r0, #16
 8006d2c:	2310      	movs	r3, #16
 8006d2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006d32:	bf04      	itt	eq
 8006d34:	0200      	lsleq	r0, r0, #8
 8006d36:	3308      	addeq	r3, #8
 8006d38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006d3c:	bf04      	itt	eq
 8006d3e:	0100      	lsleq	r0, r0, #4
 8006d40:	3304      	addeq	r3, #4
 8006d42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006d46:	bf04      	itt	eq
 8006d48:	0080      	lsleq	r0, r0, #2
 8006d4a:	3302      	addeq	r3, #2
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	db05      	blt.n	8006d5c <__hi0bits+0x38>
 8006d50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006d54:	f103 0301 	add.w	r3, r3, #1
 8006d58:	bf08      	it	eq
 8006d5a:	2320      	moveq	r3, #32
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	4770      	bx	lr
 8006d60:	2300      	movs	r3, #0
 8006d62:	e7e4      	b.n	8006d2e <__hi0bits+0xa>

08006d64 <__lo0bits>:
 8006d64:	6803      	ldr	r3, [r0, #0]
 8006d66:	f013 0207 	ands.w	r2, r3, #7
 8006d6a:	4601      	mov	r1, r0
 8006d6c:	d00b      	beq.n	8006d86 <__lo0bits+0x22>
 8006d6e:	07da      	lsls	r2, r3, #31
 8006d70:	d423      	bmi.n	8006dba <__lo0bits+0x56>
 8006d72:	0798      	lsls	r0, r3, #30
 8006d74:	bf49      	itett	mi
 8006d76:	085b      	lsrmi	r3, r3, #1
 8006d78:	089b      	lsrpl	r3, r3, #2
 8006d7a:	2001      	movmi	r0, #1
 8006d7c:	600b      	strmi	r3, [r1, #0]
 8006d7e:	bf5c      	itt	pl
 8006d80:	600b      	strpl	r3, [r1, #0]
 8006d82:	2002      	movpl	r0, #2
 8006d84:	4770      	bx	lr
 8006d86:	b298      	uxth	r0, r3
 8006d88:	b9a8      	cbnz	r0, 8006db6 <__lo0bits+0x52>
 8006d8a:	0c1b      	lsrs	r3, r3, #16
 8006d8c:	2010      	movs	r0, #16
 8006d8e:	b2da      	uxtb	r2, r3
 8006d90:	b90a      	cbnz	r2, 8006d96 <__lo0bits+0x32>
 8006d92:	3008      	adds	r0, #8
 8006d94:	0a1b      	lsrs	r3, r3, #8
 8006d96:	071a      	lsls	r2, r3, #28
 8006d98:	bf04      	itt	eq
 8006d9a:	091b      	lsreq	r3, r3, #4
 8006d9c:	3004      	addeq	r0, #4
 8006d9e:	079a      	lsls	r2, r3, #30
 8006da0:	bf04      	itt	eq
 8006da2:	089b      	lsreq	r3, r3, #2
 8006da4:	3002      	addeq	r0, #2
 8006da6:	07da      	lsls	r2, r3, #31
 8006da8:	d403      	bmi.n	8006db2 <__lo0bits+0x4e>
 8006daa:	085b      	lsrs	r3, r3, #1
 8006dac:	f100 0001 	add.w	r0, r0, #1
 8006db0:	d005      	beq.n	8006dbe <__lo0bits+0x5a>
 8006db2:	600b      	str	r3, [r1, #0]
 8006db4:	4770      	bx	lr
 8006db6:	4610      	mov	r0, r2
 8006db8:	e7e9      	b.n	8006d8e <__lo0bits+0x2a>
 8006dba:	2000      	movs	r0, #0
 8006dbc:	4770      	bx	lr
 8006dbe:	2020      	movs	r0, #32
 8006dc0:	4770      	bx	lr
	...

08006dc4 <__i2b>:
 8006dc4:	b510      	push	{r4, lr}
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	2101      	movs	r1, #1
 8006dca:	f7ff ff03 	bl	8006bd4 <_Balloc>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	b928      	cbnz	r0, 8006dde <__i2b+0x1a>
 8006dd2:	4b05      	ldr	r3, [pc, #20]	; (8006de8 <__i2b+0x24>)
 8006dd4:	4805      	ldr	r0, [pc, #20]	; (8006dec <__i2b+0x28>)
 8006dd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006dda:	f000 fdf5 	bl	80079c8 <__assert_func>
 8006dde:	2301      	movs	r3, #1
 8006de0:	6144      	str	r4, [r0, #20]
 8006de2:	6103      	str	r3, [r0, #16]
 8006de4:	bd10      	pop	{r4, pc}
 8006de6:	bf00      	nop
 8006de8:	08007f33 	.word	0x08007f33
 8006dec:	08007fa4 	.word	0x08007fa4

08006df0 <__multiply>:
 8006df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df4:	4691      	mov	r9, r2
 8006df6:	690a      	ldr	r2, [r1, #16]
 8006df8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	bfb8      	it	lt
 8006e00:	460b      	movlt	r3, r1
 8006e02:	460c      	mov	r4, r1
 8006e04:	bfbc      	itt	lt
 8006e06:	464c      	movlt	r4, r9
 8006e08:	4699      	movlt	r9, r3
 8006e0a:	6927      	ldr	r7, [r4, #16]
 8006e0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006e10:	68a3      	ldr	r3, [r4, #8]
 8006e12:	6861      	ldr	r1, [r4, #4]
 8006e14:	eb07 060a 	add.w	r6, r7, sl
 8006e18:	42b3      	cmp	r3, r6
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	bfb8      	it	lt
 8006e1e:	3101      	addlt	r1, #1
 8006e20:	f7ff fed8 	bl	8006bd4 <_Balloc>
 8006e24:	b930      	cbnz	r0, 8006e34 <__multiply+0x44>
 8006e26:	4602      	mov	r2, r0
 8006e28:	4b44      	ldr	r3, [pc, #272]	; (8006f3c <__multiply+0x14c>)
 8006e2a:	4845      	ldr	r0, [pc, #276]	; (8006f40 <__multiply+0x150>)
 8006e2c:	f240 115d 	movw	r1, #349	; 0x15d
 8006e30:	f000 fdca 	bl	80079c8 <__assert_func>
 8006e34:	f100 0514 	add.w	r5, r0, #20
 8006e38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e3c:	462b      	mov	r3, r5
 8006e3e:	2200      	movs	r2, #0
 8006e40:	4543      	cmp	r3, r8
 8006e42:	d321      	bcc.n	8006e88 <__multiply+0x98>
 8006e44:	f104 0314 	add.w	r3, r4, #20
 8006e48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006e4c:	f109 0314 	add.w	r3, r9, #20
 8006e50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006e54:	9202      	str	r2, [sp, #8]
 8006e56:	1b3a      	subs	r2, r7, r4
 8006e58:	3a15      	subs	r2, #21
 8006e5a:	f022 0203 	bic.w	r2, r2, #3
 8006e5e:	3204      	adds	r2, #4
 8006e60:	f104 0115 	add.w	r1, r4, #21
 8006e64:	428f      	cmp	r7, r1
 8006e66:	bf38      	it	cc
 8006e68:	2204      	movcc	r2, #4
 8006e6a:	9201      	str	r2, [sp, #4]
 8006e6c:	9a02      	ldr	r2, [sp, #8]
 8006e6e:	9303      	str	r3, [sp, #12]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d80c      	bhi.n	8006e8e <__multiply+0x9e>
 8006e74:	2e00      	cmp	r6, #0
 8006e76:	dd03      	ble.n	8006e80 <__multiply+0x90>
 8006e78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d05a      	beq.n	8006f36 <__multiply+0x146>
 8006e80:	6106      	str	r6, [r0, #16]
 8006e82:	b005      	add	sp, #20
 8006e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e88:	f843 2b04 	str.w	r2, [r3], #4
 8006e8c:	e7d8      	b.n	8006e40 <__multiply+0x50>
 8006e8e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e92:	f1ba 0f00 	cmp.w	sl, #0
 8006e96:	d024      	beq.n	8006ee2 <__multiply+0xf2>
 8006e98:	f104 0e14 	add.w	lr, r4, #20
 8006e9c:	46a9      	mov	r9, r5
 8006e9e:	f04f 0c00 	mov.w	ip, #0
 8006ea2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006ea6:	f8d9 1000 	ldr.w	r1, [r9]
 8006eaa:	fa1f fb82 	uxth.w	fp, r2
 8006eae:	b289      	uxth	r1, r1
 8006eb0:	fb0a 110b 	mla	r1, sl, fp, r1
 8006eb4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006eb8:	f8d9 2000 	ldr.w	r2, [r9]
 8006ebc:	4461      	add	r1, ip
 8006ebe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ec2:	fb0a c20b 	mla	r2, sl, fp, ip
 8006ec6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006eca:	b289      	uxth	r1, r1
 8006ecc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ed0:	4577      	cmp	r7, lr
 8006ed2:	f849 1b04 	str.w	r1, [r9], #4
 8006ed6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006eda:	d8e2      	bhi.n	8006ea2 <__multiply+0xb2>
 8006edc:	9a01      	ldr	r2, [sp, #4]
 8006ede:	f845 c002 	str.w	ip, [r5, r2]
 8006ee2:	9a03      	ldr	r2, [sp, #12]
 8006ee4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ee8:	3304      	adds	r3, #4
 8006eea:	f1b9 0f00 	cmp.w	r9, #0
 8006eee:	d020      	beq.n	8006f32 <__multiply+0x142>
 8006ef0:	6829      	ldr	r1, [r5, #0]
 8006ef2:	f104 0c14 	add.w	ip, r4, #20
 8006ef6:	46ae      	mov	lr, r5
 8006ef8:	f04f 0a00 	mov.w	sl, #0
 8006efc:	f8bc b000 	ldrh.w	fp, [ip]
 8006f00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006f04:	fb09 220b 	mla	r2, r9, fp, r2
 8006f08:	4492      	add	sl, r2
 8006f0a:	b289      	uxth	r1, r1
 8006f0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006f10:	f84e 1b04 	str.w	r1, [lr], #4
 8006f14:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006f18:	f8be 1000 	ldrh.w	r1, [lr]
 8006f1c:	0c12      	lsrs	r2, r2, #16
 8006f1e:	fb09 1102 	mla	r1, r9, r2, r1
 8006f22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006f26:	4567      	cmp	r7, ip
 8006f28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f2c:	d8e6      	bhi.n	8006efc <__multiply+0x10c>
 8006f2e:	9a01      	ldr	r2, [sp, #4]
 8006f30:	50a9      	str	r1, [r5, r2]
 8006f32:	3504      	adds	r5, #4
 8006f34:	e79a      	b.n	8006e6c <__multiply+0x7c>
 8006f36:	3e01      	subs	r6, #1
 8006f38:	e79c      	b.n	8006e74 <__multiply+0x84>
 8006f3a:	bf00      	nop
 8006f3c:	08007f33 	.word	0x08007f33
 8006f40:	08007fa4 	.word	0x08007fa4

08006f44 <__pow5mult>:
 8006f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f48:	4615      	mov	r5, r2
 8006f4a:	f012 0203 	ands.w	r2, r2, #3
 8006f4e:	4606      	mov	r6, r0
 8006f50:	460f      	mov	r7, r1
 8006f52:	d007      	beq.n	8006f64 <__pow5mult+0x20>
 8006f54:	4c25      	ldr	r4, [pc, #148]	; (8006fec <__pow5mult+0xa8>)
 8006f56:	3a01      	subs	r2, #1
 8006f58:	2300      	movs	r3, #0
 8006f5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f5e:	f7ff fe9b 	bl	8006c98 <__multadd>
 8006f62:	4607      	mov	r7, r0
 8006f64:	10ad      	asrs	r5, r5, #2
 8006f66:	d03d      	beq.n	8006fe4 <__pow5mult+0xa0>
 8006f68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f6a:	b97c      	cbnz	r4, 8006f8c <__pow5mult+0x48>
 8006f6c:	2010      	movs	r0, #16
 8006f6e:	f7ff fe1b 	bl	8006ba8 <malloc>
 8006f72:	4602      	mov	r2, r0
 8006f74:	6270      	str	r0, [r6, #36]	; 0x24
 8006f76:	b928      	cbnz	r0, 8006f84 <__pow5mult+0x40>
 8006f78:	4b1d      	ldr	r3, [pc, #116]	; (8006ff0 <__pow5mult+0xac>)
 8006f7a:	481e      	ldr	r0, [pc, #120]	; (8006ff4 <__pow5mult+0xb0>)
 8006f7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006f80:	f000 fd22 	bl	80079c8 <__assert_func>
 8006f84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f88:	6004      	str	r4, [r0, #0]
 8006f8a:	60c4      	str	r4, [r0, #12]
 8006f8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f94:	b94c      	cbnz	r4, 8006faa <__pow5mult+0x66>
 8006f96:	f240 2171 	movw	r1, #625	; 0x271
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	f7ff ff12 	bl	8006dc4 <__i2b>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f8c8 0008 	str.w	r0, [r8, #8]
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	6003      	str	r3, [r0, #0]
 8006faa:	f04f 0900 	mov.w	r9, #0
 8006fae:	07eb      	lsls	r3, r5, #31
 8006fb0:	d50a      	bpl.n	8006fc8 <__pow5mult+0x84>
 8006fb2:	4639      	mov	r1, r7
 8006fb4:	4622      	mov	r2, r4
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	f7ff ff1a 	bl	8006df0 <__multiply>
 8006fbc:	4639      	mov	r1, r7
 8006fbe:	4680      	mov	r8, r0
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	f7ff fe47 	bl	8006c54 <_Bfree>
 8006fc6:	4647      	mov	r7, r8
 8006fc8:	106d      	asrs	r5, r5, #1
 8006fca:	d00b      	beq.n	8006fe4 <__pow5mult+0xa0>
 8006fcc:	6820      	ldr	r0, [r4, #0]
 8006fce:	b938      	cbnz	r0, 8006fe0 <__pow5mult+0x9c>
 8006fd0:	4622      	mov	r2, r4
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	f7ff ff0b 	bl	8006df0 <__multiply>
 8006fda:	6020      	str	r0, [r4, #0]
 8006fdc:	f8c0 9000 	str.w	r9, [r0]
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	e7e4      	b.n	8006fae <__pow5mult+0x6a>
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fea:	bf00      	nop
 8006fec:	080080f0 	.word	0x080080f0
 8006ff0:	08007ec1 	.word	0x08007ec1
 8006ff4:	08007fa4 	.word	0x08007fa4

08006ff8 <__lshift>:
 8006ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ffc:	460c      	mov	r4, r1
 8006ffe:	6849      	ldr	r1, [r1, #4]
 8007000:	6923      	ldr	r3, [r4, #16]
 8007002:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007006:	68a3      	ldr	r3, [r4, #8]
 8007008:	4607      	mov	r7, r0
 800700a:	4691      	mov	r9, r2
 800700c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007010:	f108 0601 	add.w	r6, r8, #1
 8007014:	42b3      	cmp	r3, r6
 8007016:	db0b      	blt.n	8007030 <__lshift+0x38>
 8007018:	4638      	mov	r0, r7
 800701a:	f7ff fddb 	bl	8006bd4 <_Balloc>
 800701e:	4605      	mov	r5, r0
 8007020:	b948      	cbnz	r0, 8007036 <__lshift+0x3e>
 8007022:	4602      	mov	r2, r0
 8007024:	4b2a      	ldr	r3, [pc, #168]	; (80070d0 <__lshift+0xd8>)
 8007026:	482b      	ldr	r0, [pc, #172]	; (80070d4 <__lshift+0xdc>)
 8007028:	f240 11d9 	movw	r1, #473	; 0x1d9
 800702c:	f000 fccc 	bl	80079c8 <__assert_func>
 8007030:	3101      	adds	r1, #1
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	e7ee      	b.n	8007014 <__lshift+0x1c>
 8007036:	2300      	movs	r3, #0
 8007038:	f100 0114 	add.w	r1, r0, #20
 800703c:	f100 0210 	add.w	r2, r0, #16
 8007040:	4618      	mov	r0, r3
 8007042:	4553      	cmp	r3, sl
 8007044:	db37      	blt.n	80070b6 <__lshift+0xbe>
 8007046:	6920      	ldr	r0, [r4, #16]
 8007048:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800704c:	f104 0314 	add.w	r3, r4, #20
 8007050:	f019 091f 	ands.w	r9, r9, #31
 8007054:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007058:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800705c:	d02f      	beq.n	80070be <__lshift+0xc6>
 800705e:	f1c9 0e20 	rsb	lr, r9, #32
 8007062:	468a      	mov	sl, r1
 8007064:	f04f 0c00 	mov.w	ip, #0
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	fa02 f209 	lsl.w	r2, r2, r9
 800706e:	ea42 020c 	orr.w	r2, r2, ip
 8007072:	f84a 2b04 	str.w	r2, [sl], #4
 8007076:	f853 2b04 	ldr.w	r2, [r3], #4
 800707a:	4298      	cmp	r0, r3
 800707c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007080:	d8f2      	bhi.n	8007068 <__lshift+0x70>
 8007082:	1b03      	subs	r3, r0, r4
 8007084:	3b15      	subs	r3, #21
 8007086:	f023 0303 	bic.w	r3, r3, #3
 800708a:	3304      	adds	r3, #4
 800708c:	f104 0215 	add.w	r2, r4, #21
 8007090:	4290      	cmp	r0, r2
 8007092:	bf38      	it	cc
 8007094:	2304      	movcc	r3, #4
 8007096:	f841 c003 	str.w	ip, [r1, r3]
 800709a:	f1bc 0f00 	cmp.w	ip, #0
 800709e:	d001      	beq.n	80070a4 <__lshift+0xac>
 80070a0:	f108 0602 	add.w	r6, r8, #2
 80070a4:	3e01      	subs	r6, #1
 80070a6:	4638      	mov	r0, r7
 80070a8:	612e      	str	r6, [r5, #16]
 80070aa:	4621      	mov	r1, r4
 80070ac:	f7ff fdd2 	bl	8006c54 <_Bfree>
 80070b0:	4628      	mov	r0, r5
 80070b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80070ba:	3301      	adds	r3, #1
 80070bc:	e7c1      	b.n	8007042 <__lshift+0x4a>
 80070be:	3904      	subs	r1, #4
 80070c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80070c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80070c8:	4298      	cmp	r0, r3
 80070ca:	d8f9      	bhi.n	80070c0 <__lshift+0xc8>
 80070cc:	e7ea      	b.n	80070a4 <__lshift+0xac>
 80070ce:	bf00      	nop
 80070d0:	08007f33 	.word	0x08007f33
 80070d4:	08007fa4 	.word	0x08007fa4

080070d8 <__mcmp>:
 80070d8:	b530      	push	{r4, r5, lr}
 80070da:	6902      	ldr	r2, [r0, #16]
 80070dc:	690c      	ldr	r4, [r1, #16]
 80070de:	1b12      	subs	r2, r2, r4
 80070e0:	d10e      	bne.n	8007100 <__mcmp+0x28>
 80070e2:	f100 0314 	add.w	r3, r0, #20
 80070e6:	3114      	adds	r1, #20
 80070e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80070ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80070f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80070f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80070f8:	42a5      	cmp	r5, r4
 80070fa:	d003      	beq.n	8007104 <__mcmp+0x2c>
 80070fc:	d305      	bcc.n	800710a <__mcmp+0x32>
 80070fe:	2201      	movs	r2, #1
 8007100:	4610      	mov	r0, r2
 8007102:	bd30      	pop	{r4, r5, pc}
 8007104:	4283      	cmp	r3, r0
 8007106:	d3f3      	bcc.n	80070f0 <__mcmp+0x18>
 8007108:	e7fa      	b.n	8007100 <__mcmp+0x28>
 800710a:	f04f 32ff 	mov.w	r2, #4294967295
 800710e:	e7f7      	b.n	8007100 <__mcmp+0x28>

08007110 <__mdiff>:
 8007110:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007114:	460c      	mov	r4, r1
 8007116:	4606      	mov	r6, r0
 8007118:	4611      	mov	r1, r2
 800711a:	4620      	mov	r0, r4
 800711c:	4690      	mov	r8, r2
 800711e:	f7ff ffdb 	bl	80070d8 <__mcmp>
 8007122:	1e05      	subs	r5, r0, #0
 8007124:	d110      	bne.n	8007148 <__mdiff+0x38>
 8007126:	4629      	mov	r1, r5
 8007128:	4630      	mov	r0, r6
 800712a:	f7ff fd53 	bl	8006bd4 <_Balloc>
 800712e:	b930      	cbnz	r0, 800713e <__mdiff+0x2e>
 8007130:	4b3a      	ldr	r3, [pc, #232]	; (800721c <__mdiff+0x10c>)
 8007132:	4602      	mov	r2, r0
 8007134:	f240 2132 	movw	r1, #562	; 0x232
 8007138:	4839      	ldr	r0, [pc, #228]	; (8007220 <__mdiff+0x110>)
 800713a:	f000 fc45 	bl	80079c8 <__assert_func>
 800713e:	2301      	movs	r3, #1
 8007140:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007144:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007148:	bfa4      	itt	ge
 800714a:	4643      	movge	r3, r8
 800714c:	46a0      	movge	r8, r4
 800714e:	4630      	mov	r0, r6
 8007150:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007154:	bfa6      	itte	ge
 8007156:	461c      	movge	r4, r3
 8007158:	2500      	movge	r5, #0
 800715a:	2501      	movlt	r5, #1
 800715c:	f7ff fd3a 	bl	8006bd4 <_Balloc>
 8007160:	b920      	cbnz	r0, 800716c <__mdiff+0x5c>
 8007162:	4b2e      	ldr	r3, [pc, #184]	; (800721c <__mdiff+0x10c>)
 8007164:	4602      	mov	r2, r0
 8007166:	f44f 7110 	mov.w	r1, #576	; 0x240
 800716a:	e7e5      	b.n	8007138 <__mdiff+0x28>
 800716c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007170:	6926      	ldr	r6, [r4, #16]
 8007172:	60c5      	str	r5, [r0, #12]
 8007174:	f104 0914 	add.w	r9, r4, #20
 8007178:	f108 0514 	add.w	r5, r8, #20
 800717c:	f100 0e14 	add.w	lr, r0, #20
 8007180:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007184:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007188:	f108 0210 	add.w	r2, r8, #16
 800718c:	46f2      	mov	sl, lr
 800718e:	2100      	movs	r1, #0
 8007190:	f859 3b04 	ldr.w	r3, [r9], #4
 8007194:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007198:	fa1f f883 	uxth.w	r8, r3
 800719c:	fa11 f18b 	uxtah	r1, r1, fp
 80071a0:	0c1b      	lsrs	r3, r3, #16
 80071a2:	eba1 0808 	sub.w	r8, r1, r8
 80071a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80071aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80071ae:	fa1f f888 	uxth.w	r8, r8
 80071b2:	1419      	asrs	r1, r3, #16
 80071b4:	454e      	cmp	r6, r9
 80071b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80071ba:	f84a 3b04 	str.w	r3, [sl], #4
 80071be:	d8e7      	bhi.n	8007190 <__mdiff+0x80>
 80071c0:	1b33      	subs	r3, r6, r4
 80071c2:	3b15      	subs	r3, #21
 80071c4:	f023 0303 	bic.w	r3, r3, #3
 80071c8:	3304      	adds	r3, #4
 80071ca:	3415      	adds	r4, #21
 80071cc:	42a6      	cmp	r6, r4
 80071ce:	bf38      	it	cc
 80071d0:	2304      	movcc	r3, #4
 80071d2:	441d      	add	r5, r3
 80071d4:	4473      	add	r3, lr
 80071d6:	469e      	mov	lr, r3
 80071d8:	462e      	mov	r6, r5
 80071da:	4566      	cmp	r6, ip
 80071dc:	d30e      	bcc.n	80071fc <__mdiff+0xec>
 80071de:	f10c 0203 	add.w	r2, ip, #3
 80071e2:	1b52      	subs	r2, r2, r5
 80071e4:	f022 0203 	bic.w	r2, r2, #3
 80071e8:	3d03      	subs	r5, #3
 80071ea:	45ac      	cmp	ip, r5
 80071ec:	bf38      	it	cc
 80071ee:	2200      	movcc	r2, #0
 80071f0:	441a      	add	r2, r3
 80071f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80071f6:	b17b      	cbz	r3, 8007218 <__mdiff+0x108>
 80071f8:	6107      	str	r7, [r0, #16]
 80071fa:	e7a3      	b.n	8007144 <__mdiff+0x34>
 80071fc:	f856 8b04 	ldr.w	r8, [r6], #4
 8007200:	fa11 f288 	uxtah	r2, r1, r8
 8007204:	1414      	asrs	r4, r2, #16
 8007206:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800720a:	b292      	uxth	r2, r2
 800720c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007210:	f84e 2b04 	str.w	r2, [lr], #4
 8007214:	1421      	asrs	r1, r4, #16
 8007216:	e7e0      	b.n	80071da <__mdiff+0xca>
 8007218:	3f01      	subs	r7, #1
 800721a:	e7ea      	b.n	80071f2 <__mdiff+0xe2>
 800721c:	08007f33 	.word	0x08007f33
 8007220:	08007fa4 	.word	0x08007fa4

08007224 <__d2b>:
 8007224:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007228:	4689      	mov	r9, r1
 800722a:	2101      	movs	r1, #1
 800722c:	ec57 6b10 	vmov	r6, r7, d0
 8007230:	4690      	mov	r8, r2
 8007232:	f7ff fccf 	bl	8006bd4 <_Balloc>
 8007236:	4604      	mov	r4, r0
 8007238:	b930      	cbnz	r0, 8007248 <__d2b+0x24>
 800723a:	4602      	mov	r2, r0
 800723c:	4b25      	ldr	r3, [pc, #148]	; (80072d4 <__d2b+0xb0>)
 800723e:	4826      	ldr	r0, [pc, #152]	; (80072d8 <__d2b+0xb4>)
 8007240:	f240 310a 	movw	r1, #778	; 0x30a
 8007244:	f000 fbc0 	bl	80079c8 <__assert_func>
 8007248:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800724c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007250:	bb35      	cbnz	r5, 80072a0 <__d2b+0x7c>
 8007252:	2e00      	cmp	r6, #0
 8007254:	9301      	str	r3, [sp, #4]
 8007256:	d028      	beq.n	80072aa <__d2b+0x86>
 8007258:	4668      	mov	r0, sp
 800725a:	9600      	str	r6, [sp, #0]
 800725c:	f7ff fd82 	bl	8006d64 <__lo0bits>
 8007260:	9900      	ldr	r1, [sp, #0]
 8007262:	b300      	cbz	r0, 80072a6 <__d2b+0x82>
 8007264:	9a01      	ldr	r2, [sp, #4]
 8007266:	f1c0 0320 	rsb	r3, r0, #32
 800726a:	fa02 f303 	lsl.w	r3, r2, r3
 800726e:	430b      	orrs	r3, r1
 8007270:	40c2      	lsrs	r2, r0
 8007272:	6163      	str	r3, [r4, #20]
 8007274:	9201      	str	r2, [sp, #4]
 8007276:	9b01      	ldr	r3, [sp, #4]
 8007278:	61a3      	str	r3, [r4, #24]
 800727a:	2b00      	cmp	r3, #0
 800727c:	bf14      	ite	ne
 800727e:	2202      	movne	r2, #2
 8007280:	2201      	moveq	r2, #1
 8007282:	6122      	str	r2, [r4, #16]
 8007284:	b1d5      	cbz	r5, 80072bc <__d2b+0x98>
 8007286:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800728a:	4405      	add	r5, r0
 800728c:	f8c9 5000 	str.w	r5, [r9]
 8007290:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007294:	f8c8 0000 	str.w	r0, [r8]
 8007298:	4620      	mov	r0, r4
 800729a:	b003      	add	sp, #12
 800729c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072a4:	e7d5      	b.n	8007252 <__d2b+0x2e>
 80072a6:	6161      	str	r1, [r4, #20]
 80072a8:	e7e5      	b.n	8007276 <__d2b+0x52>
 80072aa:	a801      	add	r0, sp, #4
 80072ac:	f7ff fd5a 	bl	8006d64 <__lo0bits>
 80072b0:	9b01      	ldr	r3, [sp, #4]
 80072b2:	6163      	str	r3, [r4, #20]
 80072b4:	2201      	movs	r2, #1
 80072b6:	6122      	str	r2, [r4, #16]
 80072b8:	3020      	adds	r0, #32
 80072ba:	e7e3      	b.n	8007284 <__d2b+0x60>
 80072bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80072c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80072c4:	f8c9 0000 	str.w	r0, [r9]
 80072c8:	6918      	ldr	r0, [r3, #16]
 80072ca:	f7ff fd2b 	bl	8006d24 <__hi0bits>
 80072ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80072d2:	e7df      	b.n	8007294 <__d2b+0x70>
 80072d4:	08007f33 	.word	0x08007f33
 80072d8:	08007fa4 	.word	0x08007fa4

080072dc <_calloc_r>:
 80072dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072de:	fba1 2402 	umull	r2, r4, r1, r2
 80072e2:	b94c      	cbnz	r4, 80072f8 <_calloc_r+0x1c>
 80072e4:	4611      	mov	r1, r2
 80072e6:	9201      	str	r2, [sp, #4]
 80072e8:	f000 f87a 	bl	80073e0 <_malloc_r>
 80072ec:	9a01      	ldr	r2, [sp, #4]
 80072ee:	4605      	mov	r5, r0
 80072f0:	b930      	cbnz	r0, 8007300 <_calloc_r+0x24>
 80072f2:	4628      	mov	r0, r5
 80072f4:	b003      	add	sp, #12
 80072f6:	bd30      	pop	{r4, r5, pc}
 80072f8:	220c      	movs	r2, #12
 80072fa:	6002      	str	r2, [r0, #0]
 80072fc:	2500      	movs	r5, #0
 80072fe:	e7f8      	b.n	80072f2 <_calloc_r+0x16>
 8007300:	4621      	mov	r1, r4
 8007302:	f7fe f8f3 	bl	80054ec <memset>
 8007306:	e7f4      	b.n	80072f2 <_calloc_r+0x16>

08007308 <_free_r>:
 8007308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800730a:	2900      	cmp	r1, #0
 800730c:	d044      	beq.n	8007398 <_free_r+0x90>
 800730e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007312:	9001      	str	r0, [sp, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	f1a1 0404 	sub.w	r4, r1, #4
 800731a:	bfb8      	it	lt
 800731c:	18e4      	addlt	r4, r4, r3
 800731e:	f000 fcdf 	bl	8007ce0 <__malloc_lock>
 8007322:	4a1e      	ldr	r2, [pc, #120]	; (800739c <_free_r+0x94>)
 8007324:	9801      	ldr	r0, [sp, #4]
 8007326:	6813      	ldr	r3, [r2, #0]
 8007328:	b933      	cbnz	r3, 8007338 <_free_r+0x30>
 800732a:	6063      	str	r3, [r4, #4]
 800732c:	6014      	str	r4, [r2, #0]
 800732e:	b003      	add	sp, #12
 8007330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007334:	f000 bcda 	b.w	8007cec <__malloc_unlock>
 8007338:	42a3      	cmp	r3, r4
 800733a:	d908      	bls.n	800734e <_free_r+0x46>
 800733c:	6825      	ldr	r5, [r4, #0]
 800733e:	1961      	adds	r1, r4, r5
 8007340:	428b      	cmp	r3, r1
 8007342:	bf01      	itttt	eq
 8007344:	6819      	ldreq	r1, [r3, #0]
 8007346:	685b      	ldreq	r3, [r3, #4]
 8007348:	1949      	addeq	r1, r1, r5
 800734a:	6021      	streq	r1, [r4, #0]
 800734c:	e7ed      	b.n	800732a <_free_r+0x22>
 800734e:	461a      	mov	r2, r3
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	b10b      	cbz	r3, 8007358 <_free_r+0x50>
 8007354:	42a3      	cmp	r3, r4
 8007356:	d9fa      	bls.n	800734e <_free_r+0x46>
 8007358:	6811      	ldr	r1, [r2, #0]
 800735a:	1855      	adds	r5, r2, r1
 800735c:	42a5      	cmp	r5, r4
 800735e:	d10b      	bne.n	8007378 <_free_r+0x70>
 8007360:	6824      	ldr	r4, [r4, #0]
 8007362:	4421      	add	r1, r4
 8007364:	1854      	adds	r4, r2, r1
 8007366:	42a3      	cmp	r3, r4
 8007368:	6011      	str	r1, [r2, #0]
 800736a:	d1e0      	bne.n	800732e <_free_r+0x26>
 800736c:	681c      	ldr	r4, [r3, #0]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	6053      	str	r3, [r2, #4]
 8007372:	4421      	add	r1, r4
 8007374:	6011      	str	r1, [r2, #0]
 8007376:	e7da      	b.n	800732e <_free_r+0x26>
 8007378:	d902      	bls.n	8007380 <_free_r+0x78>
 800737a:	230c      	movs	r3, #12
 800737c:	6003      	str	r3, [r0, #0]
 800737e:	e7d6      	b.n	800732e <_free_r+0x26>
 8007380:	6825      	ldr	r5, [r4, #0]
 8007382:	1961      	adds	r1, r4, r5
 8007384:	428b      	cmp	r3, r1
 8007386:	bf04      	itt	eq
 8007388:	6819      	ldreq	r1, [r3, #0]
 800738a:	685b      	ldreq	r3, [r3, #4]
 800738c:	6063      	str	r3, [r4, #4]
 800738e:	bf04      	itt	eq
 8007390:	1949      	addeq	r1, r1, r5
 8007392:	6021      	streq	r1, [r4, #0]
 8007394:	6054      	str	r4, [r2, #4]
 8007396:	e7ca      	b.n	800732e <_free_r+0x26>
 8007398:	b003      	add	sp, #12
 800739a:	bd30      	pop	{r4, r5, pc}
 800739c:	2400029c 	.word	0x2400029c

080073a0 <sbrk_aligned>:
 80073a0:	b570      	push	{r4, r5, r6, lr}
 80073a2:	4e0e      	ldr	r6, [pc, #56]	; (80073dc <sbrk_aligned+0x3c>)
 80073a4:	460c      	mov	r4, r1
 80073a6:	6831      	ldr	r1, [r6, #0]
 80073a8:	4605      	mov	r5, r0
 80073aa:	b911      	cbnz	r1, 80073b2 <sbrk_aligned+0x12>
 80073ac:	f000 f9e6 	bl	800777c <_sbrk_r>
 80073b0:	6030      	str	r0, [r6, #0]
 80073b2:	4621      	mov	r1, r4
 80073b4:	4628      	mov	r0, r5
 80073b6:	f000 f9e1 	bl	800777c <_sbrk_r>
 80073ba:	1c43      	adds	r3, r0, #1
 80073bc:	d00a      	beq.n	80073d4 <sbrk_aligned+0x34>
 80073be:	1cc4      	adds	r4, r0, #3
 80073c0:	f024 0403 	bic.w	r4, r4, #3
 80073c4:	42a0      	cmp	r0, r4
 80073c6:	d007      	beq.n	80073d8 <sbrk_aligned+0x38>
 80073c8:	1a21      	subs	r1, r4, r0
 80073ca:	4628      	mov	r0, r5
 80073cc:	f000 f9d6 	bl	800777c <_sbrk_r>
 80073d0:	3001      	adds	r0, #1
 80073d2:	d101      	bne.n	80073d8 <sbrk_aligned+0x38>
 80073d4:	f04f 34ff 	mov.w	r4, #4294967295
 80073d8:	4620      	mov	r0, r4
 80073da:	bd70      	pop	{r4, r5, r6, pc}
 80073dc:	240002a0 	.word	0x240002a0

080073e0 <_malloc_r>:
 80073e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e4:	1ccd      	adds	r5, r1, #3
 80073e6:	f025 0503 	bic.w	r5, r5, #3
 80073ea:	3508      	adds	r5, #8
 80073ec:	2d0c      	cmp	r5, #12
 80073ee:	bf38      	it	cc
 80073f0:	250c      	movcc	r5, #12
 80073f2:	2d00      	cmp	r5, #0
 80073f4:	4607      	mov	r7, r0
 80073f6:	db01      	blt.n	80073fc <_malloc_r+0x1c>
 80073f8:	42a9      	cmp	r1, r5
 80073fa:	d905      	bls.n	8007408 <_malloc_r+0x28>
 80073fc:	230c      	movs	r3, #12
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	2600      	movs	r6, #0
 8007402:	4630      	mov	r0, r6
 8007404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007408:	4e2e      	ldr	r6, [pc, #184]	; (80074c4 <_malloc_r+0xe4>)
 800740a:	f000 fc69 	bl	8007ce0 <__malloc_lock>
 800740e:	6833      	ldr	r3, [r6, #0]
 8007410:	461c      	mov	r4, r3
 8007412:	bb34      	cbnz	r4, 8007462 <_malloc_r+0x82>
 8007414:	4629      	mov	r1, r5
 8007416:	4638      	mov	r0, r7
 8007418:	f7ff ffc2 	bl	80073a0 <sbrk_aligned>
 800741c:	1c43      	adds	r3, r0, #1
 800741e:	4604      	mov	r4, r0
 8007420:	d14d      	bne.n	80074be <_malloc_r+0xde>
 8007422:	6834      	ldr	r4, [r6, #0]
 8007424:	4626      	mov	r6, r4
 8007426:	2e00      	cmp	r6, #0
 8007428:	d140      	bne.n	80074ac <_malloc_r+0xcc>
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	4631      	mov	r1, r6
 800742e:	4638      	mov	r0, r7
 8007430:	eb04 0803 	add.w	r8, r4, r3
 8007434:	f000 f9a2 	bl	800777c <_sbrk_r>
 8007438:	4580      	cmp	r8, r0
 800743a:	d13a      	bne.n	80074b2 <_malloc_r+0xd2>
 800743c:	6821      	ldr	r1, [r4, #0]
 800743e:	3503      	adds	r5, #3
 8007440:	1a6d      	subs	r5, r5, r1
 8007442:	f025 0503 	bic.w	r5, r5, #3
 8007446:	3508      	adds	r5, #8
 8007448:	2d0c      	cmp	r5, #12
 800744a:	bf38      	it	cc
 800744c:	250c      	movcc	r5, #12
 800744e:	4629      	mov	r1, r5
 8007450:	4638      	mov	r0, r7
 8007452:	f7ff ffa5 	bl	80073a0 <sbrk_aligned>
 8007456:	3001      	adds	r0, #1
 8007458:	d02b      	beq.n	80074b2 <_malloc_r+0xd2>
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	442b      	add	r3, r5
 800745e:	6023      	str	r3, [r4, #0]
 8007460:	e00e      	b.n	8007480 <_malloc_r+0xa0>
 8007462:	6822      	ldr	r2, [r4, #0]
 8007464:	1b52      	subs	r2, r2, r5
 8007466:	d41e      	bmi.n	80074a6 <_malloc_r+0xc6>
 8007468:	2a0b      	cmp	r2, #11
 800746a:	d916      	bls.n	800749a <_malloc_r+0xba>
 800746c:	1961      	adds	r1, r4, r5
 800746e:	42a3      	cmp	r3, r4
 8007470:	6025      	str	r5, [r4, #0]
 8007472:	bf18      	it	ne
 8007474:	6059      	strne	r1, [r3, #4]
 8007476:	6863      	ldr	r3, [r4, #4]
 8007478:	bf08      	it	eq
 800747a:	6031      	streq	r1, [r6, #0]
 800747c:	5162      	str	r2, [r4, r5]
 800747e:	604b      	str	r3, [r1, #4]
 8007480:	4638      	mov	r0, r7
 8007482:	f104 060b 	add.w	r6, r4, #11
 8007486:	f000 fc31 	bl	8007cec <__malloc_unlock>
 800748a:	f026 0607 	bic.w	r6, r6, #7
 800748e:	1d23      	adds	r3, r4, #4
 8007490:	1af2      	subs	r2, r6, r3
 8007492:	d0b6      	beq.n	8007402 <_malloc_r+0x22>
 8007494:	1b9b      	subs	r3, r3, r6
 8007496:	50a3      	str	r3, [r4, r2]
 8007498:	e7b3      	b.n	8007402 <_malloc_r+0x22>
 800749a:	6862      	ldr	r2, [r4, #4]
 800749c:	42a3      	cmp	r3, r4
 800749e:	bf0c      	ite	eq
 80074a0:	6032      	streq	r2, [r6, #0]
 80074a2:	605a      	strne	r2, [r3, #4]
 80074a4:	e7ec      	b.n	8007480 <_malloc_r+0xa0>
 80074a6:	4623      	mov	r3, r4
 80074a8:	6864      	ldr	r4, [r4, #4]
 80074aa:	e7b2      	b.n	8007412 <_malloc_r+0x32>
 80074ac:	4634      	mov	r4, r6
 80074ae:	6876      	ldr	r6, [r6, #4]
 80074b0:	e7b9      	b.n	8007426 <_malloc_r+0x46>
 80074b2:	230c      	movs	r3, #12
 80074b4:	603b      	str	r3, [r7, #0]
 80074b6:	4638      	mov	r0, r7
 80074b8:	f000 fc18 	bl	8007cec <__malloc_unlock>
 80074bc:	e7a1      	b.n	8007402 <_malloc_r+0x22>
 80074be:	6025      	str	r5, [r4, #0]
 80074c0:	e7de      	b.n	8007480 <_malloc_r+0xa0>
 80074c2:	bf00      	nop
 80074c4:	2400029c 	.word	0x2400029c

080074c8 <__sfputc_r>:
 80074c8:	6893      	ldr	r3, [r2, #8]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	b410      	push	{r4}
 80074d0:	6093      	str	r3, [r2, #8]
 80074d2:	da08      	bge.n	80074e6 <__sfputc_r+0x1e>
 80074d4:	6994      	ldr	r4, [r2, #24]
 80074d6:	42a3      	cmp	r3, r4
 80074d8:	db01      	blt.n	80074de <__sfputc_r+0x16>
 80074da:	290a      	cmp	r1, #10
 80074dc:	d103      	bne.n	80074e6 <__sfputc_r+0x1e>
 80074de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074e2:	f000 b99f 	b.w	8007824 <__swbuf_r>
 80074e6:	6813      	ldr	r3, [r2, #0]
 80074e8:	1c58      	adds	r0, r3, #1
 80074ea:	6010      	str	r0, [r2, #0]
 80074ec:	7019      	strb	r1, [r3, #0]
 80074ee:	4608      	mov	r0, r1
 80074f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <__sfputs_r>:
 80074f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f8:	4606      	mov	r6, r0
 80074fa:	460f      	mov	r7, r1
 80074fc:	4614      	mov	r4, r2
 80074fe:	18d5      	adds	r5, r2, r3
 8007500:	42ac      	cmp	r4, r5
 8007502:	d101      	bne.n	8007508 <__sfputs_r+0x12>
 8007504:	2000      	movs	r0, #0
 8007506:	e007      	b.n	8007518 <__sfputs_r+0x22>
 8007508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800750c:	463a      	mov	r2, r7
 800750e:	4630      	mov	r0, r6
 8007510:	f7ff ffda 	bl	80074c8 <__sfputc_r>
 8007514:	1c43      	adds	r3, r0, #1
 8007516:	d1f3      	bne.n	8007500 <__sfputs_r+0xa>
 8007518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800751c <_vfiprintf_r>:
 800751c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007520:	460d      	mov	r5, r1
 8007522:	b09d      	sub	sp, #116	; 0x74
 8007524:	4614      	mov	r4, r2
 8007526:	4698      	mov	r8, r3
 8007528:	4606      	mov	r6, r0
 800752a:	b118      	cbz	r0, 8007534 <_vfiprintf_r+0x18>
 800752c:	6983      	ldr	r3, [r0, #24]
 800752e:	b90b      	cbnz	r3, 8007534 <_vfiprintf_r+0x18>
 8007530:	f7ff fa94 	bl	8006a5c <__sinit>
 8007534:	4b89      	ldr	r3, [pc, #548]	; (800775c <_vfiprintf_r+0x240>)
 8007536:	429d      	cmp	r5, r3
 8007538:	d11b      	bne.n	8007572 <_vfiprintf_r+0x56>
 800753a:	6875      	ldr	r5, [r6, #4]
 800753c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800753e:	07d9      	lsls	r1, r3, #31
 8007540:	d405      	bmi.n	800754e <_vfiprintf_r+0x32>
 8007542:	89ab      	ldrh	r3, [r5, #12]
 8007544:	059a      	lsls	r2, r3, #22
 8007546:	d402      	bmi.n	800754e <_vfiprintf_r+0x32>
 8007548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800754a:	f7ff fb2a 	bl	8006ba2 <__retarget_lock_acquire_recursive>
 800754e:	89ab      	ldrh	r3, [r5, #12]
 8007550:	071b      	lsls	r3, r3, #28
 8007552:	d501      	bpl.n	8007558 <_vfiprintf_r+0x3c>
 8007554:	692b      	ldr	r3, [r5, #16]
 8007556:	b9eb      	cbnz	r3, 8007594 <_vfiprintf_r+0x78>
 8007558:	4629      	mov	r1, r5
 800755a:	4630      	mov	r0, r6
 800755c:	f000 f9c6 	bl	80078ec <__swsetup_r>
 8007560:	b1c0      	cbz	r0, 8007594 <_vfiprintf_r+0x78>
 8007562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007564:	07dc      	lsls	r4, r3, #31
 8007566:	d50e      	bpl.n	8007586 <_vfiprintf_r+0x6a>
 8007568:	f04f 30ff 	mov.w	r0, #4294967295
 800756c:	b01d      	add	sp, #116	; 0x74
 800756e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007572:	4b7b      	ldr	r3, [pc, #492]	; (8007760 <_vfiprintf_r+0x244>)
 8007574:	429d      	cmp	r5, r3
 8007576:	d101      	bne.n	800757c <_vfiprintf_r+0x60>
 8007578:	68b5      	ldr	r5, [r6, #8]
 800757a:	e7df      	b.n	800753c <_vfiprintf_r+0x20>
 800757c:	4b79      	ldr	r3, [pc, #484]	; (8007764 <_vfiprintf_r+0x248>)
 800757e:	429d      	cmp	r5, r3
 8007580:	bf08      	it	eq
 8007582:	68f5      	ldreq	r5, [r6, #12]
 8007584:	e7da      	b.n	800753c <_vfiprintf_r+0x20>
 8007586:	89ab      	ldrh	r3, [r5, #12]
 8007588:	0598      	lsls	r0, r3, #22
 800758a:	d4ed      	bmi.n	8007568 <_vfiprintf_r+0x4c>
 800758c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800758e:	f7ff fb09 	bl	8006ba4 <__retarget_lock_release_recursive>
 8007592:	e7e9      	b.n	8007568 <_vfiprintf_r+0x4c>
 8007594:	2300      	movs	r3, #0
 8007596:	9309      	str	r3, [sp, #36]	; 0x24
 8007598:	2320      	movs	r3, #32
 800759a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800759e:	f8cd 800c 	str.w	r8, [sp, #12]
 80075a2:	2330      	movs	r3, #48	; 0x30
 80075a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007768 <_vfiprintf_r+0x24c>
 80075a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075ac:	f04f 0901 	mov.w	r9, #1
 80075b0:	4623      	mov	r3, r4
 80075b2:	469a      	mov	sl, r3
 80075b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075b8:	b10a      	cbz	r2, 80075be <_vfiprintf_r+0xa2>
 80075ba:	2a25      	cmp	r2, #37	; 0x25
 80075bc:	d1f9      	bne.n	80075b2 <_vfiprintf_r+0x96>
 80075be:	ebba 0b04 	subs.w	fp, sl, r4
 80075c2:	d00b      	beq.n	80075dc <_vfiprintf_r+0xc0>
 80075c4:	465b      	mov	r3, fp
 80075c6:	4622      	mov	r2, r4
 80075c8:	4629      	mov	r1, r5
 80075ca:	4630      	mov	r0, r6
 80075cc:	f7ff ff93 	bl	80074f6 <__sfputs_r>
 80075d0:	3001      	adds	r0, #1
 80075d2:	f000 80aa 	beq.w	800772a <_vfiprintf_r+0x20e>
 80075d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075d8:	445a      	add	r2, fp
 80075da:	9209      	str	r2, [sp, #36]	; 0x24
 80075dc:	f89a 3000 	ldrb.w	r3, [sl]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 80a2 	beq.w	800772a <_vfiprintf_r+0x20e>
 80075e6:	2300      	movs	r3, #0
 80075e8:	f04f 32ff 	mov.w	r2, #4294967295
 80075ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075f0:	f10a 0a01 	add.w	sl, sl, #1
 80075f4:	9304      	str	r3, [sp, #16]
 80075f6:	9307      	str	r3, [sp, #28]
 80075f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075fc:	931a      	str	r3, [sp, #104]	; 0x68
 80075fe:	4654      	mov	r4, sl
 8007600:	2205      	movs	r2, #5
 8007602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007606:	4858      	ldr	r0, [pc, #352]	; (8007768 <_vfiprintf_r+0x24c>)
 8007608:	f7f8 fe72 	bl	80002f0 <memchr>
 800760c:	9a04      	ldr	r2, [sp, #16]
 800760e:	b9d8      	cbnz	r0, 8007648 <_vfiprintf_r+0x12c>
 8007610:	06d1      	lsls	r1, r2, #27
 8007612:	bf44      	itt	mi
 8007614:	2320      	movmi	r3, #32
 8007616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800761a:	0713      	lsls	r3, r2, #28
 800761c:	bf44      	itt	mi
 800761e:	232b      	movmi	r3, #43	; 0x2b
 8007620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007624:	f89a 3000 	ldrb.w	r3, [sl]
 8007628:	2b2a      	cmp	r3, #42	; 0x2a
 800762a:	d015      	beq.n	8007658 <_vfiprintf_r+0x13c>
 800762c:	9a07      	ldr	r2, [sp, #28]
 800762e:	4654      	mov	r4, sl
 8007630:	2000      	movs	r0, #0
 8007632:	f04f 0c0a 	mov.w	ip, #10
 8007636:	4621      	mov	r1, r4
 8007638:	f811 3b01 	ldrb.w	r3, [r1], #1
 800763c:	3b30      	subs	r3, #48	; 0x30
 800763e:	2b09      	cmp	r3, #9
 8007640:	d94e      	bls.n	80076e0 <_vfiprintf_r+0x1c4>
 8007642:	b1b0      	cbz	r0, 8007672 <_vfiprintf_r+0x156>
 8007644:	9207      	str	r2, [sp, #28]
 8007646:	e014      	b.n	8007672 <_vfiprintf_r+0x156>
 8007648:	eba0 0308 	sub.w	r3, r0, r8
 800764c:	fa09 f303 	lsl.w	r3, r9, r3
 8007650:	4313      	orrs	r3, r2
 8007652:	9304      	str	r3, [sp, #16]
 8007654:	46a2      	mov	sl, r4
 8007656:	e7d2      	b.n	80075fe <_vfiprintf_r+0xe2>
 8007658:	9b03      	ldr	r3, [sp, #12]
 800765a:	1d19      	adds	r1, r3, #4
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	9103      	str	r1, [sp, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	bfbb      	ittet	lt
 8007664:	425b      	neglt	r3, r3
 8007666:	f042 0202 	orrlt.w	r2, r2, #2
 800766a:	9307      	strge	r3, [sp, #28]
 800766c:	9307      	strlt	r3, [sp, #28]
 800766e:	bfb8      	it	lt
 8007670:	9204      	strlt	r2, [sp, #16]
 8007672:	7823      	ldrb	r3, [r4, #0]
 8007674:	2b2e      	cmp	r3, #46	; 0x2e
 8007676:	d10c      	bne.n	8007692 <_vfiprintf_r+0x176>
 8007678:	7863      	ldrb	r3, [r4, #1]
 800767a:	2b2a      	cmp	r3, #42	; 0x2a
 800767c:	d135      	bne.n	80076ea <_vfiprintf_r+0x1ce>
 800767e:	9b03      	ldr	r3, [sp, #12]
 8007680:	1d1a      	adds	r2, r3, #4
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	9203      	str	r2, [sp, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	bfb8      	it	lt
 800768a:	f04f 33ff 	movlt.w	r3, #4294967295
 800768e:	3402      	adds	r4, #2
 8007690:	9305      	str	r3, [sp, #20]
 8007692:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007778 <_vfiprintf_r+0x25c>
 8007696:	7821      	ldrb	r1, [r4, #0]
 8007698:	2203      	movs	r2, #3
 800769a:	4650      	mov	r0, sl
 800769c:	f7f8 fe28 	bl	80002f0 <memchr>
 80076a0:	b140      	cbz	r0, 80076b4 <_vfiprintf_r+0x198>
 80076a2:	2340      	movs	r3, #64	; 0x40
 80076a4:	eba0 000a 	sub.w	r0, r0, sl
 80076a8:	fa03 f000 	lsl.w	r0, r3, r0
 80076ac:	9b04      	ldr	r3, [sp, #16]
 80076ae:	4303      	orrs	r3, r0
 80076b0:	3401      	adds	r4, #1
 80076b2:	9304      	str	r3, [sp, #16]
 80076b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b8:	482c      	ldr	r0, [pc, #176]	; (800776c <_vfiprintf_r+0x250>)
 80076ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076be:	2206      	movs	r2, #6
 80076c0:	f7f8 fe16 	bl	80002f0 <memchr>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	d03f      	beq.n	8007748 <_vfiprintf_r+0x22c>
 80076c8:	4b29      	ldr	r3, [pc, #164]	; (8007770 <_vfiprintf_r+0x254>)
 80076ca:	bb1b      	cbnz	r3, 8007714 <_vfiprintf_r+0x1f8>
 80076cc:	9b03      	ldr	r3, [sp, #12]
 80076ce:	3307      	adds	r3, #7
 80076d0:	f023 0307 	bic.w	r3, r3, #7
 80076d4:	3308      	adds	r3, #8
 80076d6:	9303      	str	r3, [sp, #12]
 80076d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076da:	443b      	add	r3, r7
 80076dc:	9309      	str	r3, [sp, #36]	; 0x24
 80076de:	e767      	b.n	80075b0 <_vfiprintf_r+0x94>
 80076e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80076e4:	460c      	mov	r4, r1
 80076e6:	2001      	movs	r0, #1
 80076e8:	e7a5      	b.n	8007636 <_vfiprintf_r+0x11a>
 80076ea:	2300      	movs	r3, #0
 80076ec:	3401      	adds	r4, #1
 80076ee:	9305      	str	r3, [sp, #20]
 80076f0:	4619      	mov	r1, r3
 80076f2:	f04f 0c0a 	mov.w	ip, #10
 80076f6:	4620      	mov	r0, r4
 80076f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076fc:	3a30      	subs	r2, #48	; 0x30
 80076fe:	2a09      	cmp	r2, #9
 8007700:	d903      	bls.n	800770a <_vfiprintf_r+0x1ee>
 8007702:	2b00      	cmp	r3, #0
 8007704:	d0c5      	beq.n	8007692 <_vfiprintf_r+0x176>
 8007706:	9105      	str	r1, [sp, #20]
 8007708:	e7c3      	b.n	8007692 <_vfiprintf_r+0x176>
 800770a:	fb0c 2101 	mla	r1, ip, r1, r2
 800770e:	4604      	mov	r4, r0
 8007710:	2301      	movs	r3, #1
 8007712:	e7f0      	b.n	80076f6 <_vfiprintf_r+0x1da>
 8007714:	ab03      	add	r3, sp, #12
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	462a      	mov	r2, r5
 800771a:	4b16      	ldr	r3, [pc, #88]	; (8007774 <_vfiprintf_r+0x258>)
 800771c:	a904      	add	r1, sp, #16
 800771e:	4630      	mov	r0, r6
 8007720:	f7fd ff7e 	bl	8005620 <_printf_float>
 8007724:	4607      	mov	r7, r0
 8007726:	1c78      	adds	r0, r7, #1
 8007728:	d1d6      	bne.n	80076d8 <_vfiprintf_r+0x1bc>
 800772a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800772c:	07d9      	lsls	r1, r3, #31
 800772e:	d405      	bmi.n	800773c <_vfiprintf_r+0x220>
 8007730:	89ab      	ldrh	r3, [r5, #12]
 8007732:	059a      	lsls	r2, r3, #22
 8007734:	d402      	bmi.n	800773c <_vfiprintf_r+0x220>
 8007736:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007738:	f7ff fa34 	bl	8006ba4 <__retarget_lock_release_recursive>
 800773c:	89ab      	ldrh	r3, [r5, #12]
 800773e:	065b      	lsls	r3, r3, #25
 8007740:	f53f af12 	bmi.w	8007568 <_vfiprintf_r+0x4c>
 8007744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007746:	e711      	b.n	800756c <_vfiprintf_r+0x50>
 8007748:	ab03      	add	r3, sp, #12
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	462a      	mov	r2, r5
 800774e:	4b09      	ldr	r3, [pc, #36]	; (8007774 <_vfiprintf_r+0x258>)
 8007750:	a904      	add	r1, sp, #16
 8007752:	4630      	mov	r0, r6
 8007754:	f7fe f9f0 	bl	8005b38 <_printf_i>
 8007758:	e7e4      	b.n	8007724 <_vfiprintf_r+0x208>
 800775a:	bf00      	nop
 800775c:	08007f64 	.word	0x08007f64
 8007760:	08007f84 	.word	0x08007f84
 8007764:	08007f44 	.word	0x08007f44
 8007768:	080080fc 	.word	0x080080fc
 800776c:	08008106 	.word	0x08008106
 8007770:	08005621 	.word	0x08005621
 8007774:	080074f7 	.word	0x080074f7
 8007778:	08008102 	.word	0x08008102

0800777c <_sbrk_r>:
 800777c:	b538      	push	{r3, r4, r5, lr}
 800777e:	4d06      	ldr	r5, [pc, #24]	; (8007798 <_sbrk_r+0x1c>)
 8007780:	2300      	movs	r3, #0
 8007782:	4604      	mov	r4, r0
 8007784:	4608      	mov	r0, r1
 8007786:	602b      	str	r3, [r5, #0]
 8007788:	f7f9 f9dc 	bl	8000b44 <_sbrk>
 800778c:	1c43      	adds	r3, r0, #1
 800778e:	d102      	bne.n	8007796 <_sbrk_r+0x1a>
 8007790:	682b      	ldr	r3, [r5, #0]
 8007792:	b103      	cbz	r3, 8007796 <_sbrk_r+0x1a>
 8007794:	6023      	str	r3, [r4, #0]
 8007796:	bd38      	pop	{r3, r4, r5, pc}
 8007798:	240002a4 	.word	0x240002a4

0800779c <__sread>:
 800779c:	b510      	push	{r4, lr}
 800779e:	460c      	mov	r4, r1
 80077a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a4:	f000 faa8 	bl	8007cf8 <_read_r>
 80077a8:	2800      	cmp	r0, #0
 80077aa:	bfab      	itete	ge
 80077ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077ae:	89a3      	ldrhlt	r3, [r4, #12]
 80077b0:	181b      	addge	r3, r3, r0
 80077b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077b6:	bfac      	ite	ge
 80077b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80077ba:	81a3      	strhlt	r3, [r4, #12]
 80077bc:	bd10      	pop	{r4, pc}

080077be <__swrite>:
 80077be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c2:	461f      	mov	r7, r3
 80077c4:	898b      	ldrh	r3, [r1, #12]
 80077c6:	05db      	lsls	r3, r3, #23
 80077c8:	4605      	mov	r5, r0
 80077ca:	460c      	mov	r4, r1
 80077cc:	4616      	mov	r6, r2
 80077ce:	d505      	bpl.n	80077dc <__swrite+0x1e>
 80077d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077d4:	2302      	movs	r3, #2
 80077d6:	2200      	movs	r2, #0
 80077d8:	f000 f9f8 	bl	8007bcc <_lseek_r>
 80077dc:	89a3      	ldrh	r3, [r4, #12]
 80077de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077e6:	81a3      	strh	r3, [r4, #12]
 80077e8:	4632      	mov	r2, r6
 80077ea:	463b      	mov	r3, r7
 80077ec:	4628      	mov	r0, r5
 80077ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077f2:	f000 b869 	b.w	80078c8 <_write_r>

080077f6 <__sseek>:
 80077f6:	b510      	push	{r4, lr}
 80077f8:	460c      	mov	r4, r1
 80077fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077fe:	f000 f9e5 	bl	8007bcc <_lseek_r>
 8007802:	1c43      	adds	r3, r0, #1
 8007804:	89a3      	ldrh	r3, [r4, #12]
 8007806:	bf15      	itete	ne
 8007808:	6560      	strne	r0, [r4, #84]	; 0x54
 800780a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800780e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007812:	81a3      	strheq	r3, [r4, #12]
 8007814:	bf18      	it	ne
 8007816:	81a3      	strhne	r3, [r4, #12]
 8007818:	bd10      	pop	{r4, pc}

0800781a <__sclose>:
 800781a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800781e:	f000 b8f1 	b.w	8007a04 <_close_r>
	...

08007824 <__swbuf_r>:
 8007824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007826:	460e      	mov	r6, r1
 8007828:	4614      	mov	r4, r2
 800782a:	4605      	mov	r5, r0
 800782c:	b118      	cbz	r0, 8007836 <__swbuf_r+0x12>
 800782e:	6983      	ldr	r3, [r0, #24]
 8007830:	b90b      	cbnz	r3, 8007836 <__swbuf_r+0x12>
 8007832:	f7ff f913 	bl	8006a5c <__sinit>
 8007836:	4b21      	ldr	r3, [pc, #132]	; (80078bc <__swbuf_r+0x98>)
 8007838:	429c      	cmp	r4, r3
 800783a:	d12b      	bne.n	8007894 <__swbuf_r+0x70>
 800783c:	686c      	ldr	r4, [r5, #4]
 800783e:	69a3      	ldr	r3, [r4, #24]
 8007840:	60a3      	str	r3, [r4, #8]
 8007842:	89a3      	ldrh	r3, [r4, #12]
 8007844:	071a      	lsls	r2, r3, #28
 8007846:	d52f      	bpl.n	80078a8 <__swbuf_r+0x84>
 8007848:	6923      	ldr	r3, [r4, #16]
 800784a:	b36b      	cbz	r3, 80078a8 <__swbuf_r+0x84>
 800784c:	6923      	ldr	r3, [r4, #16]
 800784e:	6820      	ldr	r0, [r4, #0]
 8007850:	1ac0      	subs	r0, r0, r3
 8007852:	6963      	ldr	r3, [r4, #20]
 8007854:	b2f6      	uxtb	r6, r6
 8007856:	4283      	cmp	r3, r0
 8007858:	4637      	mov	r7, r6
 800785a:	dc04      	bgt.n	8007866 <__swbuf_r+0x42>
 800785c:	4621      	mov	r1, r4
 800785e:	4628      	mov	r0, r5
 8007860:	f000 f966 	bl	8007b30 <_fflush_r>
 8007864:	bb30      	cbnz	r0, 80078b4 <__swbuf_r+0x90>
 8007866:	68a3      	ldr	r3, [r4, #8]
 8007868:	3b01      	subs	r3, #1
 800786a:	60a3      	str	r3, [r4, #8]
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	1c5a      	adds	r2, r3, #1
 8007870:	6022      	str	r2, [r4, #0]
 8007872:	701e      	strb	r6, [r3, #0]
 8007874:	6963      	ldr	r3, [r4, #20]
 8007876:	3001      	adds	r0, #1
 8007878:	4283      	cmp	r3, r0
 800787a:	d004      	beq.n	8007886 <__swbuf_r+0x62>
 800787c:	89a3      	ldrh	r3, [r4, #12]
 800787e:	07db      	lsls	r3, r3, #31
 8007880:	d506      	bpl.n	8007890 <__swbuf_r+0x6c>
 8007882:	2e0a      	cmp	r6, #10
 8007884:	d104      	bne.n	8007890 <__swbuf_r+0x6c>
 8007886:	4621      	mov	r1, r4
 8007888:	4628      	mov	r0, r5
 800788a:	f000 f951 	bl	8007b30 <_fflush_r>
 800788e:	b988      	cbnz	r0, 80078b4 <__swbuf_r+0x90>
 8007890:	4638      	mov	r0, r7
 8007892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007894:	4b0a      	ldr	r3, [pc, #40]	; (80078c0 <__swbuf_r+0x9c>)
 8007896:	429c      	cmp	r4, r3
 8007898:	d101      	bne.n	800789e <__swbuf_r+0x7a>
 800789a:	68ac      	ldr	r4, [r5, #8]
 800789c:	e7cf      	b.n	800783e <__swbuf_r+0x1a>
 800789e:	4b09      	ldr	r3, [pc, #36]	; (80078c4 <__swbuf_r+0xa0>)
 80078a0:	429c      	cmp	r4, r3
 80078a2:	bf08      	it	eq
 80078a4:	68ec      	ldreq	r4, [r5, #12]
 80078a6:	e7ca      	b.n	800783e <__swbuf_r+0x1a>
 80078a8:	4621      	mov	r1, r4
 80078aa:	4628      	mov	r0, r5
 80078ac:	f000 f81e 	bl	80078ec <__swsetup_r>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d0cb      	beq.n	800784c <__swbuf_r+0x28>
 80078b4:	f04f 37ff 	mov.w	r7, #4294967295
 80078b8:	e7ea      	b.n	8007890 <__swbuf_r+0x6c>
 80078ba:	bf00      	nop
 80078bc:	08007f64 	.word	0x08007f64
 80078c0:	08007f84 	.word	0x08007f84
 80078c4:	08007f44 	.word	0x08007f44

080078c8 <_write_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4d07      	ldr	r5, [pc, #28]	; (80078e8 <_write_r+0x20>)
 80078cc:	4604      	mov	r4, r0
 80078ce:	4608      	mov	r0, r1
 80078d0:	4611      	mov	r1, r2
 80078d2:	2200      	movs	r2, #0
 80078d4:	602a      	str	r2, [r5, #0]
 80078d6:	461a      	mov	r2, r3
 80078d8:	f7f8 ff8c 	bl	80007f4 <_write>
 80078dc:	1c43      	adds	r3, r0, #1
 80078de:	d102      	bne.n	80078e6 <_write_r+0x1e>
 80078e0:	682b      	ldr	r3, [r5, #0]
 80078e2:	b103      	cbz	r3, 80078e6 <_write_r+0x1e>
 80078e4:	6023      	str	r3, [r4, #0]
 80078e6:	bd38      	pop	{r3, r4, r5, pc}
 80078e8:	240002a4 	.word	0x240002a4

080078ec <__swsetup_r>:
 80078ec:	4b32      	ldr	r3, [pc, #200]	; (80079b8 <__swsetup_r+0xcc>)
 80078ee:	b570      	push	{r4, r5, r6, lr}
 80078f0:	681d      	ldr	r5, [r3, #0]
 80078f2:	4606      	mov	r6, r0
 80078f4:	460c      	mov	r4, r1
 80078f6:	b125      	cbz	r5, 8007902 <__swsetup_r+0x16>
 80078f8:	69ab      	ldr	r3, [r5, #24]
 80078fa:	b913      	cbnz	r3, 8007902 <__swsetup_r+0x16>
 80078fc:	4628      	mov	r0, r5
 80078fe:	f7ff f8ad 	bl	8006a5c <__sinit>
 8007902:	4b2e      	ldr	r3, [pc, #184]	; (80079bc <__swsetup_r+0xd0>)
 8007904:	429c      	cmp	r4, r3
 8007906:	d10f      	bne.n	8007928 <__swsetup_r+0x3c>
 8007908:	686c      	ldr	r4, [r5, #4]
 800790a:	89a3      	ldrh	r3, [r4, #12]
 800790c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007910:	0719      	lsls	r1, r3, #28
 8007912:	d42c      	bmi.n	800796e <__swsetup_r+0x82>
 8007914:	06dd      	lsls	r5, r3, #27
 8007916:	d411      	bmi.n	800793c <__swsetup_r+0x50>
 8007918:	2309      	movs	r3, #9
 800791a:	6033      	str	r3, [r6, #0]
 800791c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007920:	81a3      	strh	r3, [r4, #12]
 8007922:	f04f 30ff 	mov.w	r0, #4294967295
 8007926:	e03e      	b.n	80079a6 <__swsetup_r+0xba>
 8007928:	4b25      	ldr	r3, [pc, #148]	; (80079c0 <__swsetup_r+0xd4>)
 800792a:	429c      	cmp	r4, r3
 800792c:	d101      	bne.n	8007932 <__swsetup_r+0x46>
 800792e:	68ac      	ldr	r4, [r5, #8]
 8007930:	e7eb      	b.n	800790a <__swsetup_r+0x1e>
 8007932:	4b24      	ldr	r3, [pc, #144]	; (80079c4 <__swsetup_r+0xd8>)
 8007934:	429c      	cmp	r4, r3
 8007936:	bf08      	it	eq
 8007938:	68ec      	ldreq	r4, [r5, #12]
 800793a:	e7e6      	b.n	800790a <__swsetup_r+0x1e>
 800793c:	0758      	lsls	r0, r3, #29
 800793e:	d512      	bpl.n	8007966 <__swsetup_r+0x7a>
 8007940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007942:	b141      	cbz	r1, 8007956 <__swsetup_r+0x6a>
 8007944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007948:	4299      	cmp	r1, r3
 800794a:	d002      	beq.n	8007952 <__swsetup_r+0x66>
 800794c:	4630      	mov	r0, r6
 800794e:	f7ff fcdb 	bl	8007308 <_free_r>
 8007952:	2300      	movs	r3, #0
 8007954:	6363      	str	r3, [r4, #52]	; 0x34
 8007956:	89a3      	ldrh	r3, [r4, #12]
 8007958:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800795c:	81a3      	strh	r3, [r4, #12]
 800795e:	2300      	movs	r3, #0
 8007960:	6063      	str	r3, [r4, #4]
 8007962:	6923      	ldr	r3, [r4, #16]
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	89a3      	ldrh	r3, [r4, #12]
 8007968:	f043 0308 	orr.w	r3, r3, #8
 800796c:	81a3      	strh	r3, [r4, #12]
 800796e:	6923      	ldr	r3, [r4, #16]
 8007970:	b94b      	cbnz	r3, 8007986 <__swsetup_r+0x9a>
 8007972:	89a3      	ldrh	r3, [r4, #12]
 8007974:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800797c:	d003      	beq.n	8007986 <__swsetup_r+0x9a>
 800797e:	4621      	mov	r1, r4
 8007980:	4630      	mov	r0, r6
 8007982:	f000 f95b 	bl	8007c3c <__smakebuf_r>
 8007986:	89a0      	ldrh	r0, [r4, #12]
 8007988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800798c:	f010 0301 	ands.w	r3, r0, #1
 8007990:	d00a      	beq.n	80079a8 <__swsetup_r+0xbc>
 8007992:	2300      	movs	r3, #0
 8007994:	60a3      	str	r3, [r4, #8]
 8007996:	6963      	ldr	r3, [r4, #20]
 8007998:	425b      	negs	r3, r3
 800799a:	61a3      	str	r3, [r4, #24]
 800799c:	6923      	ldr	r3, [r4, #16]
 800799e:	b943      	cbnz	r3, 80079b2 <__swsetup_r+0xc6>
 80079a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079a4:	d1ba      	bne.n	800791c <__swsetup_r+0x30>
 80079a6:	bd70      	pop	{r4, r5, r6, pc}
 80079a8:	0781      	lsls	r1, r0, #30
 80079aa:	bf58      	it	pl
 80079ac:	6963      	ldrpl	r3, [r4, #20]
 80079ae:	60a3      	str	r3, [r4, #8]
 80079b0:	e7f4      	b.n	800799c <__swsetup_r+0xb0>
 80079b2:	2000      	movs	r0, #0
 80079b4:	e7f7      	b.n	80079a6 <__swsetup_r+0xba>
 80079b6:	bf00      	nop
 80079b8:	24000010 	.word	0x24000010
 80079bc:	08007f64 	.word	0x08007f64
 80079c0:	08007f84 	.word	0x08007f84
 80079c4:	08007f44 	.word	0x08007f44

080079c8 <__assert_func>:
 80079c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079ca:	4614      	mov	r4, r2
 80079cc:	461a      	mov	r2, r3
 80079ce:	4b09      	ldr	r3, [pc, #36]	; (80079f4 <__assert_func+0x2c>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4605      	mov	r5, r0
 80079d4:	68d8      	ldr	r0, [r3, #12]
 80079d6:	b14c      	cbz	r4, 80079ec <__assert_func+0x24>
 80079d8:	4b07      	ldr	r3, [pc, #28]	; (80079f8 <__assert_func+0x30>)
 80079da:	9100      	str	r1, [sp, #0]
 80079dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079e0:	4906      	ldr	r1, [pc, #24]	; (80079fc <__assert_func+0x34>)
 80079e2:	462b      	mov	r3, r5
 80079e4:	f000 f8e0 	bl	8007ba8 <fiprintf>
 80079e8:	f000 f9a5 	bl	8007d36 <abort>
 80079ec:	4b04      	ldr	r3, [pc, #16]	; (8007a00 <__assert_func+0x38>)
 80079ee:	461c      	mov	r4, r3
 80079f0:	e7f3      	b.n	80079da <__assert_func+0x12>
 80079f2:	bf00      	nop
 80079f4:	24000010 	.word	0x24000010
 80079f8:	0800810d 	.word	0x0800810d
 80079fc:	0800811a 	.word	0x0800811a
 8007a00:	08008148 	.word	0x08008148

08007a04 <_close_r>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	4d06      	ldr	r5, [pc, #24]	; (8007a20 <_close_r+0x1c>)
 8007a08:	2300      	movs	r3, #0
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	4608      	mov	r0, r1
 8007a0e:	602b      	str	r3, [r5, #0]
 8007a10:	f7f9 f863 	bl	8000ada <_close>
 8007a14:	1c43      	adds	r3, r0, #1
 8007a16:	d102      	bne.n	8007a1e <_close_r+0x1a>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	b103      	cbz	r3, 8007a1e <_close_r+0x1a>
 8007a1c:	6023      	str	r3, [r4, #0]
 8007a1e:	bd38      	pop	{r3, r4, r5, pc}
 8007a20:	240002a4 	.word	0x240002a4

08007a24 <__sflush_r>:
 8007a24:	898a      	ldrh	r2, [r1, #12]
 8007a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	0710      	lsls	r0, r2, #28
 8007a2e:	460c      	mov	r4, r1
 8007a30:	d458      	bmi.n	8007ae4 <__sflush_r+0xc0>
 8007a32:	684b      	ldr	r3, [r1, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	dc05      	bgt.n	8007a44 <__sflush_r+0x20>
 8007a38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	dc02      	bgt.n	8007a44 <__sflush_r+0x20>
 8007a3e:	2000      	movs	r0, #0
 8007a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a46:	2e00      	cmp	r6, #0
 8007a48:	d0f9      	beq.n	8007a3e <__sflush_r+0x1a>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a50:	682f      	ldr	r7, [r5, #0]
 8007a52:	602b      	str	r3, [r5, #0]
 8007a54:	d032      	beq.n	8007abc <__sflush_r+0x98>
 8007a56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a58:	89a3      	ldrh	r3, [r4, #12]
 8007a5a:	075a      	lsls	r2, r3, #29
 8007a5c:	d505      	bpl.n	8007a6a <__sflush_r+0x46>
 8007a5e:	6863      	ldr	r3, [r4, #4]
 8007a60:	1ac0      	subs	r0, r0, r3
 8007a62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a64:	b10b      	cbz	r3, 8007a6a <__sflush_r+0x46>
 8007a66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a68:	1ac0      	subs	r0, r0, r3
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a70:	6a21      	ldr	r1, [r4, #32]
 8007a72:	4628      	mov	r0, r5
 8007a74:	47b0      	blx	r6
 8007a76:	1c43      	adds	r3, r0, #1
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	d106      	bne.n	8007a8a <__sflush_r+0x66>
 8007a7c:	6829      	ldr	r1, [r5, #0]
 8007a7e:	291d      	cmp	r1, #29
 8007a80:	d82c      	bhi.n	8007adc <__sflush_r+0xb8>
 8007a82:	4a2a      	ldr	r2, [pc, #168]	; (8007b2c <__sflush_r+0x108>)
 8007a84:	40ca      	lsrs	r2, r1
 8007a86:	07d6      	lsls	r6, r2, #31
 8007a88:	d528      	bpl.n	8007adc <__sflush_r+0xb8>
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	6062      	str	r2, [r4, #4]
 8007a8e:	04d9      	lsls	r1, r3, #19
 8007a90:	6922      	ldr	r2, [r4, #16]
 8007a92:	6022      	str	r2, [r4, #0]
 8007a94:	d504      	bpl.n	8007aa0 <__sflush_r+0x7c>
 8007a96:	1c42      	adds	r2, r0, #1
 8007a98:	d101      	bne.n	8007a9e <__sflush_r+0x7a>
 8007a9a:	682b      	ldr	r3, [r5, #0]
 8007a9c:	b903      	cbnz	r3, 8007aa0 <__sflush_r+0x7c>
 8007a9e:	6560      	str	r0, [r4, #84]	; 0x54
 8007aa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007aa2:	602f      	str	r7, [r5, #0]
 8007aa4:	2900      	cmp	r1, #0
 8007aa6:	d0ca      	beq.n	8007a3e <__sflush_r+0x1a>
 8007aa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007aac:	4299      	cmp	r1, r3
 8007aae:	d002      	beq.n	8007ab6 <__sflush_r+0x92>
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	f7ff fc29 	bl	8007308 <_free_r>
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	6360      	str	r0, [r4, #52]	; 0x34
 8007aba:	e7c1      	b.n	8007a40 <__sflush_r+0x1c>
 8007abc:	6a21      	ldr	r1, [r4, #32]
 8007abe:	2301      	movs	r3, #1
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	47b0      	blx	r6
 8007ac4:	1c41      	adds	r1, r0, #1
 8007ac6:	d1c7      	bne.n	8007a58 <__sflush_r+0x34>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d0c4      	beq.n	8007a58 <__sflush_r+0x34>
 8007ace:	2b1d      	cmp	r3, #29
 8007ad0:	d001      	beq.n	8007ad6 <__sflush_r+0xb2>
 8007ad2:	2b16      	cmp	r3, #22
 8007ad4:	d101      	bne.n	8007ada <__sflush_r+0xb6>
 8007ad6:	602f      	str	r7, [r5, #0]
 8007ad8:	e7b1      	b.n	8007a3e <__sflush_r+0x1a>
 8007ada:	89a3      	ldrh	r3, [r4, #12]
 8007adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ae0:	81a3      	strh	r3, [r4, #12]
 8007ae2:	e7ad      	b.n	8007a40 <__sflush_r+0x1c>
 8007ae4:	690f      	ldr	r7, [r1, #16]
 8007ae6:	2f00      	cmp	r7, #0
 8007ae8:	d0a9      	beq.n	8007a3e <__sflush_r+0x1a>
 8007aea:	0793      	lsls	r3, r2, #30
 8007aec:	680e      	ldr	r6, [r1, #0]
 8007aee:	bf08      	it	eq
 8007af0:	694b      	ldreq	r3, [r1, #20]
 8007af2:	600f      	str	r7, [r1, #0]
 8007af4:	bf18      	it	ne
 8007af6:	2300      	movne	r3, #0
 8007af8:	eba6 0807 	sub.w	r8, r6, r7
 8007afc:	608b      	str	r3, [r1, #8]
 8007afe:	f1b8 0f00 	cmp.w	r8, #0
 8007b02:	dd9c      	ble.n	8007a3e <__sflush_r+0x1a>
 8007b04:	6a21      	ldr	r1, [r4, #32]
 8007b06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b08:	4643      	mov	r3, r8
 8007b0a:	463a      	mov	r2, r7
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	47b0      	blx	r6
 8007b10:	2800      	cmp	r0, #0
 8007b12:	dc06      	bgt.n	8007b22 <__sflush_r+0xfe>
 8007b14:	89a3      	ldrh	r3, [r4, #12]
 8007b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b1a:	81a3      	strh	r3, [r4, #12]
 8007b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b20:	e78e      	b.n	8007a40 <__sflush_r+0x1c>
 8007b22:	4407      	add	r7, r0
 8007b24:	eba8 0800 	sub.w	r8, r8, r0
 8007b28:	e7e9      	b.n	8007afe <__sflush_r+0xda>
 8007b2a:	bf00      	nop
 8007b2c:	20400001 	.word	0x20400001

08007b30 <_fflush_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	690b      	ldr	r3, [r1, #16]
 8007b34:	4605      	mov	r5, r0
 8007b36:	460c      	mov	r4, r1
 8007b38:	b913      	cbnz	r3, 8007b40 <_fflush_r+0x10>
 8007b3a:	2500      	movs	r5, #0
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	bd38      	pop	{r3, r4, r5, pc}
 8007b40:	b118      	cbz	r0, 8007b4a <_fflush_r+0x1a>
 8007b42:	6983      	ldr	r3, [r0, #24]
 8007b44:	b90b      	cbnz	r3, 8007b4a <_fflush_r+0x1a>
 8007b46:	f7fe ff89 	bl	8006a5c <__sinit>
 8007b4a:	4b14      	ldr	r3, [pc, #80]	; (8007b9c <_fflush_r+0x6c>)
 8007b4c:	429c      	cmp	r4, r3
 8007b4e:	d11b      	bne.n	8007b88 <_fflush_r+0x58>
 8007b50:	686c      	ldr	r4, [r5, #4]
 8007b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0ef      	beq.n	8007b3a <_fflush_r+0xa>
 8007b5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b5c:	07d0      	lsls	r0, r2, #31
 8007b5e:	d404      	bmi.n	8007b6a <_fflush_r+0x3a>
 8007b60:	0599      	lsls	r1, r3, #22
 8007b62:	d402      	bmi.n	8007b6a <_fflush_r+0x3a>
 8007b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b66:	f7ff f81c 	bl	8006ba2 <__retarget_lock_acquire_recursive>
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	4621      	mov	r1, r4
 8007b6e:	f7ff ff59 	bl	8007a24 <__sflush_r>
 8007b72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b74:	07da      	lsls	r2, r3, #31
 8007b76:	4605      	mov	r5, r0
 8007b78:	d4e0      	bmi.n	8007b3c <_fflush_r+0xc>
 8007b7a:	89a3      	ldrh	r3, [r4, #12]
 8007b7c:	059b      	lsls	r3, r3, #22
 8007b7e:	d4dd      	bmi.n	8007b3c <_fflush_r+0xc>
 8007b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b82:	f7ff f80f 	bl	8006ba4 <__retarget_lock_release_recursive>
 8007b86:	e7d9      	b.n	8007b3c <_fflush_r+0xc>
 8007b88:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <_fflush_r+0x70>)
 8007b8a:	429c      	cmp	r4, r3
 8007b8c:	d101      	bne.n	8007b92 <_fflush_r+0x62>
 8007b8e:	68ac      	ldr	r4, [r5, #8]
 8007b90:	e7df      	b.n	8007b52 <_fflush_r+0x22>
 8007b92:	4b04      	ldr	r3, [pc, #16]	; (8007ba4 <_fflush_r+0x74>)
 8007b94:	429c      	cmp	r4, r3
 8007b96:	bf08      	it	eq
 8007b98:	68ec      	ldreq	r4, [r5, #12]
 8007b9a:	e7da      	b.n	8007b52 <_fflush_r+0x22>
 8007b9c:	08007f64 	.word	0x08007f64
 8007ba0:	08007f84 	.word	0x08007f84
 8007ba4:	08007f44 	.word	0x08007f44

08007ba8 <fiprintf>:
 8007ba8:	b40e      	push	{r1, r2, r3}
 8007baa:	b503      	push	{r0, r1, lr}
 8007bac:	4601      	mov	r1, r0
 8007bae:	ab03      	add	r3, sp, #12
 8007bb0:	4805      	ldr	r0, [pc, #20]	; (8007bc8 <fiprintf+0x20>)
 8007bb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bb6:	6800      	ldr	r0, [r0, #0]
 8007bb8:	9301      	str	r3, [sp, #4]
 8007bba:	f7ff fcaf 	bl	800751c <_vfiprintf_r>
 8007bbe:	b002      	add	sp, #8
 8007bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bc4:	b003      	add	sp, #12
 8007bc6:	4770      	bx	lr
 8007bc8:	24000010 	.word	0x24000010

08007bcc <_lseek_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4d07      	ldr	r5, [pc, #28]	; (8007bec <_lseek_r+0x20>)
 8007bd0:	4604      	mov	r4, r0
 8007bd2:	4608      	mov	r0, r1
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	602a      	str	r2, [r5, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f7f8 ffa4 	bl	8000b28 <_lseek>
 8007be0:	1c43      	adds	r3, r0, #1
 8007be2:	d102      	bne.n	8007bea <_lseek_r+0x1e>
 8007be4:	682b      	ldr	r3, [r5, #0]
 8007be6:	b103      	cbz	r3, 8007bea <_lseek_r+0x1e>
 8007be8:	6023      	str	r3, [r4, #0]
 8007bea:	bd38      	pop	{r3, r4, r5, pc}
 8007bec:	240002a4 	.word	0x240002a4

08007bf0 <__swhatbuf_r>:
 8007bf0:	b570      	push	{r4, r5, r6, lr}
 8007bf2:	460e      	mov	r6, r1
 8007bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf8:	2900      	cmp	r1, #0
 8007bfa:	b096      	sub	sp, #88	; 0x58
 8007bfc:	4614      	mov	r4, r2
 8007bfe:	461d      	mov	r5, r3
 8007c00:	da08      	bge.n	8007c14 <__swhatbuf_r+0x24>
 8007c02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	602a      	str	r2, [r5, #0]
 8007c0a:	061a      	lsls	r2, r3, #24
 8007c0c:	d410      	bmi.n	8007c30 <__swhatbuf_r+0x40>
 8007c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c12:	e00e      	b.n	8007c32 <__swhatbuf_r+0x42>
 8007c14:	466a      	mov	r2, sp
 8007c16:	f000 f895 	bl	8007d44 <_fstat_r>
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	dbf1      	blt.n	8007c02 <__swhatbuf_r+0x12>
 8007c1e:	9a01      	ldr	r2, [sp, #4]
 8007c20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c28:	425a      	negs	r2, r3
 8007c2a:	415a      	adcs	r2, r3
 8007c2c:	602a      	str	r2, [r5, #0]
 8007c2e:	e7ee      	b.n	8007c0e <__swhatbuf_r+0x1e>
 8007c30:	2340      	movs	r3, #64	; 0x40
 8007c32:	2000      	movs	r0, #0
 8007c34:	6023      	str	r3, [r4, #0]
 8007c36:	b016      	add	sp, #88	; 0x58
 8007c38:	bd70      	pop	{r4, r5, r6, pc}
	...

08007c3c <__smakebuf_r>:
 8007c3c:	898b      	ldrh	r3, [r1, #12]
 8007c3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c40:	079d      	lsls	r5, r3, #30
 8007c42:	4606      	mov	r6, r0
 8007c44:	460c      	mov	r4, r1
 8007c46:	d507      	bpl.n	8007c58 <__smakebuf_r+0x1c>
 8007c48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c4c:	6023      	str	r3, [r4, #0]
 8007c4e:	6123      	str	r3, [r4, #16]
 8007c50:	2301      	movs	r3, #1
 8007c52:	6163      	str	r3, [r4, #20]
 8007c54:	b002      	add	sp, #8
 8007c56:	bd70      	pop	{r4, r5, r6, pc}
 8007c58:	ab01      	add	r3, sp, #4
 8007c5a:	466a      	mov	r2, sp
 8007c5c:	f7ff ffc8 	bl	8007bf0 <__swhatbuf_r>
 8007c60:	9900      	ldr	r1, [sp, #0]
 8007c62:	4605      	mov	r5, r0
 8007c64:	4630      	mov	r0, r6
 8007c66:	f7ff fbbb 	bl	80073e0 <_malloc_r>
 8007c6a:	b948      	cbnz	r0, 8007c80 <__smakebuf_r+0x44>
 8007c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c70:	059a      	lsls	r2, r3, #22
 8007c72:	d4ef      	bmi.n	8007c54 <__smakebuf_r+0x18>
 8007c74:	f023 0303 	bic.w	r3, r3, #3
 8007c78:	f043 0302 	orr.w	r3, r3, #2
 8007c7c:	81a3      	strh	r3, [r4, #12]
 8007c7e:	e7e3      	b.n	8007c48 <__smakebuf_r+0xc>
 8007c80:	4b0d      	ldr	r3, [pc, #52]	; (8007cb8 <__smakebuf_r+0x7c>)
 8007c82:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c84:	89a3      	ldrh	r3, [r4, #12]
 8007c86:	6020      	str	r0, [r4, #0]
 8007c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c8c:	81a3      	strh	r3, [r4, #12]
 8007c8e:	9b00      	ldr	r3, [sp, #0]
 8007c90:	6163      	str	r3, [r4, #20]
 8007c92:	9b01      	ldr	r3, [sp, #4]
 8007c94:	6120      	str	r0, [r4, #16]
 8007c96:	b15b      	cbz	r3, 8007cb0 <__smakebuf_r+0x74>
 8007c98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f000 f863 	bl	8007d68 <_isatty_r>
 8007ca2:	b128      	cbz	r0, 8007cb0 <__smakebuf_r+0x74>
 8007ca4:	89a3      	ldrh	r3, [r4, #12]
 8007ca6:	f023 0303 	bic.w	r3, r3, #3
 8007caa:	f043 0301 	orr.w	r3, r3, #1
 8007cae:	81a3      	strh	r3, [r4, #12]
 8007cb0:	89a0      	ldrh	r0, [r4, #12]
 8007cb2:	4305      	orrs	r5, r0
 8007cb4:	81a5      	strh	r5, [r4, #12]
 8007cb6:	e7cd      	b.n	8007c54 <__smakebuf_r+0x18>
 8007cb8:	080069f5 	.word	0x080069f5

08007cbc <__ascii_mbtowc>:
 8007cbc:	b082      	sub	sp, #8
 8007cbe:	b901      	cbnz	r1, 8007cc2 <__ascii_mbtowc+0x6>
 8007cc0:	a901      	add	r1, sp, #4
 8007cc2:	b142      	cbz	r2, 8007cd6 <__ascii_mbtowc+0x1a>
 8007cc4:	b14b      	cbz	r3, 8007cda <__ascii_mbtowc+0x1e>
 8007cc6:	7813      	ldrb	r3, [r2, #0]
 8007cc8:	600b      	str	r3, [r1, #0]
 8007cca:	7812      	ldrb	r2, [r2, #0]
 8007ccc:	1e10      	subs	r0, r2, #0
 8007cce:	bf18      	it	ne
 8007cd0:	2001      	movne	r0, #1
 8007cd2:	b002      	add	sp, #8
 8007cd4:	4770      	bx	lr
 8007cd6:	4610      	mov	r0, r2
 8007cd8:	e7fb      	b.n	8007cd2 <__ascii_mbtowc+0x16>
 8007cda:	f06f 0001 	mvn.w	r0, #1
 8007cde:	e7f8      	b.n	8007cd2 <__ascii_mbtowc+0x16>

08007ce0 <__malloc_lock>:
 8007ce0:	4801      	ldr	r0, [pc, #4]	; (8007ce8 <__malloc_lock+0x8>)
 8007ce2:	f7fe bf5e 	b.w	8006ba2 <__retarget_lock_acquire_recursive>
 8007ce6:	bf00      	nop
 8007ce8:	24000298 	.word	0x24000298

08007cec <__malloc_unlock>:
 8007cec:	4801      	ldr	r0, [pc, #4]	; (8007cf4 <__malloc_unlock+0x8>)
 8007cee:	f7fe bf59 	b.w	8006ba4 <__retarget_lock_release_recursive>
 8007cf2:	bf00      	nop
 8007cf4:	24000298 	.word	0x24000298

08007cf8 <_read_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	4d07      	ldr	r5, [pc, #28]	; (8007d18 <_read_r+0x20>)
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	4608      	mov	r0, r1
 8007d00:	4611      	mov	r1, r2
 8007d02:	2200      	movs	r2, #0
 8007d04:	602a      	str	r2, [r5, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	f7f8 feca 	bl	8000aa0 <_read>
 8007d0c:	1c43      	adds	r3, r0, #1
 8007d0e:	d102      	bne.n	8007d16 <_read_r+0x1e>
 8007d10:	682b      	ldr	r3, [r5, #0]
 8007d12:	b103      	cbz	r3, 8007d16 <_read_r+0x1e>
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	bd38      	pop	{r3, r4, r5, pc}
 8007d18:	240002a4 	.word	0x240002a4

08007d1c <__ascii_wctomb>:
 8007d1c:	b149      	cbz	r1, 8007d32 <__ascii_wctomb+0x16>
 8007d1e:	2aff      	cmp	r2, #255	; 0xff
 8007d20:	bf85      	ittet	hi
 8007d22:	238a      	movhi	r3, #138	; 0x8a
 8007d24:	6003      	strhi	r3, [r0, #0]
 8007d26:	700a      	strbls	r2, [r1, #0]
 8007d28:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d2c:	bf98      	it	ls
 8007d2e:	2001      	movls	r0, #1
 8007d30:	4770      	bx	lr
 8007d32:	4608      	mov	r0, r1
 8007d34:	4770      	bx	lr

08007d36 <abort>:
 8007d36:	b508      	push	{r3, lr}
 8007d38:	2006      	movs	r0, #6
 8007d3a:	f000 f84d 	bl	8007dd8 <raise>
 8007d3e:	2001      	movs	r0, #1
 8007d40:	f7f8 fea4 	bl	8000a8c <_exit>

08007d44 <_fstat_r>:
 8007d44:	b538      	push	{r3, r4, r5, lr}
 8007d46:	4d07      	ldr	r5, [pc, #28]	; (8007d64 <_fstat_r+0x20>)
 8007d48:	2300      	movs	r3, #0
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	4608      	mov	r0, r1
 8007d4e:	4611      	mov	r1, r2
 8007d50:	602b      	str	r3, [r5, #0]
 8007d52:	f7f8 fece 	bl	8000af2 <_fstat>
 8007d56:	1c43      	adds	r3, r0, #1
 8007d58:	d102      	bne.n	8007d60 <_fstat_r+0x1c>
 8007d5a:	682b      	ldr	r3, [r5, #0]
 8007d5c:	b103      	cbz	r3, 8007d60 <_fstat_r+0x1c>
 8007d5e:	6023      	str	r3, [r4, #0]
 8007d60:	bd38      	pop	{r3, r4, r5, pc}
 8007d62:	bf00      	nop
 8007d64:	240002a4 	.word	0x240002a4

08007d68 <_isatty_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	4d06      	ldr	r5, [pc, #24]	; (8007d84 <_isatty_r+0x1c>)
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	4604      	mov	r4, r0
 8007d70:	4608      	mov	r0, r1
 8007d72:	602b      	str	r3, [r5, #0]
 8007d74:	f7f8 fecd 	bl	8000b12 <_isatty>
 8007d78:	1c43      	adds	r3, r0, #1
 8007d7a:	d102      	bne.n	8007d82 <_isatty_r+0x1a>
 8007d7c:	682b      	ldr	r3, [r5, #0]
 8007d7e:	b103      	cbz	r3, 8007d82 <_isatty_r+0x1a>
 8007d80:	6023      	str	r3, [r4, #0]
 8007d82:	bd38      	pop	{r3, r4, r5, pc}
 8007d84:	240002a4 	.word	0x240002a4

08007d88 <_raise_r>:
 8007d88:	291f      	cmp	r1, #31
 8007d8a:	b538      	push	{r3, r4, r5, lr}
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	460d      	mov	r5, r1
 8007d90:	d904      	bls.n	8007d9c <_raise_r+0x14>
 8007d92:	2316      	movs	r3, #22
 8007d94:	6003      	str	r3, [r0, #0]
 8007d96:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007d9e:	b112      	cbz	r2, 8007da6 <_raise_r+0x1e>
 8007da0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007da4:	b94b      	cbnz	r3, 8007dba <_raise_r+0x32>
 8007da6:	4620      	mov	r0, r4
 8007da8:	f000 f830 	bl	8007e0c <_getpid_r>
 8007dac:	462a      	mov	r2, r5
 8007dae:	4601      	mov	r1, r0
 8007db0:	4620      	mov	r0, r4
 8007db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007db6:	f000 b817 	b.w	8007de8 <_kill_r>
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d00a      	beq.n	8007dd4 <_raise_r+0x4c>
 8007dbe:	1c59      	adds	r1, r3, #1
 8007dc0:	d103      	bne.n	8007dca <_raise_r+0x42>
 8007dc2:	2316      	movs	r3, #22
 8007dc4:	6003      	str	r3, [r0, #0]
 8007dc6:	2001      	movs	r0, #1
 8007dc8:	e7e7      	b.n	8007d9a <_raise_r+0x12>
 8007dca:	2400      	movs	r4, #0
 8007dcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	4798      	blx	r3
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	e7e0      	b.n	8007d9a <_raise_r+0x12>

08007dd8 <raise>:
 8007dd8:	4b02      	ldr	r3, [pc, #8]	; (8007de4 <raise+0xc>)
 8007dda:	4601      	mov	r1, r0
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	f7ff bfd3 	b.w	8007d88 <_raise_r>
 8007de2:	bf00      	nop
 8007de4:	24000010 	.word	0x24000010

08007de8 <_kill_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4d07      	ldr	r5, [pc, #28]	; (8007e08 <_kill_r+0x20>)
 8007dec:	2300      	movs	r3, #0
 8007dee:	4604      	mov	r4, r0
 8007df0:	4608      	mov	r0, r1
 8007df2:	4611      	mov	r1, r2
 8007df4:	602b      	str	r3, [r5, #0]
 8007df6:	f7f8 fe39 	bl	8000a6c <_kill>
 8007dfa:	1c43      	adds	r3, r0, #1
 8007dfc:	d102      	bne.n	8007e04 <_kill_r+0x1c>
 8007dfe:	682b      	ldr	r3, [r5, #0]
 8007e00:	b103      	cbz	r3, 8007e04 <_kill_r+0x1c>
 8007e02:	6023      	str	r3, [r4, #0]
 8007e04:	bd38      	pop	{r3, r4, r5, pc}
 8007e06:	bf00      	nop
 8007e08:	240002a4 	.word	0x240002a4

08007e0c <_getpid_r>:
 8007e0c:	f7f8 be26 	b.w	8000a5c <_getpid>

08007e10 <_init>:
 8007e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e12:	bf00      	nop
 8007e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e16:	bc08      	pop	{r3}
 8007e18:	469e      	mov	lr, r3
 8007e1a:	4770      	bx	lr

08007e1c <_fini>:
 8007e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1e:	bf00      	nop
 8007e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e22:	bc08      	pop	{r3}
 8007e24:	469e      	mov	lr, r3
 8007e26:	4770      	bx	lr
